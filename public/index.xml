<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home</title>
    <link>/</link>
    <description>Recent content on Home</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 01 Jun 2030 13:00:00 +0900</lastBuildDate>
    
	    <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Example Talk</title>
      <link>/talk/example/</link>
      <pubDate>Sat, 01 Jun 2030 13:00:00 +0900</pubDate>
      
      <guid>/talk/example/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click on the &lt;strong&gt;Slides&lt;/strong&gt; button above to view the built-in slides feature.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Slides can be added in a few ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Create&lt;/strong&gt; slides using Academic&amp;rsquo;s &lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content/#create-slides&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;Slides&lt;/em&gt;&lt;/a&gt; feature and link using &lt;code&gt;slides&lt;/code&gt; parameter in the front matter of the talk file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Upload&lt;/strong&gt; an existing slide deck to &lt;code&gt;static/&lt;/code&gt; and link using &lt;code&gt;url_slides&lt;/code&gt; parameter in the front matter of the talk file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Embed&lt;/strong&gt; your slides (e.g. Google Slides) or presentation video on this page using &lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34;&gt;shortcodes&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Further talk details can easily be added to this page using &lt;em&gt;Markdown&lt;/em&gt; and $\rm \LaTeX$ math code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bootstrap</title>
      <link>/tutorial/bootstrap/</link>
      <pubDate>Mon, 29 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/tutorial/bootstrap/</guid>
      <description>

&lt;hr /&gt;

&lt;h2 id=&#34;bs-image-img-fluid&#34;&gt;BS_image: &lt;strong&gt;img-fluid&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;Description&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Create responsive images by adding an &lt;code&gt;.img-fluid&lt;/code&gt; class to the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag. The image will then scale nicely to the parent element.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Syntax&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;img class=&amp;quot;img-fluid&amp;quot; src=&amp;quot;img_chania.jpg&amp;quot; alt=&amp;quot;Chania&amp;quot;&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;bs-spacing-my&#34;&gt;BS_Spacing: &lt;strong&gt;my&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;Description&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Assign responsive-friendly &lt;code&gt;margin&lt;/code&gt; or &lt;code&gt;padding&lt;/code&gt; values to an element or a subset of its sides with shorthand classes&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Syntax&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;quot;my&amp;quot;&amp;gt;
  Centered element
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Css</title>
      <link>/tutorial/css/</link>
      <pubDate>Mon, 29 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/tutorial/css/</guid>
      <description>

&lt;hr /&gt;

&lt;h2 id=&#34;css-lt-style-gt-tag&#34;&gt;Css: &lt;strong&gt;&amp;lt;style&amp;gt;tag&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;Syntax&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;a {
  color:red
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Note&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;dd&gt;a :  selector(선택자)&lt;/dd&gt;
&lt;dd&gt;{Color:red}; : declaration (선언)&lt;/dd&gt;
&lt;dd&gt;{Color} :  property (속성)&lt;/dd&gt;
&lt;dd&gt;{Color:red} : property value (속성값)&lt;/dd&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;css-boxmodel&#34;&gt;Css: &lt;strong&gt;BoxModel&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;{
font-size:20px;
text-align:center;
text-decoration:none; : 밑줄없애기
text-decoration:underline; : 언더라인 만들어라
Border-bottom:red 20px solid;
Border-right: lightblue 20px solid;
Border-right:none; (오른쪽에 있는 선 없애기)
Margin:20px; 가장자리
Padding:20px;
width:20px;  : 폭
Display:none; 
Display:block; : 전체화면을 이용해라 (block level element)
Display:inline; : 부분화면을 이용해라 (inline element)
}

&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;css-wrapper&#34;&gt;Css: &lt;strong&gt;wrapper&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;Most basic example&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;
#wrapper {
    width: 500px;
    margin: 0 auto;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;
&amp;lt;body&amp;gt;
    &amp;lt;div id=&amp;quot;wrapper&amp;quot;&amp;gt;
        Piece of text inside a 500px width div centered on the page
    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;How the principle works&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create your wrapper and assign it a certain width. Then apply an automatic horizontal margin to it by using &lt;code&gt;margin: 0 auto;&lt;/code&gt; or &lt;code&gt;margin-left: auto;&lt;/code&gt; &lt;code&gt;margin-right: auto;.&lt;/code&gt; The automatic margins make sure your element is centered.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;css-media-queries&#34;&gt;Css: &lt;strong&gt;@media queries&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;@media(max-width:800px) :  screen width &amp;lt; 800px 스크린이 800px 보다 작을때 명령을 내린다.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;@media(min-width:800px)  : screen width  &amp;gt; 800px스크린이 800px 보다 클때 명령을 내린다.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;
    @media(max-width:800px) {
    p {
        font-size: 1px
        font-weight
        font-height
        Display:block;
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;css-grid-template-columns&#34;&gt;Css: &lt;strong&gt;grid-template-columns&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;Description&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Defines the columns of a grid container. You can specify the width of a column by using a keyword (like auto) or a length (like 10px). The number of columns is determined by the number of values defined in the space-separated list.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;grid-template-columns: none;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;No columns are defined, so you only have one.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;/tutorial/HTML_files/test1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;grid-template-columns: auto auto auto;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;You can use the keyword auto so that each column resizes itself automatically.
&lt;img src=&#34;/tutorial/CSS_files/test2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;grid-template-columns: 80px auto 1rem;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;You can mix the units.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;/tutorial/CSS_files/test3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;grid-template-columns: 40px 1fr 2fr;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;You can use the fr flex unit to distribute the remaining space across all flex columns.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;/tutorial/CSS_files/test4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Git</title>
      <link>/tutorial/git/</link>
      <pubDate>Mon, 29 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/tutorial/git/</guid>
      <description>

&lt;hr /&gt;

&lt;h2 id=&#34;git-pwd&#34;&gt;Git : &lt;strong&gt;pwd&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;print working Directory&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;git-ls&#34;&gt;Git : &lt;strong&gt;ls&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;print working List&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;git-cd&#34;&gt;Git :&lt;strong&gt;cd&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;go back to beginning&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;git-cd-1&#34;&gt;Git :&lt;strong&gt;cd -&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;previous directory (or back)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;git-init&#34;&gt;Git :&lt;strong&gt;init&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;Create an empty Git repository or reinitialize an existing one&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;git-clone&#34;&gt;Git :&lt;strong&gt;clone&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;Clone a repository into a new directory&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;git-add&#34;&gt;Git :&lt;strong&gt;add .&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;Add all file contents to the index&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;git-add-1&#34;&gt;Git : &lt;strong&gt;add&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;one file add&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;git add jung.html
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;git-rm&#34;&gt;Git :&lt;strong&gt;rm&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;Remove files&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;git-rm-f&#34;&gt;Git :&lt;strong&gt;rm -f&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;Remove files and directory&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;git-mkdir&#34;&gt;Git :&lt;strong&gt;mkdir&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;create directory&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ex&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git mkdir jung

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;git-touch&#34;&gt;Git :&lt;strong&gt;touch&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;create file&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ex&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git touch jung.txt 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;git-commit-m&#34;&gt;Git :&lt;strong&gt;commit -m &amp;ldquo;&amp;rdquo;&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;write message into github&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;git-remote-add-origin&#34;&gt;Git :&lt;strong&gt;remote add origin&amp;rdquo;&amp;rdquo;&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;link local to github&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;Git remote add origin &amp;quot;https://github.com/J-E-Y/test_2.git&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;git-push&#34;&gt;Git : &lt;strong&gt;Push&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code&gt;git push -u origin master  최종 깇허브에 올리기 
git push -u origin master  
git push -f origin master ( 강제로)

&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;git-log&#34;&gt;Git : &lt;strong&gt;log&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code&gt;git log  기록 업데이트한 기록 확인

&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;git-status&#34;&gt;Git : &lt;strong&gt;status&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code&gt;git 현재 진행 상태 보기
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;git-add-your-github-email-and-username-to-git&#34;&gt;Git : &lt;strong&gt;Add your github email and username to git&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code&gt;git config --global user.email &amp;quot;yourGitHub@email.com&amp;quot;
git config --global user.name &amp;quot;yourGitHubusername&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;git-branch&#34;&gt;Git : &lt;strong&gt;branch&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code&gt;
`기능 변경을 하고 싶을 때 생성 및 사용`


기능 변경하기
이미 돌아가고 있는 프로그램에서 기능을 바꾸고 싶은 일이 생길 수 있습니다. 그럴 때 어떻게 해야 하나요? 보통 초보 개발자들은 주석을 활용합니다. 돌아가고 있는 부분을 삭제하면 아까우니까 주석 처리하고 개발합니다. 시간이 지나면 코드가 엉망진창으로 짜장짬뽕 믹싱이 되는데 이런 코드를 스파게티 코드라고 하죠. 이런 상황을 막기 위해서 브랜치를 사용할 수 있습니다.


&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;git-merge&#34;&gt;Git : &lt;strong&gt;merge&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code&gt;한 브랜치의 내용을 다른 브랜치에 반영 (통합)

&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;git-checkout&#34;&gt;Git : &lt;strong&gt;checkout&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code&gt;저장소에서 특정 커밋이나 브랜치로 돌아가고 싶을 때 사용
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;git-diff&#34;&gt;Git : &lt;strong&gt;diff&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Html</title>
      <link>/tutorial/html/</link>
      <pubDate>Mon, 29 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/tutorial/html/</guid>
      <description>

&lt;hr /&gt;

&lt;h2 id=&#34;html-lt-strong-gt-tag&#34;&gt;html : &lt;strong&gt;&amp;lt;strong&amp;gt;tag&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;Description&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;The HTML &amp;lt;strong&amp;gt; tag gives text a strong emphasis which traditionally means that the text is displayed as bold by the browser.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Note&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;what&amp;rsquo;s the difference bewteen &amp;lt;strong&amp;gt; tag and &amp;lt;b&amp;gt; ?&lt;/p&gt;

&lt;p&gt;strong tag :시각장애인들 낭독기를 사용할때 조금 더 굵 게 읽는다.&lt;/p&gt;

&lt;p&gt;b tag :평상시대로 굵게 읽는다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Syntax&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;body&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Emphasized text goes here&amp;lt;/strong&amp;gt; but not here&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Sample Output&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Emphasized text goes here but not here
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;html-lt-h1-gt-tag&#34;&gt;html : &lt;strong&gt;&amp;lt;h1&amp;gt;tag&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;Description&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;The HTML &lt;strong&gt;&amp;lt;h1&amp;gt;tag&lt;/strong&gt; tag defines the highest level or most important heading in the HTML document. This tag is also commonly referred to as the &lt;strong&gt;&amp;lt;h1&amp;gt;tag&lt;/strong&gt; element.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Syntax&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;Heading 1 goes here&amp;lt;/h1&amp;gt;
&amp;lt;/body&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sample Output&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Heading 1 goes here
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;html-lt-br-gt-tag&#34;&gt;html : &lt;strong&gt;&amp;lt;br&amp;gt;tag&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;Description&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;The HTML &amp;lt;br&amp;gt;tag defines a line break within text in the HTML document. This tag is also commonly referred to as the &amp;lt;&amp;lt;br&amp;gt; element.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Syntax&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
&amp;lt;body&amp;gt;
&amp;lt;p&amp;gt;The paragraph starts here&amp;lt;br&amp;gt;
and ends on the next line.&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Sample Output&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;The paragraph starts here
and ends on the next line.

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;html-nbsp-making-space&#34;&gt;html : &lt;code&gt;&amp;amp;nbsp;&lt;/code&gt;  (making space)&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;Description&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;HTML will only display one space between words, no matter how many times you press the space bar. To force an extra space to show up, type &lt;code&gt;&amp;amp;nbsp;&lt;/code&gt; in the area where you want to force the space.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;html-lt-p-gt-tag&#34;&gt;html : &lt;strong&gt;&amp;lt;p&amp;gt;tag&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;Description&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;The HTML &amp;lt;p&amp;gt; tag defines a paragraph in the HTML document. This tag is also commonly referred to as the &amp;lt;p&amp;gt; element.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;syntax&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;body&amp;gt;
&amp;lt;p&amp;gt;The paragraph goes here.&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;output&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;this 

The paragraph goes here.

this
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;html-lt-hr-gt-tag&#34;&gt;html : &lt;strong&gt;&amp;lt;hr&amp;gt;tag&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;Description&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;The HTML &amp;lt;hr/&amp;gt; tag defines a thematic break between paragraphs in HTML5, and a horizontal rule in HTML 4.01. This tag is also commonly referred to as the &amp;lt;hr/&amp;gt; element.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Note&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;The HTML &amp;lt;hr/&amp;gt; element makes line bewteen two paragraphs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Syntax&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;body&amp;gt;
&amp;lt;p&amp;gt;This is the first paragraph.&amp;lt;/p&amp;gt;
&amp;lt;hr&amp;gt;
&amp;lt;p&amp;gt;This is the second paragraph.&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;html-lt-div-gt-tag&#34;&gt;html : &lt;strong&gt;&amp;lt;div&amp;gt;tag&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;Description&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;The HTML &amp;lt;p&amp;gt; tag defines a generic container in an HTML document that is generally used to group elements. This tag is also commonly referred to as the &amp;lt;p&amp;gt; element.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Note&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;The HTML &amp;lt;p&amp;gt; element is found within the &lt;body&gt; tag.
The &lt;div&gt; tag is generally used to group elements together.
&amp;lt;p&amp;gt;&amp;lt;p&amp;gt; :element is a block-level element.&lt;/p&gt;

&lt;p&gt;The &amp;lt;p&amp;gt; element is a block-level element.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Syntax&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;body&amp;gt;

&amp;lt;div&amp;gt;
&amp;lt;div&amp;gt;this is the type of elemnt &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;/body&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;html-lt-span-gt-tag&#34;&gt;html : &lt;strong&gt;&amp;lt;span&amp;gt;tag&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;Description&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;The HTML &amp;lt;span&amp;gt; tag defines a generic inline container in an HTML document. This tag is also commonly referred to as the &amp;lt;&amp;lt;span&amp;gt; element.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Note&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;lt;span&amp;gt; tag is is generally used for styling purposes when there is no other element to use.
&amp;lt;span&amp;gt; tag is a inline-level element
&amp;lt;span&amp;gt; tag does not inherently represent anything&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Syntax&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;body&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;span&amp;gt;Span text goes here&amp;lt;/span&amp;gt; and not here&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;


&amp;lt;body&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;span class=&amp;quot;red_text&amp;quot;&amp;gt;Span text goes here&amp;lt;/span&amp;gt; and not here&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;html-lt-nav-gt-tag&#34;&gt;html : &lt;strong&gt;&amp;lt;nav&amp;gt;tag&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;Description&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;The HTML &amp;lt;nav&amp;gt; tag is an HTML5 element that defines a section with navigation links in the HTML document. This tag is also commonly referred to as the &amp;lt;nav&amp;gt; element. It is used to define a block of navigation links, either within the current document or to other documents&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Note&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;nav&gt; tag is used to create navigation in the HTML document.For IE browsers older than IE 9, use HTML5shiv which is a javascript workaround to provide support for the new HTML5 elements such as: &amp;lt;header&amp;gt;, &amp;lt;main&amp;gt;, &amp;lt;article&amp;gt;, &amp;lt;section&amp;gt;, &amp;lt;aside&amp;gt;, &amp;lt;nav&amp;gt;, &amp;lt;footer&amp;gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Syntax&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
&amp;lt;body&amp;gt;
&amp;lt;nav&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/section1/index.html&amp;quot;&amp;gt;Section1&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/section2/index.html&amp;quot;&amp;gt;Section2&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/section3/index.html&amp;quot;&amp;gt;Section3&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/nav&amp;gt;
&amp;lt;/body&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;html-lt-ul-gt-tag-부모태그&#34;&gt;html : &lt;strong&gt;&amp;lt;ul&amp;gt;tag&lt;/strong&gt; (부모태그)&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;Description&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;The HTML &amp;lt;ul&amp;gt; tag defines an unordered list in the HTML document. This tag is also commonly referred to as the &amp;lt;ul&amp;gt; element.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Note&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;The HTML &amp;lt;ul&amp;gt; element is found within the &lt;body&gt; tag.
The &amp;lt;ul&amp;gt; tag is made up of &lt;li&gt; tags.
Use the &amp;lt;ul&amp;gt; tag when the list items have no numerical ordering.
You can nest &amp;lt;ol&amp;gt;, &amp;lt;ul&amp;gt; and &amp;lt;ul&amp;gt;menu lists.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Syntax&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;body&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;First item&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Second item&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Third item&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/body&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Sample Output&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* First item
* Second item
* Third item

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;html-lt-li-gt-tag-부모태그&#34;&gt;html : &lt;strong&gt;&amp;lt;li&amp;gt;tag&lt;/strong&gt; (부모태그)&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;Description&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;The HTML &amp;lt;li&amp;gt; tag defines a list item in &amp;lt;ol&amp;gt;, &amp;lt;ul&amp;gt; or &amp;lt;menu&amp;gt; in the HTML document. This tag is also commonly referred to as the &amp;lt;li&amp;gt; element.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Syntax&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;body&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;First item&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Second item&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Third item&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/body&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Sample Output 1&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;body&amp;gt;
&amp;lt;ol&amp;gt;
&amp;lt;li&amp;gt;First item&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Second item&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Third item&amp;lt;/li&amp;gt;
&amp;lt;/ol&amp;gt;
&amp;lt;/body&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Sample Output 2&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;body&amp;gt;
&amp;lt;menu type=&amp;quot;toolbar&amp;quot;&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;menu label=&amp;quot;File&amp;quot;&amp;gt;
  &amp;lt;button type=&amp;quot;button&amp;quot; onclick=&amp;quot;new()&amp;quot;&amp;gt;New&amp;lt;/button&amp;gt;
  &amp;lt;button type=&amp;quot;button&amp;quot; onclick=&amp;quot;save()&amp;quot;&amp;gt;Save&amp;lt;/button&amp;gt;
&amp;lt;/menu&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;menu label=&amp;quot;Edit&amp;quot;&amp;gt;
  &amp;lt;button type=&amp;quot;button&amp;quot; onclick=&amp;quot;copy()&amp;quot;&amp;gt;Copy&amp;lt;/button&amp;gt;
  &amp;lt;button type=&amp;quot;button&amp;quot; onclick=&amp;quot;paste()&amp;quot;&amp;gt;Paste&amp;lt;/button&amp;gt;
&amp;lt;/menu&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;/menu&amp;gt;
&amp;lt;/body&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Note&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;The &amp;lt;li&amp;gt; tag is used within &amp;lt;ol&amp;gt;, &amp;lt;ul&amp;gt; or &amp;lt;menu&amp;gt;.
You can nest &amp;lt;ol, &amp;lt;ul&amp;gt; and &amp;lt;menu&amp;gt; lists. (자식태그) li 태그는 반드시 부모태그를 가지고 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;html-lt-ol-gt-tag&#34;&gt;html : &lt;strong&gt;&amp;lt;ol&amp;gt;tag&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;Description&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;The HTML &amp;lt;ol&amp;gt; tag defines an ordered list in the HTML document. This tag is also commonly referred to as the &amp;lt;ol&amp;gt; element.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Syntax&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;body&amp;gt;
&amp;lt;ol&amp;gt;
&amp;lt;li&amp;gt;First item&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Second item&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Third item&amp;lt;/li&amp;gt;
&amp;lt;/ol&amp;gt;
&amp;lt;/body&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Sample Output&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;First item&lt;/li&gt;
&lt;li&gt;Second item&lt;/li&gt;
&lt;li&gt;Third item&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Note&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;The &amp;lt;ol&amp;gt; tag is made up of &amp;lt;li&amp;gt; tags.
Use the &amp;lt;ol&amp;gt; tag when the list items have numeric, meaningful ordering.
You can nest &amp;lt;ol&amp;gt;, &amp;lt;ul&amp;gt; and &amp;lt;menu&amp;gt; lists.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;html-container&#34;&gt;html : &lt;strong&gt;container&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;Description&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In HTML, the container is the area enclosed by the beginning and ending tags. For example &amp;lt; HTML &amp;gt; encloses an entire document while other tags may enclose a single word, paragraph, or other elements. In HTML code, all container must have a start and stop tag to close the container. Without a stop tag the start tag will apply to the entire document.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    ...
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;div id=&amp;quot;container&amp;quot;&amp;gt;
      ...
    &amp;lt;/div&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;note&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;The container div, and sometimes content div, are almost always used to allow for more sophisticated CSS styling. The body tag is special in some ways. Browsers don&amp;rsquo;t treat it like a normal div; its position and dimensions are tied to the browser window.&lt;/p&gt;

&lt;p&gt;But a container div is just a div and you can style it with margins and borders. You can give it a fixed width, and you can center it with margin-left: auto; margin-right: auto.&lt;/p&gt;

&lt;p&gt;Plus, content, like a copyright notice for example, can go on the outside of the container div, but it can&amp;rsquo;t go on the outside of the body, allowing for content on the outside of a border.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;html-cashing&#34;&gt;html : &lt;strong&gt;cashing&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;Description&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;파일을 따로 만든후 저장해놓는것&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;how to use it?&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;lt;link rel=&amp;ldquo;stylesheet&amp;rdquo; href=“파일이름&amp;rdquo;&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Sample Output&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;
&amp;lt;!doctype html&amp;gt;

&amp;lt;html&amp;gt;
&amp;lt;title&amp;gt;web1 - Son&amp;lt;/title&amp;gt;
&amp;lt;meta charset=&amp;quot;ut-8&amp;quot;&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;style.css&amp;quot;&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;html-lt-form-gt&#34;&gt;html : &lt;strong&gt;&amp;lt;form&amp;gt;&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;Description&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;The HTML &lt;code&gt;&amp;lt;form&amp;gt; tag&lt;/code&gt; is used to create a form on a web page that has interactive controls for user input. This tag is also commonly referred to as the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Syntax&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;
&amp;lt;body&amp;gt;
  &amp;lt;form action=&amp;quot;&amp;quot; method=&amp;quot;get&amp;quot;&amp;gt;
    Company: &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;company&amp;quot;&amp;gt;&amp;lt;br&amp;gt;
    Address: &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;address&amp;quot;&amp;gt;&amp;lt;br&amp;gt;
    &amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;Submit&amp;quot;&amp;gt;
  &amp;lt;/form&amp;gt;
&amp;lt;/body&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sample Output&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/tutorial/HTML_files/Screen Shot 2019-06-01 at 9.40.42 PM.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Javascript</title>
      <link>/tutorial/javascript/</link>
      <pubDate>Mon, 29 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/tutorial/javascript/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/tutorial/Javascript_Dictionary_files/javascriptt-light_870x220.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;1-data-type&#34;&gt;&lt;strong&gt;1.data type&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;h5 id=&#34;자료형이란&#34;&gt;자료형이란?&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;어떤 종류의 데이터를 사용하는 것이지 컴퓨터에게 알려주는 것
자료형마다 사용 가능한 연산자(Operator)를 따로 가지고 있습니다!
자료형이 같아야 연산을 할 수 있습니다!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;자료형의-종류&#34;&gt;자료형의 종류&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Number :숫자&lt;/li&gt;
&lt;li&gt;String :문자&lt;/li&gt;
&lt;li&gt;Boolean :true and False&lt;/li&gt;
&lt;li&gt;Null : 값이 비어있다&lt;/li&gt;
&lt;li&gt;Undefined :값이 정의되지 않았다&lt;/li&gt;
&lt;li&gt;symbol(new in ECMAScript 6)
and Object :&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;1-number-type-숫자&#34;&gt;1. Number type (숫자)&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ex)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var firstNum = 10;     // 소수점을 사용하지 않은 표현
var secondNum = 10.00; // 소수점을 사용한 표현
var thirdNum = 10e6;   // 10000000
var fourthNum = 10e-6; // 0.00001
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;length&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var a = &amp;quot;hello&amp;quot;
a.length;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;slice :자르기&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var a = &amp;quot;KheLLo&amp;quot;
a[0];
a[1] = &amp;quot;H&amp;quot;; //안 됨


a.slice(1,4);
a.toUpperCase(); : 대문자로 바뀐
a.toLowerCase(); : 소문자로 바뀐다

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;2-string-문자열&#34;&gt;2. String (문자열)&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;I am String&amp;quot;;
&amp;quot;Hello &amp;quot; + &amp;quot;world&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;3-boolean-불리언&#34;&gt;3. Boolean (불리언)&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;true;
false;
5 &amp;gt; 3;
5 === 5;
5 &amp;gt; 5;
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;4-the-typeof-operator-데이터유형을-알려주는-중요한-연산자&#34;&gt;4. The typeof Operator: 데이터유형을 알려주는 중요한 연산자!&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;typeof 10;        // number 타입
typeof &amp;quot;문자열&amp;quot;;  // string 타입
typeof true;      // boolean 타입
typeof undefined; // undefined 타입
typeof null;      // object 타입

&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;5-symbol-심볼&#34;&gt;5. symbol (심볼)&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;심볼 타입은 ECMAScript 6부터 새롭게 추가된 타입이다.
심볼은 유일하고 변경할 수 없는 타입으로, 객체의 프로퍼티를 위한 식별자로 사용할 수 있다.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ex)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var sym = Symbol(&amp;quot;javascript&amp;quot;);  // symbol 타입
var symObj = Object(sym);        // object 타입
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;6-object-객체&#34;&gt;6. object (객체)&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;자바스크립트의 기본 타입은 객체(object)이다. 객체(object)란 실생활에서 우리가 인식할 수 있는 사물로 이해할 수 있다. 객체는 여러 프로퍼티(property)나 메소드(method)를 같은 이름으로 묶어놓은 일종의 집합체이다.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ex)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var dog = { name: &amp;quot;해피&amp;quot;, age: 3 }; // 객체의 생성
// 객체의 프로퍼티 참조
document.getElementById(&amp;quot;result&amp;quot;).innerHTML =
&amp;quot;강아지의 이름은 &amp;quot; + dog.name + &amp;quot;이고, 나이는 &amp;quot; + dog.age + &amp;quot;살 이다.&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;2-variable&#34;&gt;&lt;strong&gt;2.Variable&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;h5 id=&#34;using-variables&#34;&gt;Using Variables&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;var x = 10;

x + 5 ; // =&amp;gt; 15

x ; // =&amp;gt; 10

once we have created our variables,
we can use their name as a substitute for their value elsewhere in our program.


&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;declaring-a-variable-without-a-vaue&#34;&gt;Declaring a variable without a Vaue&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;
Creating a variable in JavaScript is called &amp;quot;declaring&amp;quot; a variable.

1.var carName;
After the declaration, the variable has no value (technically it has the value of undefined).


To assign a value to the variable, use the equal sign:

2. carName = &amp;quot;Volvo&amp;quot;;   // carName 를 Volvo 로 변경할때 var 없이 만든다 cos 먼저 선언을 했기 때문이다. 

2. var carName = &amp;quot;Volvo&amp;quot;;


&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;changing-a-variable-s-value&#34;&gt;Changing a Variable’s value&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;
var pokemon = charmander

pokemon = heelo


Notice that When you change the value of a variable, &amp;quot;you don’t need to use the var keyword&amp;quot;The var keyword is only needed for creating new variables.


&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;variable-scope-변수의-유효-범위&#34;&gt;variable scope 변수의 유효 범위&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;local variable 지역 변수&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Variables declared inside a function body are in the Local scope.&lt;/p&gt;

&lt;p&gt;지역 변수(local variable)란 함수 내에서 선언된 변수를 가리킨다.
이러한 지역 변수는 변수가 선언된 함수 내에서만 유효하며, 함수가 종료되면 메모리에서 사라진다.함수의 매개변수 또한 함수 내에서 정의되는 지역 변수처럼 동작한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ex 1-1&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var greeting = &amp;quot;Hello&amp;quot;;

function greetSomeone() {
	var firstName = &amp;quot;john&amp;quot;
	return greeting + &amp;quot; &amp;quot; + firstName;
}

greetSomeone
firstName; // = &amp;gt; Error


Function(greetSomeone) is working but &amp;quot;firstName&amp;quot;&amp;quot; is Error Because we declared our name variable inside the scope of our greetSomeone function.


&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;global variable  전역 변수&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Variables declared outside a function body are in the global scope.&lt;/p&gt;

&lt;p&gt;전역 변수(global variable)란 함수의 외부에서 선언된 변수를 가리킨다.
이러한 전역 변수는 프로그램의 어느 영역에서나 접근할 수 있으며, 웹 페이지가 닫혀야만 메모리에서 사라진다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ex 1-2&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
&amp;quot;But!!!!!!! if you do this it works well&amp;quot;!!

var greeting = &amp;quot;Hello&amp;quot;;
var firstName = &amp;quot;john&amp;quot;

function greetSomeone() {
	firstName = &amp;quot;JJ&amp;quot;
	return greeting + &amp;quot; &amp;quot;+ firstName;
}


firstNmae // = &amp;gt; JJ

Because you changed a variable the was defined in an outer scope

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;3-operator&#34;&gt;&lt;strong&gt;3.Operator&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;h5 id=&#34;arithmetic-operator-산술-연산자&#34;&gt;arithmetic operator (산술 연산자)&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;+	왼쪽 피연산자의 값에 오른쪽 피연산자의 값을 더함.
-	왼쪽 피연산자의 값에서 오른쪽 피연산자의 값을 뺌.
*	왼쪽 피연산자의 값에 오른쪽 피연산자의 값을 곱함.
/	왼쪽 피연산자의 값을 오른쪽 피연산자의 값으로 나눔.
%	왼쪽 피연산자의 값을 오른쪽 피연산자의 값으로 나눈 후, 그 나머지를 반환함

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ex&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var x = 10, y = 4;
document.write(x + y + &amp;quot;&amp;lt;br&amp;gt;&amp;quot;); // 14
document.write(x - y + &amp;quot;&amp;lt;br&amp;gt;&amp;quot;); // 6
document.write(x * y + &amp;quot;&amp;lt;br&amp;gt;&amp;quot;); // 40
document.write(x / y + &amp;quot;&amp;lt;br&amp;gt;&amp;quot;); // 2.5
document.write(x % y);          // 2

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;assignment-operator-대입-연산자&#34;&gt;assignment operator (대입 연산자)&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;=	왼쪽 피연산자에 오른쪽 피연산자의 값을 대입함.
+=	왼쪽 피연산자의 값에 오른쪽 피연산자의 값을 더한 후, 그 결과 값을 왼쪽 피연산자에 대입함.
-=	왼쪽 피연산자의 값에서 오른쪽 피연산자의 값을 뺀 후, 그 결과 값을 왼쪽 피연산자에 대입함.
*=	왼쪽 피연산자의 값에 오른쪽 피연산자의 값을 곱한 후, 그 결과 값을 왼쪽 피연산자에 대입함.
/=	왼쪽 피연산자의 값을 오른쪽 피연산자의 값으로 나눈 후, 그 결과 값을 왼쪽 피연산자에 대입함.
%=	왼쪽 피연산자의 값을 오른쪽 피연산자의 값으로 나눈 후, 그 나머지를 왼쪽
피연산자에 대입함.

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ex&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var x = 10, y = 10, z = 10;
x = x - 5;
y -= 5; // y = y - 5 와 같은 표현임.
z =- 5; // z = -5 와 같은 표현임.

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;increment-and-decrement-operator-증감-연산자&#34;&gt;increment and decrement operator ( 증감 연산자 )&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;++x	먼저 피연산자의 값을 1 증가시킨 후에 해당 연산을 진행함.
x++	먼저 해당 연산을 수행하고 나서, 피연산자의 값을 1 증가시킴.
--x	먼저 피연산자의 값을 1 감소시킨 후에 해당 연산을 진행함.
x--	먼저 해당 연산을 수행하고 나서, 피연산자의 값을 1 감소시킴.

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ex&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var x = 10, y = 10;
document.write((++x - 3) + &amp;quot;&amp;lt;br&amp;gt;&amp;quot;); // x의 값을 우선 1 증가시킨 후에 3을 뺌.
document.write(x + &amp;quot;&amp;lt;br&amp;gt;&amp;quot;);         // 11
document.write((y++ - 3) + &amp;quot;&amp;lt;br&amp;gt;&amp;quot;); // 먼저 y에서 3을 뺀 후에 y의 값을 1 증가시킴.
document.write(y);                  // 11
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;comparison-operator-비교-연산자&#34;&gt;comparison operator (비교 연산자)&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;==	왼쪽 피연산자와 오른쪽 피연산자의 값이 같으면 참을 반환함.
===	왼쪽 피연산자와 오른쪽 피연산자의 값이 같고, 같은 타입이면 참을 반환함.
!=	왼쪽 피연산자와 오른쪽 피연산자의 값이 같지 않으면 참을 반환함.
!==	왼쪽 피연산자와 오른쪽 피연산자의 값이 같지 않거나, 타입이 다르면 참을 반환함.
&amp;gt;	왼쪽 피연산자의 값이 오른쪽 피연산자의 값보다 크면 참을 반환함.
&amp;gt;=	왼쪽 피연산자의 값이 오른쪽 피연산자의 값보다 크거나 같으면 참을 반환함.
&amp;lt;	왼쪽 피연산자의 값이 오른쪽 피연산자의 값보다 작으면 참을 반환함.
&amp;lt;=	왼쪽 피연산자의 값이 오른쪽 피연산자의 값보다 작거나 같으면 참을 반환함.

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ex&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
var x = 3, y = 5;
var a = &amp;quot;abc&amp;quot;, b = &amp;quot;bcd&amp;quot;;
document.write((x &amp;gt; y) + &amp;quot;&amp;lt;br&amp;gt;&amp;quot;);  // y의 값이 x의 값보다 크므로 false
document.write((a &amp;lt;= b) + &amp;quot;&amp;lt;br&amp;gt;&amp;quot;); // 알파벳 순서상 &#39;a&#39;가 &#39;b&#39;보다 먼저 나오므로 &#39;a&#39;가 &#39;b&#39;보다 작음.
document.write(x &amp;lt; a);             // x의 값은 숫자이고 a의 값은 문자열이므로 비교할 수 없음.

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;logical-operator-논리연산자&#34;&gt;Logical operator (논리연산자)&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;&amp;amp; 는 and 

|| 는 or

! 는 Not
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;bitwise-operator-비트-연산자&#34;&gt;bitwise operator (비트 연산자)&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;
&amp;amp;	대응되는 비트가 모두 1이면 1을 반환함. (비트 AND 연산)
|	대응되는 비트 중에서 하나라도 1이면 1을 반환함. (비트 OR 연산)
^	대응되는 비트가 서로 다르면 1을 반환함. (비트 XOR 연산)
~	비트를 1이면 0으로, 0이면 1로 반전시킴. (비트 NOT 연산)
&amp;lt;&amp;lt;	지정한 수만큼 비트를 전부 왼쪽으로 이동시킴. (left shift 연산)
&amp;gt;&amp;gt;	부호를 유지하면서 지정한 수만큼 비트를 전부 오른쪽으로 이동시킴. (right shift 연산)
&amp;gt;&amp;gt;&amp;gt;	지정한 수만큼 비트를 전부 오른쪽으로 이동시키며, 새로운 비트는 전부 0이 됨.

&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;increment-decrement-operator-증감연산자&#34;&gt;increment/decrement operator (증감연산자)&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;증감 연산자는 피연산자를 1씩 증가 혹은 감소시킬 때 사용하는 연산자이다.이 연산자는 피연산자가 단 하나뿐인 단항 연산자이다.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ex)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var a;
a++;
a = 0;
a++;
a--;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;comparison-operator-비교-연산자-1&#34;&gt;comparison operator (비교 연산자)&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;==	왼쪽 피연산자와 오른쪽 피연산자의 값이 같으면 참을 반환함.
===	왼쪽 피연산자와 오른쪽 피연산자의 값이 같고, 같은 타입이면 참을 반환함.
!=	왼쪽 피연산자와 오른쪽 피연산자의 값이 같지 않으면 참을 반환함.
!==	왼쪽 피연산자와 오른쪽 피연산자의 값이 같지 않거나, 타입이 다르면 참을 반환함.
&amp;gt;	왼쪽 피연산자의 값이 오른쪽 피연산자의 값보다 크면 참을 반환함.
&amp;gt;=	왼쪽 피연산자의 값이 오른쪽 피연산자의 값보다 크거나 같으면 참을 반환함.
&amp;lt;	왼쪽 피연산자의 값이 오른쪽 피연산자의 값보다 작으면 참을 반환함.
&amp;lt;=	왼쪽 피연산자의 값이 오른쪽 피연산자의 값보다 작거나 같으면 참을 반환함.
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;typeof-연산자&#34;&gt;typeof 연산자&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;typeof 연산자는 피연산자의 타입을 반환한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;숫자, NaN	&amp;quot;number&amp;quot;
문자열	&amp;quot;string&amp;quot;
true, false	&amp;quot;boolean&amp;quot;
null	&amp;quot;object&amp;quot;
undefined	&amp;quot;undefined&amp;quot;
함수	&amp;quot;function&amp;quot;
함수가 아닌 객체	&amp;quot;object&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ex&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;typeof &amp;quot;문자열&amp;quot;   // string
typeof 10         // number
typeof NaN        // number
typeof false      // boolean
typeof undefined  // undefined
typeof new Date() // object
typeof null       // object
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;ternary-operator-삼항-연산자&#34;&gt;ternary operator (삼항 연산자)&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;삼항 연산자는 유일하게 피연산자를 세 개나 가지는 조건 연산자이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ex&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var x = 3, y = 5;
var result = (x &amp;gt; y) ? x : y   // x가 더 크면 x를, 그렇지 않으면 y를 반환함.
document.write(&amp;quot;둘 중에 더 큰 수는 &amp;quot; + result + &amp;quot;이다.&amp;quot;);

삼항 연산자는 짧은 if / else 문 대신 사용할 수 있으며, 코드를 간결하게 만들어 준다.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;delete-연산자&#34;&gt;delete 연산자&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;delete 연산자는 피연산자인 객체, 객체의 프로퍼티(property) 또는 배열의 요소(element) 등을 삭제해 준다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;피연산자가 성공적으로 삭제되었을 경우에는 참(true)을 반환하고, 삭제하지 못했을 경우에는 거짓(false)을 반환한다.
이 연산자는 피연산자가 단 하나뿐인 단항 연산자이며, 피연산자의 결합 방향은 오른쪽에서 왼쪽이다.&lt;/p&gt;

&lt;h5 id=&#34;쉼표-연산자&#34;&gt;쉼표 연산자&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;쉼표 연산자를 for 문에서 사용하면, 루프마다 여러 변수를 동시에 갱신할 수 있다.&lt;/p&gt;

&lt;p&gt;루프마다 i의 값은 1씩 증가하고, 동시에 j의 값은 1씩 감소함.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;for (var i = 0, j = 9; i &amp;lt;= j; i++, j--) {
    document.write(&amp;quot;i의 값은 &amp;quot; + i + &amp;quot;이고, j의 값은 &amp;quot; + j + &amp;quot;이다.&amp;lt;br&amp;gt;&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ex&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
var arr = [1, 2, 3];          // 배열 생성
delete arr[2];                // 배열의 원소 중 인덱스가 2인 요소를 삭제함.
document.write(arr + &amp;quot;&amp;lt;br&amp;gt;&amp;quot;); // [1, 2, ]
// 배열에 빈자리가 생긴 것으로 undefined 값으로 직접 설정된 것은 아님.
document.write(arr[2] + &amp;quot;&amp;lt;br&amp;gt;&amp;quot;);
// 배열의 요소를 삭제하는 것이지 배열의 길이까지 줄이는 것은 아님.
document.write(arr.length);

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;instanceof-연산자&#34;&gt;instanceof 연산자&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;instanceof 연산자는 피연산자인 객체가 특정 객체의 인스턴스인지 아닌지를 확인해 준다.
피연산자가 특정 객체의 인스턴스이면 참(true)을 반환하고, 특정 객체의 인스턴스가 아니면 거짓(false)을 반환한다.
이 연산자는 두 개의 피연산자를 가지는 이항 연산자이며, 피연산자들의 결합 방향은 왼쪽에서 오른쪽이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ex&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var str = new String(&amp;quot;이것은 문자열이다.&amp;quot;);
 
str instanceof Object;  // true
str instanceof String;  // true
str instanceof Array;   // false
str instanceof Number;  // false
str instanceof Boolean; // false

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;void-연산자&#34;&gt;void 연산자&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;void 연산자는 피연산자로 어떤 타입의 값이 오던지 상관없이 언제나 undefined 값만을 반환한다.
이 연산자는 피연산자가 단 하나뿐인 단항 연산자이며, 피연산자의 결합 방향은 오른쪽에서 왼쪽이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ex&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;javascript:void(0)&amp;quot;&amp;gt;이 링크는 동작하지 않는다.&amp;lt;/a&amp;gt;
 
&amp;lt;a href=&amp;quot;javascript:void(document.body.style.backgroundColor=&#39;yellow&#39;)&amp;quot;&amp;gt;
이 링크도 동작하지 않지만, HTML 문서의 배경색을 바꿔준다.
&amp;lt;/a&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;4-conditional&#34;&gt;&lt;strong&gt;4.Conditional&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code&gt;
if 문
if / else 문
if / else if / else 문
switch 문

&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;if-문&#34;&gt;if 문&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;if (표현식) {
    표현식의 결과가 참일 때 실행하고자 하는 실행문;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ex&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var x = 10, y = 20;
if (x == y) {
document.write(&amp;quot;x와 y는 같다.&amp;quot;);
}
if (x &amp;lt; y) {
document.write(&amp;quot;x가 y보다 작다.&amp;quot;);
}
if (x &amp;gt; y) // 실행될 실행문이 한 줄뿐이라면 중괄호({})를 생략할 수 있음.
document.write(&amp;quot;x가 y보다 크다.&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;else-문&#34;&gt;else 문&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;
if (표현식) {
    표현식의 결과가 참일 때 실행하고자 하는 실행문;
} else {
    표현식의 결과가 거짓일 때 실행하고자 하는 실행문;
}
else 문을 사용하면 앞의 예제를 좀 더 직관적으로 표현할 수 있다.

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ex&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var x = 10, y = 20;
if (x == y) {
document.write(&amp;quot;x와 y는 같다.&amp;quot;);
} else {
if (x &amp;lt; y)
    document.write(&amp;quot;x가 y보다 작다.&amp;quot;);
else // 실행될 실행문이 한 줄뿐이라면 중괄호({})를 생략할 수 있음.
    document.write(&amp;quot;x가 y보다 크다.&amp;quot;);
}


&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;else-if-문&#34;&gt;else if 문&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;
if (표현식1) {
    표현식1의 결과가 참일 때 실행하고자 하는 실행문;
} else if (표현식2) {
    표현식2의 결과가 참일 때 실행하고자 하는 실행문;
} else {
    표현식1의 결과도 거짓이고, 표현식2의 결과도 거짓일 때 실행하고자 하는 실행문;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ex&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var x = 10, y = 20;
if (x == y) {
document.write(&amp;quot;x와 y는 같다.&amp;quot;);
} else if (x &amp;lt; y) {
document.write(&amp;quot;x가 y보다 작다.&amp;quot;);
} else { // x &amp;gt; y인 경우
document.write(&amp;quot;x가 y보다 크다.&amp;quot;);
}

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;switch-case&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;if 와 else if를 반복적으로 써야 하는 상황을 피하게 해 줍니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;var value;
switch(value) {
    case 값1:
    //value == 값1일 경우 실행할 코드
    break;
    case 값2:
    //value == 값2일 경우 실행할 코드
    break;
    //...
    default:
    //위쪽에 해당되지 않는 경우 실행할 코드
}

&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;점수가 10점이면 A, 9점이면 B, 그 외에는 C를 출력하는 코드를 작성하세요.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;if로 구현
var score = prompt(&#39;점수를 입력하세요&#39;);
if (score === 10) {
    console.log(&#39;A&#39;);
} else if (score == 9) {
    console.log(&#39;B&#39;);
} else {
    console.log(&#39;C&#39;);
}

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;
switch-case 로 구현
var score = prompt(&#39;점수를 입력하세요&#39;);
switch (score) {
    case 10:
    console.log(&#39;A);
    break;
    case 9:
    console.log(&#39;B&#39;);
    break;
    default:
    console.log(&#39;C&#39;);
}

&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;5-loops&#34;&gt;&lt;strong&gt;5.Loops&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code&gt;
while 문
do / while 문
for 문
for / in 문
for / of 문

&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;while&#34;&gt;while&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;while (표현식) {
    표현식의 결과가 참인 동안 반복적으로 실행하고자 하는 실행문;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;note&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;while 문 만들때는 변수를 미리 만들어 줘야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;var n ;
var n = 0;
var n = 1;

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ex 1-1&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var n = 1;
while(n &amp;lt;= 100) {    
console.log(&amp;quot;Hi &amp;quot; + n);
n++;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ex 1-2&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;while 문을 사용해서 1에서 100까지의 합을 구해 봅시다.
자주 사용하는 패턴
var i = 0; // 1 변수 초기화
while (i &amp;lt;= 100) { // 2 변수 검사
console.log(i); // 3 코드 다하고나서 
i++; //  4 하나씩 증가
}

그래서 for가 등장함
위의 while 코드와 완전히 똑같음
for (var i = 0; i &amp;lt;= 100; i++) {
console.log(i);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ex gugudan with while&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
&amp;lt;script&amp;gt;
       
    var strN = Number(prompt(&amp;quot;input which gugudan&amp;quot;));
    var i = 1;
    document.write(&amp;quot;gugudan&amp;quot; + strN + &amp;quot;&amp;lt;br&amp;gt;&amp;quot;);
    while (i &amp;lt; 10) {
        document.write(strN + &amp;quot; * &amp;quot; + i + &amp;quot; = &amp;quot; + strN * i + &amp;quot; &amp;lt;br&amp;gt; &amp;quot; );
        i++;
    }
   
&amp;lt;/script&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;for-문&#34;&gt;for 문&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;for (초기식; 표현식; 증감식) {
    표현식의 결과가 참인 동안 반복적으로 실행하고자 하는 실행문;
}
 
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ex 1-1&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
for (var i = 1; i &amp;lt; 10; i++) {
document.write(i + &amp;quot;&amp;lt;br&amp;gt;&amp;quot;);
}

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ex 1-2 gugudan with for&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script&amp;gt;
    
   var strN = Number(prompt(&amp;quot;input which dan?&amp;quot;));
   document.write(&amp;quot;gugudan&amp;quot; + strN + &amp;quot;&amp;lt;br&amp;gt;&amp;quot;);
   for (var i = 1; i &amp;lt; 10; i++) {
       document.write(strN + &amp;quot; * &amp;quot; + i + &amp;quot; = &amp;quot; + strN * i + &amp;quot;&amp;lt;br&amp;gt;&amp;quot;);
   }
    
&amp;lt;/script&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ex 1-3 gugudan with button&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
&amp;lt;P&amp;gt;사용자가 2 이상, 9 이하가 아닌 값을 입력하는 경우 &amp;quot;2이상, 9이하의 값만      입력할 수 있습니다.&amp;quot;라는 메시지를 출력한다.&amp;lt;/P&amp;gt;
&amp;lt;script&amp;gt;
        
    var strN;
    while (true){
        strN = Number(prompt(&amp;quot;input which dan from 2 dan to 9 dan&amp;quot;))
        if (strN &amp;lt; 2 || strN &amp;gt; 9){
            console.log(&amp;quot;this is not available&amp;quot;);
        } else {
            document.write(&amp;quot;gugudan&amp;quot; + strN + &amp;quot;&amp;lt;br&amp;gt;&amp;quot;); 
            break;
        }
    }
    for (i = 1; i &amp;lt; 10; i ++){
        document.write(strN + &amp;quot; + &amp;quot; + i + &amp;quot; = &amp;quot; + strN + i + &amp;quot;&amp;lt;br&amp;gt;&amp;quot;);
    }
        
&amp;lt;/script&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;6-array&#34;&gt;&lt;strong&gt;6.Array&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;h5 id=&#34;배열이란&#34;&gt;배열이란?&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;자바스크립트에서 배열(array)은 이름과 인덱스로 참조되는 정렬된 값의 집합으로 정의된다. 배열을 구성하는 각각의 값을 배열 요소(element)라고 하며, 배열에서의 위치를 가리키는 숫자를 인덱스(index)라고 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;특징&#34;&gt;특징&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;배열 요소의 타입이 고정되어 있지 않으므로, 같은 배열에 있는 배열 요소끼리의 타입이 서로 다를 수도 있다. 배열 요소의 인덱스가 연속적이지 않아도 되며, 따라서 특정 배열 요소가 비어 있을 수도 있다.자바스크립트에서 배열은 Array 객체로 다뤄진다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;배열-만들기-1&#34;&gt;배열 만들기 1&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;var scores = [50, 60, 70];
console.log(scores);
console.log(scores.length);

&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;인덱스를-이용해서-배열의-원소-읽기&#34;&gt;인덱스를 이용해서 배열의 원소 읽기&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;scores[0];
scores[3];
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;배열에-값-쓰기&#34;&gt;배열에 값 쓰기&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;scores[0] = 100;
scores[9] = 50;

&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;배열의-타입-알아보기&#34;&gt;배열의 타입 알아보기&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;typeof scores
typeof scores[0]

&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;배열-만들기-2&#34;&gt;배열 만들기 2&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;var a = [];
a[0] = 2;
a[1] = 4;

&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;배열의-길이-구하기&#34;&gt;배열의 길이 구하기&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;scores.length;

&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;배열의-마지막-원소를-읽어-오려면&#34;&gt;배열의 마지막 원소를 읽어 오려면?&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;scores[scores.length - 1];
문자열과 배열
	•	문자열과 배열은 비슷한 성질을 많이 가지고 있습니다.
	•	문자열: Immutable
	•	배열: Mutable
	•	배열의 속성과 메소드를 문자열에도 테스트해보세요.

&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;배열의-메소드들-1&#34;&gt;배열의 메소드들 1&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;push() 뒤어 붙이기&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var arr = [1,2,3,4,];
arr.push(1);

arr; // = &amp;gt; [1,2,3,4,1]
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;pop() 뒤에 있는거 빼기&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var arr = [1,2,3,4,];
arr.pop();

arr; // = &amp;gt; [1,2,3]
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;unshift()  앞에 붙이기&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var arr = [1,2,3,4];

arr.unshift(1);

arr; // = &amp;gt; [1,1,2,3,4,];

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;shift()  앞에 있는거 빼기&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var arr = [1,2,3,4];

arr.shift();

arr; // = &amp;gt; [2,3,4,]

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;concat() 더하기&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var arr = [1,2,3,4,5];

arr.concat(6); 

&amp;gt;&amp;gt;arr 
[1,2,3,4,5,6]  
기존에 있는 것은 변하지 않는다.
변하게 하기위해서는 변수를 새로 만들기 !


var arr = [1,2,3,4,5];

arr.concat([6,7,8,9,10]);

&amp;gt;&amp;gt;arr
[1,2,3,4,5,6,7,8,9,10] 
여러게를 더할수 있다.

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;join() 문자열로 바꾸기&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var arr = [1,2,3,4,5,6]

arr.join() ;

&amp;gt;&amp;gt;arr
[&amp;quot;1&amp;quot;,&amp;quot;2&amp;quot;,&amp;quot;3&amp;quot;,&amp;quot;4&amp;quot;,&amp;quot;5&amp;quot;,&amp;quot;6&amp;quot;]
문자열로 바꿔준다. 

arr.join(&amp;quot;&amp;quot;);

&amp;gt;&amp;gt;arr
[&amp;quot;123456&amp;quot;];
문자열 다 붙인다.

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;indaxtOf() ()&amp;lt;&amp;lt;원소를 입력하면부터 앞에서 부터 찾아서 index번호 알려준다.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;lastIndaxtOf() ()&amp;lt;&amp;lt;원소를 입력하면부터 뒤에서 부터 찾아서 index번호 알려준다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;

var arr = [1,2,3,4,5];
arr.indexOf[1];

&amp;gt;&amp;gt;arr
2

arr.indexOf[100];
&amp;gt;&amp;gt;arr
-1
없는 경우 -1를 호출한다. 

EX) 
var arr = [1,2,3,4,5,6]
if (arr.indexOf(100) === -1 ) {
만약 100이라는 원소가 arr 에 없으면 
}

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;slice()&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var arr = [1, 2, 3, 4, 5];
a.slice(0, 3);
&amp;gt;&amp;gt;a;
123
원소는 변하지 않는다

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;splice()&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var arr = [1, 2, 3, 4, 5];
a.splice(0, 3);
&amp;gt;&amp;gt;a;
123
원소 값이 변한다. 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;split()&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;문자열을 문자의 배열로 나누고 싶을 때 사용하는 메소드입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;var s = &amp;quot;hello, world this is jj&amp;quot;;
s.split(&amp;quot;&amp;quot;);


&amp;quot;h&amp;quot;, &amp;quot;e&amp;quot;, &amp;quot;l&amp;quot;, &amp;quot;l&amp;quot;, &amp;quot;o&amp;quot;, &amp;quot;,&amp;quot;, &amp;quot; &amp;quot;, &amp;quot;w&amp;quot;, &amp;quot;o&amp;quot;, &amp;quot;r&amp;quot;, &amp;quot;l&amp;quot;, &amp;quot;d&amp;quot;, &amp;quot; &amp;quot;, &amp;quot;t&amp;quot;, &amp;quot;h&amp;quot;, &amp;quot;i&amp;quot;, &amp;quot;s&amp;quot;, &amp;quot; &amp;quot;, &amp;quot;i&amp;quot;, &amp;quot;s&amp;quot;, &amp;quot; &amp;quot;, &amp;quot;j&amp;quot;, &amp;quot;j&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;
var s = &amp;quot;hello, world this is jj&amp;quot;;
s.split(&amp;quot;,&amp;quot;);
&amp;quot;hello&amp;quot;, &amp;quot; world this is jj&amp;quot;
콤마가 생겼다. 콤마의 기준으로 갈라진다.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;var s = &amp;quot;hello world t-h-i-s-i-s-j-j&amp;quot;
s.split(&amp;quot;-&amp;quot;);

&amp;quot;hello  world t&amp;quot;, &amp;quot;h&amp;quot;, &amp;quot;i&amp;quot;, &amp;quot;s&amp;quot;, &amp;quot;i&amp;quot;, &amp;quot;s&amp;quot;, &amp;quot;j&amp;quot;, &amp;quot;j&amp;quot;
- 기준으로 갈라진다. 
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;7-function&#34;&gt;&lt;strong&gt;7.Function&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;h5 id=&#34;함수-만들기&#34;&gt;함수 만들기&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;function convertHeight(feet, inches) {
  return (feet * 12 + inches) * 2.54
}
convertHeight(5, 10);
 //= &amp;gt;&amp;gt;177.8

(feet , inches) ==&amp;gt;&amp;gt; parameter ( 매개 변수) 
(5,10)  ==&amp;gt;&amp;gt; argument ( 전달인자	)

&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;변수에-담아서-함수-사용하기&#34;&gt;변수에 담아서 함수 사용하기&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;var ret = function convertHeight(feet, inches) {
  return (feet * 12 + inches) * 2.54
}
ret(5, 10);
177.8

&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;리턴값-없는-변수를-변수에-담으면-undefind-출력된다&#34;&gt;리턴값 없는 변수를 변수에 담으면 “undefind” 출력된다 .&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ex 1-1 (console.log)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var foo = function () {
	console.log(“I’m a foo”);
}
&amp;gt;&amp;gt;undefined
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ex 1-2 (return)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var foo = function () {
	return(“I’m a foo”);
}

&amp;gt;&amp;gt; I’m a foo
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;return-을-break-로-사용하기-return-으로-함수를-종료하는데-사용할-수-있다&#34;&gt;return 을 break 로 사용하기 (return 으로 함수를 종료하는데 사용할 수 있다.)&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;(Option) 2중 루프를 한 번에 빠져 나가기
- &lt;code&gt;break&lt;/code&gt; 명령은 한 번에 한 루프만 빠져나갑니다.
- 함수의 &lt;code&gt;return&lt;/code&gt; 을 이용하면 2중 루프를 한 번에 종료할 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;종료하기&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var test1 = function (text) {
        if (text === &amp;quot;exit&amp;quot;) {
            return;
        }
        console.log(&amp;quot;실행&amp;quot;);
    }

test1(&amp;quot;exit&amp;quot;) // =&amp;gt; undefined
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;실행 하기&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var test1 = function (text) {
        if (text === &amp;quot;exit&amp;quot;) {
            return;
        }
        console.log(&amp;quot;실행&amp;quot;);
    }
test1(&amp;quot;oh&amp;quot;&amp;quot;); // = &amp;gt; 실행 

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;이중-loop-빠져-나가기&#34;&gt;이중 loop 빠져 나가기&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ex (하나만 빠져 나가기 )&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for (var i = 0; i &amp;lt; 10; i ++)  {
	for (var j = 0; j &amp;lt; 10; j++) {
		console.log(i , j );
		if (j === 3 ) {
		    break;

		}
	}
}


&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ex (이중 loop 빠져나간다 with function)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    var foo = function() {
        for (var i = 0; i &amp;lt; 10; i ++)  {
            for (var j = 0; j &amp;lt; 10; j++) {
                console.log(i , j );
                if (j === 3 ) {
                    return;

                }
            }
        }
     };
         
     foo();
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;배열을-이용한-while-문-for-문&#34;&gt;배열을 이용한 while 문 , for 문&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;// while loop
    
    
    function sum (nums) {
    var total = 0;
    var i = 0;
    while (i &amp;lt; nums.length) {
        total = total + nums[i];
        i++;
    }
    return total;
}
sum([2,3,5,1]);

&amp;gt;&amp;gt; 11

    
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;// for loop
  
  
  function sum (nums) {
  	var total = 0 ;
  	for (var i = 0 ; i &amp;lt; nums.length ; i = i + i ) {
  	total = total + nums[i]
  }
	return total;
}

sum([2,3,5,1,]);

&amp;gt;&amp;gt;11

&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;8-objects&#34;&gt;&lt;strong&gt;8.Objects&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;h5 id=&#34;making-objects&#34;&gt;making objects&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;1.
  var dog = {};

  dog.name = &amp;quot;jj&amp;quot;
  dog.color = &amp;quot;red&amp;quot;
  dog.kind = &amp;quot;똥깨&amp;quot;
  // &amp;gt;&amp;gt;&amp;gt; dog = {name = &amp;quot;jj&amp;quot;, color =&amp;quot;red&amp;quot; , kind = &amp;quot;똥깨 &amp;quot;}


2. 
 var dog = {
    name : &amp;quot;jj&amp;quot;,
    color : &amp;quot;red&amp;quot;,
    kind : &amp;quot;똥깨&amp;quot;
}

  // &amp;gt;&amp;gt;&amp;gt; dog = {name = &amp;quot;jj&amp;quot;, color =&amp;quot;red&amp;quot; , kind = &amp;quot;똥깨 &amp;quot;}

&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;using-objcets-in-javascript&#34;&gt;using objcets in Javascript&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;var dog = {
    name = &amp;quot;jj&amp;quot;
    color = &amp;quot;red&amp;quot;
    
};

we have two systems .

1. 
dog.name;
dog[&amp;quot;name&amp;quot;];

결과갑 똑같다.
&amp;gt;&amp;gt;&amp;gt;jj

&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;changing-objects&#34;&gt;changing objects&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;1. it is changed

dog.name = &amp;quot;john&amp;quot;

2. it is added

dog.food = &amp;quot;Banana&amp;quot;


&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;메소드&#34;&gt;메소드&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;객체에 속한 함수&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
dog.eat = function(food) {
console.log(this.name + &amp;quot; ate delicious &amp;quot; + food +&amp;quot;...&amp;quot;);
};

p1.eat(&amp;quot;Beef&amp;quot;);

&amp;gt;&amp;gt; jj ate delicious Beef ...

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;this&#34;&gt;this&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;
메소드 안에서 사용시 함수를 소유한 객체를 가르킨다.

var p2 = {};
p2.name = &amp;quot;jj&amp;quot;;
p2.weight = 80;
p2.say = function(word) {
    console.log(this.name + &amp;quot; says, &amp;quot; + word);
};

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Python</title>
      <link>/tutorial/python/</link>
      <pubDate>Mon, 29 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/tutorial/python/</guid>
      <description>

&lt;hr /&gt;

&lt;h2 id=&#34;python-operators&#34;&gt;Python: &lt;strong&gt;Operators&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;Arithmetic operators&lt;/li&gt;
&lt;li&gt;Assignment operators&lt;/li&gt;
&lt;li&gt;Comparison operators&lt;/li&gt;
&lt;li&gt;Logical operators&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;arithmetic-operator&#34;&gt;Arithmetic Operator&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Addition&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;x + y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Subtraction&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;x - y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Multiplication&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;x * y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Division&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;x / y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;%&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Modulus&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;x % y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;**&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Exponentiation&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;x ** y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;//&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Floor division&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;x // y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;assignment-operators&#34;&gt;Assignment Operators&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;=&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;x = 5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;x = 5&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;+=&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;x += 3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;x = x + 3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-=&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;x -= 3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;x = x - 3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;*=&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;x *= 3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;x = x * 3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;/=&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;x /= 3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;x = x / 3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;%=&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;x %= 3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;x = x % 3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;//=&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;x //= 3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;x = x // 3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;**=&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;x &lt;code&gt;**= 3&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;x = x ** 3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;amp;=&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;x &amp;amp;= 3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;x = x &amp;amp; 3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;=&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;^=&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;x ^= 3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;x = x ^ 3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;gt;&amp;gt;=&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;x &amp;gt;&amp;gt;= 3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;x = x &amp;gt;&amp;gt; 3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;lt;&amp;lt;=&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;x &amp;lt;&amp;lt;= 3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;x = x &amp;lt;&amp;lt; 3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;comparison-operators&#34;&gt;Comparison Operators&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Equal&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;x == y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Not equal&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;x != y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Greater than&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;x &amp;gt; y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Less than&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;x &amp;lt; y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;gt;=&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Greater than or equal to&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;x &amp;gt;= y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;=&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Less than or equal to&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;x  &amp;lt;= y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;python-logical-operators&#34;&gt;Python Logical Operators&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;and&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Returns True if both statements are true&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;x &amp;lt; 5 and  x &amp;lt; 10&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;or&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Returns True if one of the statements is true&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;x &amp;lt; 5 or x &amp;lt; 4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;not&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Reverse the result, returns False if the result is true&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;not(x &amp;lt; 5 and x &amp;lt; 10)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;exmple&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Print(1+1) 더하기
2
Print(1-1) 빼기
0
Print(1*1) 곱하기
1
Print(3**3) 제곱
18
Print(8/2) 나누기
4
Print(3/2*4) 순서대로 곱하기 나누기 우선 그다음에 빼기 더하기
6.0
Print(7//3) 몫구하기 (3이 몇번들어갈수 있는지)
2
Print(3%2) 나머지값구하기(나머지가 1 남는다)
1


# 연산자 우선 순위
# **
# *,/,//,%
# +, -

# 문자열 연산
# + : 문자열 끼리 붙여주는 역할 &amp;quot;Hi&amp;quot; + &amp;quot;Hello&amp;quot; =&amp;gt; &amp;quot;HiHello&amp;quot;
# * : &amp;quot;Hi&amp;quot;*3 =&amp;gt; “HiHiHi&amp;quot;

# 문자열을 표현하는 방법, 만드는 방법
&amp;quot;She said \&amp;quot;Hi\&amp;quot;&amp;quot; # &#39;She said &amp;quot;Hi&amp;quot;&#39;
&#39;I\&#39;m Jake&#39; # 특수문자나 특별한 알파벳 앞에 \(슬래시)를 붙여서 특수 기능을
# 수행하는 것을 이스케이핑 문자 혹은 이스케이핑 처리

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;python-variables&#34;&gt;Python: &lt;strong&gt;Variables&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;Description&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;ariables are containers for storing data values.
Unlike other programming languages, Python has no command for declaring a variable.
A variable is created the moment you first assign a value to it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Example 1&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
x = 5
y = &amp;quot;John&amp;quot;
print(x)
print(y)

&amp;gt;&amp;gt;5
&amp;gt;&amp;gt;John
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Example 2&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
x = 4 # x is of type int
x = &amp;quot;Sally&amp;quot; # x is now of type str
print(x)

&amp;gt;&amp;gt;Sally
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Example&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;x = &amp;quot;awesome&amp;quot;
print(&amp;quot;Python is &amp;quot; + x)

&amp;gt;&amp;gt;Python is awesome
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Note&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Variable Names&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;A variable can have a short name (like x and y) or a more descriptive name (age, carname, total_volume). Rules for Python variables:
A variable name must start with a letter or the underscore character
A variable name cannot start with a number
A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ )
Variable names are case-sensitive (age, Age and AGE are three different variables)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;# 변수 이름?
# 대소문자 구분
# 알파벳, 숫자, 한글 : 숫자는 맨앞에는 사용 금지
# 특수문자 : _
# 명사나 동사형

# 표기법
# sayHi : 두번째 단어부터 단어의 첫글자는 대문자
# SayHi : 모든 단어의 첫글자는 대문자
# say_hi : 모두 소문자, 단어사이에 _
# strSayHi : 변수명 앞에 변수의 타입을 기록
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;python-int-float-str&#34;&gt;Python: int float str&lt;/h2&gt;

&lt;hr /&gt;

&lt;h5 id=&#34;1-int-정수&#34;&gt;1.&lt;code&gt;int&lt;/code&gt;: 정수&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;x = input(&amp;quot;숫자를 입력해주세요.:&amp;quot;)
Y = input(&amp;quot;숫자를 입력해주세요.:”)

x = 20
y = 30

Print(x+y)
&amp;gt;&amp;gt;&amp;gt;2030



x = `int`(input(&amp;quot;숫자를 입력해주세요.:&amp;quot;))
Y = `int`(input(&amp;quot;숫자를 입력해주세요.:&amp;quot;))

x = 20
y = 30

Print(x+y)
&amp;gt;&amp;gt;&amp;gt;50
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;2-float-실수-소수점-나타내주는것&#34;&gt;2. &lt;code&gt;float&lt;/code&gt; :실수  () 소수점 나타내주는것&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;x = `float`(input(“숫자를 입력해주세요.:”)) &amp;gt;&amp;gt;20
Y = `float`(input(“숫자를 입력해주세요.:”)) &amp;gt;&amp;gt;30

Print(x+y)
50.0

&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;3-str-문자-이것을-사용하면-숫자를-문자로-변환시킬수-있다&#34;&gt;3. &lt;code&gt;Str&lt;/code&gt;  :문자 이것을 사용하면 숫자를 문자로 변환시킬수 있다.&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;x = int(input(&amp;quot;숫자를 입력하세요.:&amp;quot;)
Y = int(input(&amp;quot;숫자를 입력하세요.:&amp;quot;)

sum = x + y

print(&amp;quot;두 수의 합은, sum, &amp;quot;입니다.&amp;quot;)
&amp;gt;&amp;gt;&amp;gt;두 수의 합은 50 입니다.


50  과 입니다 &amp;lt;&amp;lt;&amp;lt;를 붙이고싶다 또는 
문자를 숫자로 바꾸기 위해서 str 필요하다.

print(&amp;quot;두 수의 합은&amp;quot;&amp;quot;,`str`(sum),&amp;quot;입니다.&amp;quot;)

&amp;gt;&amp;gt;&amp;gt;&amp;gt;두 수의 합은 50입니다.



Print(1,2,3,4,end=&amp;quot;,&amp;quot;). &amp;lt;&amp;lt;&amp;lt; 콤마로 띄어쓴다.
print(1,2,3,4,sep=&amp;quot;,&amp;quot;)  &amp;lt;&amp;lt;&amp;lt;&amp;lt;  중간에 문자 집어넣기

&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;python-format-string&#34;&gt;Python:Format_string&lt;/h2&gt;

&lt;hr /&gt;

&lt;h6 id=&#34;format-명령&#34;&gt;format 명령&lt;/h6&gt;

&lt;h5 id=&#34;데이터타입-s-문자열-c-한글자-d-정수-f-실수&#34;&gt;[데이터타입] : s(문자열), c(한글자), d(정수), f(실수)&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;example exercise 1-1&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;foramt_string = &amp;quot;섭씨 35도는 화씨 99도 입니다.&amp;quot;

foramt_string = &amp;quot;섭씨 %f도는 화씨 %f도 입니다.&amp;quot;


msg = foramt_string % (35.7, 99.23)
print(msg)

f 는 소수점 처리를 할수 있다.


foramt_string = &amp;quot;섭씨 &#39;%0.2f&#39;도는 화씨 &#39;%-.4f&#39;도 입니다.&amp;quot;
msg = foramt_string % (35.7, 99.23)
print(msg)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;python-variables-1&#34;&gt;Python: Variables&lt;/h2&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;ariables are containers for storing data values.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Example&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;x = 5
y = &amp;quot;John&amp;quot;
print(x)
print(y)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;python-conditional&#34;&gt;Python: conditional&lt;/h2&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code&gt;
if (a &amp;gt; b):
    [처리문 실행문]
elif [조건문 조건식]:
    [실행문 처리문]
else:
    [실행문]
&amp;quot;&amp;quot;&amp;quot;
# 조건식 : 명제 -&amp;gt; 참과 거짓으로 판별할 수 있는 구문
# 참과 거짓 : True False
# a &amp;gt; b, a &amp;lt; b, a &amp;gt;= b, a &amp;lt;= b, a == b, a != b
# and, or
# not
# 0, &amp;quot;&amp;quot;, False, []
# 상태 : empty


if not empty:
    청소를 한다.

a = 7
b = 8
c = 9
a &amp;gt; b and a &amp;gt; c
a &amp;gt; b or a &amp;gt; c
not (a &amp;gt; c)

a &amp;lt; b
a &amp;gt;= b
a &amp;lt;= b
a == b
a != b    
    
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Example&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = int(input(&amp;quot;당신의 출생연도를 입력해주세요.:&amp;quot;))


age = 2019 - a + 1


if age &amp;gt;= 20:
print(&amp;quot;당신은 성인입니다.”)

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Example&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = int(input(&amp;quot;당신의 출생연도를 입력해주세요.:&amp;quot;))

age = 2019 - a + 1

if age &amp;gt;= 20:
print(&amp;quot;당신은 성인입니다.&amp;quot;)

else:
print(&amp;quot;당신은 성인이 아닙니다.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Example exercise 1-1&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 사용자의 키와 체중을 입력받아서
# bmi 계산하여 출력하세요
# bmi = 체중(kg) / (키(m)의 제곱)


height = input(&amp;quot;키를 입력하세요 : &amp;quot;)
height = float(height)




weight = input(&amp;quot;체중을 입력하세요 : &amp;quot;)
weight = float(weight)


bmi = weight / ((height/100)**2)




# 키와 체중을 입력받고
# bmi 계산하고
# 18.5 미만 = 저체중
# 18.5 이상 23 미만 = 정상체중
# 23 이상 = 과체중


bmi_level = &amp;quot;&amp;quot;
if bmi &amp;lt; 18.5:
bmi_level = &amp;quot;저체중&amp;quot;
elif 18.5 &amp;lt;= bmi &amp;lt; 23:
bmi_level = &amp;quot;정상체중&amp;quot;
else:
bmi_level =  &amp;quot;과체중&amp;quot;
print(bmi,bmi_level)

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Example exercise 1-2&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
# 섭씨 -&amp;gt; 화씨로 바꾸는 프로그램
# 화시 -&amp;gt; 섭씨로 바꾸는 기능
# 메뉴 입력 시작
print(&amp;quot;-----MENU-----&amp;quot;)
print(&amp;quot;1. 섭씨 -&amp;gt; 화씨 변환&amp;quot;)
print(&amp;quot;2. 화씨 -&amp;gt; 섭씨 변환&amp;quot;)
print(&amp;quot;3. 프로그램 종료&amp;quot;)
menu = input(&amp;quot;메뉴를 선택하세요 : &amp;quot;)
# 메뉴 입력 끝


# 온도 계산 시작
if menu == &amp;quot;1&amp;quot;:
C = input(&amp;quot;섭씨 온도를 입력하세요 : &amp;quot;)
C = float(C)
F = C * 1.8 + 32
msg = &amp;quot;섭씨 &amp;quot;+str(C)+&amp;quot;도는 화씨 &amp;quot;+str(F)+&amp;quot;도 입니다.&amp;quot;
print(msg)
elif menu == &amp;quot;2&amp;quot;:
F = input(&amp;quot;화씨 온도를 입력하세요 : &amp;quot;)
F = float(F)
C = (F - 32) / 1.8
msg = &amp;quot;화씨 &amp;quot;+str(F)+&amp;quot;도는 섭씨 &amp;quot;+str(C)+&amp;quot;도 입니다.&amp;quot;
print(msg)
elif menu == &amp;quot;3&amp;quot;:
print(&amp;quot;프로그램을 종료합니다.&amp;quot;)
else:
print(&amp;quot;잘못 선택하셨습니다.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;python-try-except&#34;&gt;Python: try, except&lt;/h2&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code&gt;
try:
    #[오류가 날지도 모르는 코드]
    a = int(&amp;quot;a&amp;quot;)
    print(&amp;quot;in&amp;quot;)
except ValueError:
    #[발생한 오류에 대응할 코드]
    print(&amp;quot;fired exception&amp;quot;)
except ZeroDivisionError:
    #[발생한 오류에 대응할 코드]
    print(&amp;quot;fired exception&amp;quot;)
except:
    #[발생한 오류에 대응할 코드]
    print(&amp;quot;fired exception&amp;quot;)
else:
    #[오류가 없이 지나왔을 경우 코드]
    print(&amp;quot;no error&amp;quot;)
finally:
    #[어쨋든 실행될 코드]
    print(&amp;quot;anyway&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;exercise 1-1&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
number = input(&amp;quot;정수를 입력하세요 : &amp;quot;)
try:
number = int(number)
except ValueError:
print(&amp;quot;정수가 아닙니다. 다시 입력하세요.&amp;quot;)
number = input(&amp;quot;정수를 입력하세요 : &amp;quot;)
number = int(number)


result = number*number
print(result)


# 입력받은 정수의 제곱 값을 출력하는 프로그램
# 만약 숫자가 아니라면 다시 입력하라는 메시지를 출력한다.
# 다시 입력 하라는 메시지는 1회만
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;python-while&#34;&gt;Python: While&lt;/h2&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code&gt;
while [조건식]:
    [실행문]
    [실행문]
    [실행문]
    [실행문]

&amp;quot;&amp;quot;&amp;quot;
1 예) 이런식으로 많이 쓰인다.

While True:
    Try:
    Break
    except
2 예)


while True:
    # 정수를 입력받는다. 정수가 입력될 때까지
    number = input(&amp;quot;정수를 입력하세요 : &amp;quot;)
    try:
        number = int(number)
        break
    except:
        print(&amp;quot;정수가 아닙니다. 다시 입력하세요.&amp;quot;)


print(number)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;exercise&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
# 섭씨 -&amp;gt; 화씨로 바꾸는 프로그램
# 화시 -&amp;gt; 섭씨로 바꾸는 기능
# 메뉴 입력 시작
print(&amp;quot;-----MENU-----&amp;quot;)
print(&amp;quot;1. 섭씨 -&amp;gt; 화씨 변환&amp;quot;)
print(&amp;quot;2. 화씨 -&amp;gt; 섭씨 변환&amp;quot;)
print(&amp;quot;3. 프로그램 종료&amp;quot;)
menu = input(&amp;quot;메뉴를 선택하세요 : &amp;quot;)
# 메뉴 입력 끝


# 온도 계산 시작
if menu == &amp;quot;1&amp;quot;:
while True:
    try:
        C = input(&amp;quot;섭씨 온도를 입력하세요 : &amp;quot;)
        C = float(C)
        break
    except:
        print(&amp;quot;다시 입력하세요.&amp;quot;)


F = C * 1.8 + 32
msg = &amp;quot;섭씨 &amp;quot;+str(C)+&amp;quot;도는 화씨 &amp;quot;+str(F)+&amp;quot;도 입니다.&amp;quot;
print(msg)
elif menu == &amp;quot;2&amp;quot;:
while True:
    try:
        F = input(&amp;quot;화씨 온도를 입력하세요 : &amp;quot;)
        F = float(F)
        break
    except:
        print(&amp;quot;다시 입력하세요.&amp;quot;)
C = (F - 32) / 1.8
msg = &amp;quot;화씨 &amp;quot;+str(F)+&amp;quot;도는 섭씨 &amp;quot;+str(C)+&amp;quot;도 입니다.&amp;quot;
print(msg)
elif menu == &amp;quot;3&amp;quot;:
print(&amp;quot;프로그램을 종료합니다.&amp;quot;)
else:
print(&amp;quot;잘못 선택하셨습니다.&amp;quot;)

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;python-for&#34;&gt;Python: for&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Description&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# for [name] in [bucket]:
#     [실행문]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;
for n in range(10):
print(n)
print(n*n)

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;for-range-활용해서-1-100까지의-홀수의-합을-구하는-프로그램&#34;&gt;for, range 활용해서 1~100까지의 홀수의 합을 구하는 프로그램&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;total = 0
for x in range(1,101,2):
    total += x
    total = total + x
print(total)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;# &amp;quot;Range는 횟수 용으로 많이 쓰인다.&amp;quot;
# range(Y) : 0 ~ Y-1까지
# range(X,Y) : X ~ Y-1까지
# range(X,Y,Z) : X ~ Y-1까지인데, Z씩 증감
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;for n in range(0,12.2):
    print(n)
2
4
6
8
10
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;python-module&#34;&gt;Python: Module&lt;/h2&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code&gt;
import datetime
변수 = datetime.datetime.now()
Print(변수)
Print(변수.strftime(“%y-%m-%d&amp;quot;))
Print(변수.year)
Print(변수.hour)
Print(변수.corosecond)

&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;윤년-프로그램&#34;&gt;윤년 프로그램&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;# 윤년 프로그램을 짜본다.
# 윤년 2월 29일까지 있는 해
# 연도가 400으로 나누어 떨어지면 윤년
# 연도가 100으로 나누어 떨어지면 윤년 x
# 연도가 4로 나누어 떨어지면 윤년
# 1. 올해의 윤년여부 출력
# 2. 사용자의 입력을 받아서 윤년 여부 출력
# 3. 프로그램 종료
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;
import datetime
while True:
    print(&amp;quot;----Menu----&amp;quot;)
    print(&amp;quot;1. 올해 윤년 여부&amp;quot;)
    print(&amp;quot;2. 입력 받은 연도 윤년 여부&amp;quot;)
    print(&amp;quot;3. 프로그램 종료&amp;quot;)
    menu = input(&amp;quot;메뉴를 선택하세요 : &amp;quot;)


    if menu == &amp;quot;1&amp;quot;:
        current_time = datetime.datetime.now()
        year = current_time.year
        if (year % 4 == 0 and year % 100 !=0) or year % 400 == 0:
            print(&amp;quot;윤년입니다.&amp;quot;)
        else:
            print(&amp;quot;윤년이 아닙니다.&amp;quot;)
    elif menu == &amp;quot;2&amp;quot;:
        while True:
            try:
                year = input(&amp;quot;판별하고자 하는 연도를 입력하세요 : &amp;quot;)
                year = int(year)
                break
            except:
                print(&amp;quot;다시 입력하세요.&amp;quot;)
        if (year % 4 == 0 and year % 100 !=0) or year % 400 == 0:
            print(&amp;quot;윤년입니다.&amp;quot;)
        else:
            print(&amp;quot;윤년이 아닙니다.&amp;quot;)
    elif menu == &amp;quot;3&amp;quot;:
        break
        # exit()
    else:
        print(&amp;quot;없는 메뉴 입니다.&amp;quot;)

&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;python-function&#34;&gt;Python: function&lt;/h2&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code&gt;# def [함수이름]([매개변수,입력값]):
#     [실행구문]
#     [return (반환값, 출력값)]
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;example 1-1&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;A = 1
B = 2
x = 1+2
Print(x)

&amp;gt;&amp;gt;&amp;gt;3

함수 이용하기

def x (A,B) : 
return A+B
print (x(1,2))

&amp;gt;&amp;gt;&amp;gt;3

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;example 1-2&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def sayHi():
print(&amp;quot;Hello Python&amp;quot;)


sayHi()

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;exercise 1-2&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
# 1~9까지의 각각의 제곱을 출력하는 함수를 만드세요.
def PrintSquare():
for x in range(1,10):
    print(x*x)


PrintSquare()
PrintSquare()
PrintSquare()
PrintSquare()
PrintSquare()


def PrintSquare2(endNumber):
for x in range(1,endNumber+1):
    print(x*x)


PrintSquare2(10)


&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;exercise 1-3&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 두개의 숫자를 전달 받아서
# 그 두 숫자의 합을 출력하는 함수
def printSum(number1, number2):
print(number1+number2)


printSum(10, 22)

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;exercise 1-4&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 별줄수 만들기

&amp;quot;&amp;quot;&amp;quot;
사용자에게 줄 수를 입력받아서
해당 줄 수만큼 별을 출력하시오.
*
***
*****
&amp;quot;&amp;quot;&amp;quot;


line_count = input(&amp;quot;출력할 줄 수를 입력하세요 : &amp;quot;)
line_count = int(line_count)


max_width = line_count*2 - 1
format_string = &amp;quot;{:^&amp;quot;+str(max_width)+&amp;quot;s}&amp;quot;
for count in range(line_count):
#blank_count = line_count-(count+1)
#print(&amp;quot; &amp;quot; * blank_count, end=&amp;quot;&amp;quot;)
start_count = 2 * count + 1




msg = format_string.format(&amp;quot;*&amp;quot;*start_count)
print(msg)

*
***
*****

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;python-crawler&#34;&gt;Python: Crawler&lt;/h2&gt;

&lt;hr /&gt;

&lt;h5 id=&#34;1-변수만들어서-저장하기-data-text-모든-리소스-불러오기&#34;&gt;1. 변수만들어서 저장하기 data.text 모든 리소스 불러오기&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;
url = &amp;quot;https://www.naver.com/&amp;quot;
requests.get(url)
data = requests.get(url)
print(data.text)

&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;2-제대로-돌아가고-있는지-확인&#34;&gt;2. 제대로 돌아가고 있는지 확인&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;print (data.status_code)

“””
200
“””

200번대 - 정상
300번대 - redirect
400번대 - 리소스 오류
500번대 - 소스코드 오류
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;3-test-해보기-만약-이게-맞다면-응답해라&#34;&gt;3. Test 해보기 만약 이게 맞다면 응답해라&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;
if data.status_code == requests.codes.ok:
    print(&amp;quot;work out”)


&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;4-from-bs4-import-beautifulsoup-html를-해석해주는-역활&#34;&gt;4. From bs4 import BeautifulSoup HTML를 해석해주는 역활&lt;/h5&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;Parsing(파싱) text 파일을 우리가 원하는 것을 불러오기 위해서는       parsing 필요하다.이럴때 BeautifulSoup 이라는 order 필요.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;html = BeautifulSoup(data.text,&amp;quot;html.parser&amp;quot;)
links = html.select(&amp;quot;.PM_CL_realtimeKeyword_list_base .ah_a”)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;나열방식이 틀림&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(1)     for index,keyword in enumerate ( links,start=1 ) :
        print(index,keyword)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1 &lt;sdsdsdsd&gt;
2 &lt;sdsdsdsd&gt;
3 &lt;sdsdsdss&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(2).   For keyword in links[:3]:
       For keyword in links[::3]:
       Print(keyword)



(3)

for link in links:
    rank = link.select_one(&amp;quot;.ah_r&amp;quot;).text
    keyword = link.select_one(&amp;quot;.ah_k&amp;quot;).text
    print(rank,keyword,link.attrs[&amp;quot;href&amp;quot;])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1 왕종명 &lt;a href=&#34;http://search.naver.com/search.naver?where=nexearch&amp;amp;query=%EC%99%95%EC%A2%85%EB%AA%85&amp;amp;sm=top_lve&amp;amp;ie=utf8&#34; target=&#34;_blank&#34;&gt;http://search.naver.com/search.naver?where=nexearch&amp;amp;query=%EC%99%95%EC%A2%85%EB%AA%85&amp;amp;sm=top_lve&amp;amp;ie=utf8&lt;/a&gt;
2 grn &lt;a href=&#34;http://search.naver.com/search.naver?where=nexearch&amp;amp;query=grn&amp;amp;sm=top_lve&amp;amp;ie=utf8&#34; target=&#34;_blank&#34;&gt;http://search.naver.com/search.naver?where=nexearch&amp;amp;query=grn&amp;amp;sm=top_lve&amp;amp;ie=utf8&lt;/a&gt;
3 백예린 &lt;a href=&#34;http://search.naver.com/search.naver?where=nexearch&amp;amp;query=%EB%B0%B1%EC%98%88%EB%A6%B0&amp;amp;sm=top_lve&amp;amp;ie=utf8&#34; target=&#34;_blank&#34;&gt;http://search.naver.com/search.naver?where=nexearch&amp;amp;query=%EB%B0%B1%EC%98%88%EB%A6%B0&amp;amp;sm=top_lve&amp;amp;ie=utf8&lt;/a&gt;
4 붐붐파워 &lt;a href=&#34;http://search.naver.com/search.naver?where=nexearch&amp;amp;query=%EB%B6%90%EB%B6%90%ED%8C%8C%EC%9B%8C&amp;amp;sm=top_lve&amp;amp;ie=utf8&#34; target=&#34;_blank&#34;&gt;http://search.naver.com/search.naver?where=nexearch&amp;amp;query=%EB%B6%90%EB%B6%90%ED%8C%8C%EC%9B%8C&amp;amp;sm=top_lve&amp;amp;ie=utf8&lt;/a&gt;
5 2019 스타벅스 벚꽃 md &lt;a href=&#34;http://search.naver.com/search.naver?where=nexearch&amp;amp;query=2019+%EC%8A%A4%ED%83%80%EB%B2%85%EC%8A%A4+%EB%B2%9A%EA%BD%83+md&amp;amp;sm=top_lve&amp;amp;ie=utf8&#34; target=&#34;_blank&#34;&gt;http://search.naver.com/search.naver?where=nexearch&amp;amp;query=2019+%EC%8A%A4%ED%83%80%EB%B2%85%EC%8A%A4+%EB%B2%9A%EA%BD%83+md&amp;amp;sm=top_lve&amp;amp;ie=utf8&lt;/a&gt;
6 나르샤 &lt;a href=&#34;http://search.naver.com/search.naver?where=nexearch&amp;amp;query=%EB%82%98%EB%A5%B4%EC%83%A4&amp;amp;sm=top_lve&amp;amp;ie=utf8&#34; target=&#34;_blank&#34;&gt;http://search.naver.com/search.naver?where=nexearch&amp;amp;query=%EB%82%98%EB%A5%B4%EC%83%A4&amp;amp;sm=top_lve&amp;amp;ie=utf8&lt;/a&gt;
7 아소방 매트 &lt;a href=&#34;http://search.naver.com/search.naver?where=nexearch&amp;amp;query=%EC%95%84%EC%86%8C%EB%B0%A9+%EB%A7%A4%ED%8A%B8&amp;amp;sm=top_lve&amp;amp;ie=utf8&#34; target=&#34;_blank&#34;&gt;http://search.naver.com/search.naver?where=nexearch&amp;amp;query=%EC%95%84%EC%86%8C%EB%B0%A9+%EB%A7%A4%ED%8A%B8&amp;amp;sm=top_lve&amp;amp;ie=utf8&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;rdquo;&amp;ldquo;&amp;rdquo;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>IT terminology</title>
      <link>/tutorial/it-terminology/</link>
      <pubDate>Mon, 22 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/tutorial/it-terminology/</guid>
      <description>&lt;p&gt;text&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>An example preprint / working paper</title>
      <link>/publication/preprint/</link>
      <pubDate>Sun, 07 Apr 2019 00:00:00 +0900</pubDate>
      
      <guid>/publication/preprint/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Supplementary notes can be added here, including &lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34;&gt;code and math&lt;/a&gt;.
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Privacy Policy</title>
      <link>/privacy/</link>
      <pubDate>Thu, 28 Jun 2018 00:00:00 +0900</pubDate>
      
      <guid>/privacy/</guid>
      <description>&lt;p&gt;&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>External Project</title>
      <link>/project/external-project/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0900</pubDate>
      
      <guid>/project/external-project/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Internal Project</title>
      <link>/project/internal-project/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0900</pubDate>
      
      <guid>/project/internal-project/</guid>
      <description>&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;

&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;

&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;

&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;

&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Academic: the website builder for Hugo</title>
      <link>/post/getting-started/</link>
      <pubDate>Wed, 20 Apr 2016 00:00:00 +0900</pubDate>
      
      <guid>/post/getting-started/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;Create a free website with Academic using Markdown, Jupyter, or RStudio. Choose a beautiful color theme and build anything with the Page Builder - over 40 &lt;em&gt;widgets&lt;/em&gt;, &lt;em&gt;themes&lt;/em&gt;, and &lt;em&gt;language packs&lt;/em&gt; included!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://academic-demo.netlify.com/&#34; target=&#34;_blank&#34;&gt;Check out the latest &lt;strong&gt;demo&lt;/strong&gt;&lt;/a&gt; of what you&amp;rsquo;ll get in less than 10 minutes, or &lt;a href=&#34;https://sourcethemes.com/academic/#expo&#34; target=&#34;_blank&#34;&gt;view the &lt;strong&gt;showcase&lt;/strong&gt;&lt;/a&gt; of personal, project, and business sites.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#install&#34;&gt;&lt;strong&gt;Setup Academic&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/get-started/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Get Started&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/&#34; target=&#34;_blank&#34;&gt;View the documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://discuss.gohugo.io/&#34; target=&#34;_blank&#34;&gt;Ask a question&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gcushen/hugo-academic/issues&#34; target=&#34;_blank&#34;&gt;Request a feature or report a bug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Updating? View the &lt;a href=&#34;https://sourcethemes.com/academic/docs/update/&#34; target=&#34;_blank&#34;&gt;Update Guide&lt;/a&gt; and &lt;a href=&#34;https://sourcethemes.com/academic/updates/&#34; target=&#34;_blank&#34;&gt;Release Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Support development of Academic:

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://paypal.me/cushen&#34; target=&#34;_blank&#34;&gt;Donate a coffee&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.patreon.com/cushen&#34; target=&#34;_blank&#34;&gt;Become a backer on Patreon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.redbubble.com/people/neutreno/works/34387919-academic&#34; target=&#34;_blank&#34;&gt;Decorate your laptop or journal with an Academic sticker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://academic.threadless.com/&#34; target=&#34;_blank&#34;&gt;Wear the T-shirt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/gcushen/hugo-academic/&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gcushen/hugo-academic/master/academic.png&#34; alt=&#34;Screenshot&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Key features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Page builder&lt;/strong&gt; - Create &lt;em&gt;anything&lt;/em&gt; with &lt;a href=&#34;https://sourcethemes.com/academic/docs/page-builder/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;widgets&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;elements&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Edit any type of content&lt;/strong&gt; - Blog posts, publications, talks, slides, projects, and more!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Create content&lt;/strong&gt; in &lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Markdown&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;https://sourcethemes.com/academic/docs/jupyter/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Jupyter&lt;/strong&gt;&lt;/a&gt;, or &lt;a href=&#34;https://sourcethemes.com/academic/docs/install/#install-with-rstudio&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;RStudio&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Plugin System&lt;/strong&gt; - Fully customizable &lt;a href=&#34;https://sourcethemes.com/academic/themes/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;color&lt;/strong&gt; and &lt;strong&gt;font themes&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Display Code and Math&lt;/strong&gt; - Code highlighting and &lt;a href=&#34;https://en.wikibooks.org/wiki/LaTeX/Mathematics&#34; target=&#34;_blank&#34;&gt;LaTeX math&lt;/a&gt; supported&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Integrations&lt;/strong&gt; - &lt;a href=&#34;https://analytics.google.com&#34; target=&#34;_blank&#34;&gt;Google Analytics&lt;/a&gt;, &lt;a href=&#34;https://disqus.com&#34; target=&#34;_blank&#34;&gt;Disqus commenting&lt;/a&gt;, Maps, Contact Forms, and more!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Beautiful Site&lt;/strong&gt; - Simple and refreshing one page design&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Industry-Leading SEO&lt;/strong&gt; - Help get your website found on search engines and social media&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Media Galleries&lt;/strong&gt; - Display your images and videos with captions in a customizable gallery&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mobile Friendly&lt;/strong&gt; - Look amazing on every screen with a mobile friendly version of your site&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multi-language&lt;/strong&gt; - 15+ language packs including English, 中文, and Português&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multi-user&lt;/strong&gt; - Each author gets their own profile page&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Privacy Pack&lt;/strong&gt; - Assists with GDPR&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stand Out&lt;/strong&gt; - Bring your site to life with animation, parallax backgrounds, and scroll effects&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;One-Click Deployment&lt;/strong&gt; - No servers. No databases. Only files.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;color-themes&#34;&gt;Color Themes&lt;/h2&gt;

&lt;p&gt;Academic comes with &lt;strong&gt;day (light) and night (dark) mode&lt;/strong&gt; built-in. Click the sun/moon icon in the top right of the &lt;a href=&#34;https://academic-demo.netlify.com/&#34; target=&#34;_blank&#34;&gt;Demo&lt;/a&gt; to see it in action!&lt;/p&gt;

&lt;p&gt;Choose a stunning color and font theme for your site. Themes are fully customizable and include:&lt;/p&gt;









  
  


&lt;div class=&#34;gallery&#34;&gt;

  
  
  
  
    
    
    
    
    
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
    
  &lt;a data-fancybox=&#34;gallery-gallery&#34; href=&#34;/post/getting-started/gallery/theme-1950s.png&#34; data-caption=&#34;1950s&#34;&gt;
  &lt;img src=&#34;/post/getting-started/gallery/theme-1950s_huaf5482f8cea0c5a703a328640e3b7509_21614_0x190_resize_lanczos_2.png&#34; alt=&#34;&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
    
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
    
  &lt;a data-fancybox=&#34;gallery-gallery&#34; href=&#34;/post/getting-started/gallery/theme-apogee.png&#34; data-caption=&#34;Apogee&#34;&gt;
  &lt;img src=&#34;/post/getting-started/gallery/theme-apogee_hu4b45d99db97150df01464c393bfd17d4_24119_0x190_resize_lanczos_2.png&#34; alt=&#34;&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
    
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
    
  &lt;a data-fancybox=&#34;gallery-gallery&#34; href=&#34;/post/getting-started/gallery/theme-coffee-playfair.png&#34; data-caption=&#34;Coffee theme with Playfair font&#34;&gt;
  &lt;img src=&#34;/post/getting-started/gallery/theme-coffee-playfair_hu446a8f670cc5622adcc77b97ba95f6c5_22462_0x190_resize_lanczos_2.png&#34; alt=&#34;&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
    
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
    
  &lt;a data-fancybox=&#34;gallery-gallery&#34; href=&#34;/post/getting-started/gallery/theme-cupcake.png&#34; data-caption=&#34;Cupcake&#34;&gt;
  &lt;img src=&#34;/post/getting-started/gallery/theme-cupcake_hueba8cfa8cfbc7543924fcbf387a99e92_23986_0x190_resize_lanczos_2.png&#34; alt=&#34;&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
    
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
    
  &lt;a data-fancybox=&#34;gallery-gallery&#34; href=&#34;/post/getting-started/gallery/theme-dark.png&#34; data-caption=&#34;Dark&#34;&gt;
  &lt;img src=&#34;/post/getting-started/gallery/theme-dark_hu1e8601ecc47f58eada7743fdcd709d3d_21456_0x190_resize_lanczos_2.png&#34; alt=&#34;&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
    
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
    
  &lt;a data-fancybox=&#34;gallery-gallery&#34; href=&#34;/post/getting-started/gallery/theme-default.png&#34; data-caption=&#34;Default&#34;&gt;
  &lt;img src=&#34;/post/getting-started/gallery/theme-default_huba6228b7bdf30e2f03f12ea91b2cba0d_21751_0x190_resize_lanczos_2.png&#34; alt=&#34;&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
    
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
    
  &lt;a data-fancybox=&#34;gallery-gallery&#34; href=&#34;/post/getting-started/gallery/theme-forest.png&#34; data-caption=&#34;Forest&#34;&gt;
  &lt;img src=&#34;/post/getting-started/gallery/theme-forest_hu4f093a1c683134431456584193ea41ee_21797_0x190_resize_lanczos_2.png&#34; alt=&#34;&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
    
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
    
  &lt;a data-fancybox=&#34;gallery-gallery&#34; href=&#34;/post/getting-started/gallery/theme-ocean.png&#34; data-caption=&#34;Ocean&#34;&gt;
  &lt;img src=&#34;/post/getting-started/gallery/theme-ocean_hu14831ccafc2219f30a7a096fa7617e01_21760_0x190_resize_lanczos_2.png&#34; alt=&#34;&#34;&gt;
  &lt;/a&gt;
  

  
&lt;/div&gt;

&lt;h2 id=&#34;ecosystem&#34;&gt;Ecosystem&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/sourcethemes/academic-admin&#34; target=&#34;_blank&#34;&gt;Academic Admin&lt;/a&gt;:&lt;/strong&gt; An admin tool to import publications from BibTeX or import assets for an offline site&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/sourcethemes/academic-scripts&#34; target=&#34;_blank&#34;&gt;Academic Scripts&lt;/a&gt;:&lt;/strong&gt; Scripts to help migrate content to new versions of Academic&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;install&#34;&gt;Install&lt;/h2&gt;

&lt;p&gt;You can choose from one of the following four methods to install:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/install/#install-with-web-browser&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;one-click install using your web browser (recommended)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/install/#install-with-git&#34; target=&#34;_blank&#34;&gt;install on your computer using &lt;strong&gt;Git&lt;/strong&gt; with the Command Prompt/Terminal app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/install/#install-with-zip&#34; target=&#34;_blank&#34;&gt;install on your computer by downloading the &lt;strong&gt;ZIP files&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/install/#install-with-rstudio&#34; target=&#34;_blank&#34;&gt;install on your computer with &lt;strong&gt;RStudio&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then &lt;a href=&#34;https://sourcethemes.com/academic/docs/get-started/&#34; target=&#34;_blank&#34;&gt;personalize and deploy your new site&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;updating&#34;&gt;Updating&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/update/&#34; target=&#34;_blank&#34;&gt;View the Update Guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Feel free to &lt;em&gt;star&lt;/em&gt; the project on &lt;a href=&#34;https://github.com/gcushen/hugo-academic/&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt; to help keep track of &lt;a href=&#34;https://sourcethemes.com/academic/updates&#34; target=&#34;_blank&#34;&gt;updates&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;license&#34;&gt;License&lt;/h2&gt;

&lt;p&gt;Copyright 2016-present &lt;a href=&#34;https://georgecushen.com&#34; target=&#34;_blank&#34;&gt;George Cushen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Released under the &lt;a href=&#34;https://github.com/gcushen/hugo-academic/blob/master/LICENSE.md&#34; target=&#34;_blank&#34;&gt;MIT&lt;/a&gt; license.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>An example journal article</title>
      <link>/publication/journal-article/</link>
      <pubDate>Tue, 01 Sep 2015 00:00:00 +0900</pubDate>
      
      <guid>/publication/journal-article/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Supplementary notes can be added here, including &lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34;&gt;code and math&lt;/a&gt;.
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Hello R Markdown</title>
      <link>/post/2015-07-23-r-rmarkdown/</link>
      <pubDate>Thu, 23 Jul 2015 21:13:14 -0500</pubDate>
      
      <guid>/post/2015-07-23-r-rmarkdown/</guid>
      <description>


&lt;div id=&#34;r-markdown&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;R Markdown&lt;/h1&gt;
&lt;p&gt;This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see &lt;a href=&#34;http://rmarkdown.rstudio.com&#34; class=&#34;uri&#34;&gt;http://rmarkdown.rstudio.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can embed an R code chunk like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(cars)
##      speed           dist       
##  Min.   : 4.0   Min.   :  2.00  
##  1st Qu.:12.0   1st Qu.: 26.00  
##  Median :15.0   Median : 36.00  
##  Mean   :15.4   Mean   : 42.98  
##  3rd Qu.:19.0   3rd Qu.: 56.00  
##  Max.   :25.0   Max.   :120.00
fit &amp;lt;- lm(dist ~ speed, data = cars)
fit
## 
## Call:
## lm(formula = dist ~ speed, data = cars)
## 
## Coefficients:
## (Intercept)        speed  
##     -17.579        3.932&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;including-plots&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Including Plots&lt;/h1&gt;
&lt;p&gt;You can also embed plots. See Figure &lt;a href=&#34;#fig:pie&#34;&gt;1&lt;/a&gt; for example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;par(mar = c(0, 1, 0, 1))
pie(
  c(280, 60, 20),
  c(&amp;#39;Sky&amp;#39;, &amp;#39;Sunny side of pyramid&amp;#39;, &amp;#39;Shady side of pyramid&amp;#39;),
  col = c(&amp;#39;#0292D8&amp;#39;, &amp;#39;#F7EA39&amp;#39;, &amp;#39;#C4B632&amp;#39;),
  init.angle = -50, border = NA
)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:pie&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/post/2015-07-23-r-rmarkdown_files/figure-html/pie-1.png&#34; alt=&#34;A fancy pie chart.&#34; width=&#34;672&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1: A fancy pie chart.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>An example conference paper</title>
      <link>/publication/conference-paper/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 +0900</pubDate>
      
      <guid>/publication/conference-paper/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Supplementary notes can be added here, including &lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34;&gt;code and math&lt;/a&gt;.
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>1. Dictionary</title>
      <link>/tutorial/javascript_dictionary/</link>
      <pubDate>Thu, 01 Jan 1970 09:33:39 +0900</pubDate>
      
      <guid>/tutorial/javascript_dictionary/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/tutorial/Javascript_Dictionary_files/javascriptt-light_870x220.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;string&#34;&gt;&lt;strong&gt;String&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;str[index]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;immutable&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;1.글자 하나하나 가져오기&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;index로 접근은 가능하지만 쓸 수는 없음 (read-only)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;ul&gt;
&lt;li&gt;연산자를 쓸수 있음.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;length 쓸수 있음.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;let str = &#39;CodeStates&#39;;

str[0]; &amp;gt;&amp;gt; &#39;C&#39;

but

str[0] = &#39;G&#39; &amp;gt;&amp;gt; 바뀌지 않음.

str = &#39;Codestates&#39;
 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;str..toUpperCase()&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;immutable&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;소문자를 대문자로 바꿈&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;let str = &#39;CodeStates&#39;;

str.toUpperCase(); &amp;gt;&amp;gt;&amp;quot;CODESTATES

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;str.toLowerCase()&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;immutable&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;대문자 소문자 바꿈&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;
let str = &amp;quot;CodeStates&amp;quot;;

str.toLowerCase()

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;num.toString()&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;1.숫자를 문자로 바꾸는것&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
let num = 10;

num.toString();    

&amp;gt;&amp;gt; &#39;10&#39;

&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;2.&lt;code&gt;Tip&lt;/code&gt;배열에 담겨있는 문자열을 꺼낼때도 사용&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;arr = [&amp;quot;this is john&amp;quot;]; //이문자를 꺼내기 위해서는 toString();

let words = arr.toString();

&amp;gt;words
&amp;gt; &amp;quot;this is john&amp;quot;



function getAllWords(str) {
  // your code here
  // toString 를 사용해 배열에 있는 문자를 꺼내서 새로운 변수에 담는다 
  // 변수에 담긴 문자를 나누는 메소드를 사용해  새로운 변수에 또 담는다.
  // 변수를 출력한다.
  if ( str === &amp;quot;&amp;quot; ) {
    let arr = [];
    return arr;
  } else {
  let words = str.toString();
  let ret = words.split(&amp;quot; &amp;quot;);
  return ret
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;String(obj)&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;숫자를 문자로 바꾸는것&lt;/p&gt;

&lt;p&gt;String, 이 함수는 변환하려는 객체의 toString() 메소드를 사용하는 것과 동일함&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var t = [1,2,3];

console.log(String(t)); 

&amp;gt;&amp;gt;&amp;quot;1,2,3&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;str.split()&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;immtuable&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;문자열을 문자의 배열로 나누고 싶을 때 사용하는 메소드입니다.&lt;/p&gt;

&lt;p&gt;문자열을 배열로 만들때 유용&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let str = &amp;quot;hello, world this is jj&amp;quot;;

1.str.split();
[&amp;quot;hello, world this is jj&amp;quot;]


2. str.split(&amp;quot;&amp;quot;);
[&amp;quot;hello&amp;quot;, &amp;quot;world&amp;quot;, &amp;quot;this&amp;quot;, &amp;quot;is&amp;quot;, &amp;quot;jj&amp;quot;]


3. str.split(&amp;quot; &amp;quot;);
[&amp;quot;h&amp;quot;, &amp;quot;e&amp;quot;, &amp;quot;l&amp;quot;, &amp;quot;l&amp;quot;, &amp;quot;o&amp;quot;, &amp;quot; &amp;quot;, &amp;quot;w&amp;quot;, &amp;quot;o&amp;quot;, &amp;quot;r&amp;quot;, &amp;quot;l&amp;quot;, &amp;quot;d&amp;quot;, &amp;quot; &amp;quot;, &amp;quot;t&amp;quot;, &amp;quot;h&amp;quot;, &amp;quot;i&amp;quot;, &amp;quot;s&amp;quot;, &amp;quot; &amp;quot;, &amp;quot;i&amp;quot;, &amp;quot;s&amp;quot;, &amp;quot; &amp;quot;, &amp;quot;j&amp;quot;, &amp;quot;j&amp;quot;]

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
var s = &amp;quot;hello, world this is jj&amp;quot;;
s.split(&amp;quot;,&amp;quot;);
&amp;quot;hello&amp;quot;, &amp;quot; world this is jj&amp;quot;
콤마가 생겼다. 콤마의 기준으로 갈라진다.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;var s = &amp;quot;hello world t-h-i-s-i-s-j-j&amp;quot;
s.split(&amp;quot;-&amp;quot;);

&amp;quot;hello  world t&amp;quot;, &amp;quot;h&amp;quot;, &amp;quot;i&amp;quot;, &amp;quot;s&amp;quot;, &amp;quot;i&amp;quot;, &amp;quot;s&amp;quot;, &amp;quot;j&amp;quot;, &amp;quot;j&amp;quot;
- 기준으로 갈라진다. 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;str.indexOf(serchValue)&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;찾기&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;
&amp;quot;Blue Whale&amp;quot;indexOf(&amp;quot;Blue&amp;quot;); &amp;gt;&amp;gt;0
&amp;quot;Blue Whale&amp;quot;.indexOf(&amp;quot;hello&amp;quot;); &amp;gt;&amp;gt;-1
&amp;quot;Blue Whale&amp;quot;.indexOf(&amp;quot;Whale&amp;quot;); &amp;gt;&amp;gt;5


&amp;quot;canal&amp;quot;.lastIndexOf(&amp;quot;a&amp;quot;) &amp;gt;&amp;gt; 3

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;str.repeat(숫자입력) 반복하는것&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;let str = &#39;Because I&#39;m happy&#39;;

console.log(&#39;Chorus lyrics for &amp;quot;Happy&amp;quot;: &#39; + chorus.repeat(27));

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;str.charAt(index)&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;인덱스에 있는 값을 리턴한다.&lt;/p&gt;

&lt;p&gt;ex&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;var stringName = &#39;coding everybody&#39;;
alert(stringName.charAt(0)); // c
alert(stringName.charAt(stringName.length-1)); // y
alert(stringName.charAt(1000) == &#39;&#39;); // true

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;str.replace()&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;immtable&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;값을 찾아서 원하는 값으로 바꿔준다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;str = &amp;quot;john jung&amp;quot;
let newStr = str.replace(john,jj);

&amp;gt; &amp;quot;jj jung&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;number&#34;&gt;&lt;strong&gt;Number&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;parseInt(string, radix)&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;숫자로 바꾸는것&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Number()&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;숫자로 바꾸는것&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;parseFloat(value)&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;소수점 나타내기&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;math-method&#34;&gt;&lt;strong&gt;Math_method&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Math.Floor(x)&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
//함수는 주어진 숫자와 같거나 작은 정수 중에서 가장 큰 수를 반환합니다

Math.floor( 45.95); //  45
Math.floor( 45.05); //  45
Math.floor(  4   ); //   4
Math.floor(-45.05); // -46  // 마이너스 는 값을 1 올려준다. 
Math.floor(-45.95); // -46
Math.floor(45.95) //   45 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Math.abs(x)&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// 함수는 주어진 숫자의 절대값을 반환합니다


Math.abs(&#39;-1&#39;);     // 1
Math.abs(-2);       // 2
Math.abs(null);     // 0
Math.abs(&#39;&#39;);       // 0
Math.abs([]);       // 0
Math.abs([2]);      // 2
Math.abs([1,2]);    // NaN
Math.abs({});       // NaN
Math.abs(&#39;string&#39;); // NaN
Math.abs();         // NaN
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Math.max()&lt;/strong&gt;
&lt;strong&gt;Math.min()&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;큰수,작은수 가져오기&lt;/p&gt;

&lt;p&gt;EX 큰수 가져오기&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
Math.max(10, 20);   //  20
Math.max(-10, -20); // -10
Math.max(-10, 20);  //  20
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;reduce 사용해서 큰수 가져오기&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
let arr = [1,2,3];
let max = arr.reduce(function(a, b) {
    return Math.max(a, b);
});


console.log(max)
&amp;gt;3

&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;spread operator  사용해서 큰수 가져오기&lt;/p&gt;

&lt;p&gt;arr 로 큰수를 가져오기 위해서는 &amp;hellip; 을 써야 Math.max() &amp;lt;&amp;lt; 안에 들어간다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
let arr = [1, 2, 3];
let max = Math.max(...arr);

console.log(max)
&amp;gt;3

&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;array&#34;&gt;&lt;strong&gt;Array&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;arr.includes()&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
arr = [&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;c&amp;quot;,&amp;quot;d&amp;quot;];

arr.includes(&amp;quot;a&amp;quot;); 
// true

arr.includes(&amp;quot;f&amp;quot;);
//false

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Array.isArray()&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;메서드는 인자가 Array인지 판별합니다.&lt;/p&gt;

&lt;p&gt;() 안에 비워 있으면 실행되지 않는다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;Array.isArray([]);  // true
Array.isArray([1, 2, 3]);  // true
Array.isArray({foo: 123}); // false
Array.isArray(&#39;foobar&#39;);   // false
Array.isArray(undefined);  // false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;arr.indexOf(seachElement)&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;immutable&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;str.indexOf 랑 똑같다.&lt;/p&gt;

&lt;p&gt;element 존재 확인 할때 유용&lt;/p&gt;

&lt;p&gt;발견되지 않으면 -1  표시&lt;/p&gt;

&lt;p&gt;()&amp;lt;&amp;lt;원소를 입력하면부터 앞에서 부터 찾아서 index번호 알려준다.
비슷한 목적을 가진 메소드로는 includes,find가 있음&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
var array = [2, 9, 9];
array.indexOf(2);     // 0
array.indexOf(7);     // -1
array.indexOf(9, 2);  // 2
array.indexOf(2, -1); // -1
array.indexOf(2, -3); // 0

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;arr.lastIndexOf(seachElement)&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;()&amp;lt;&amp;lt;원소를 입력하면부터 뒤에서 부터 찾아서 index번호 알려준다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var anyString = &#39;Brave new world&#39;;

console.log(&#39;The index of the first w from the beginning is &#39; + anyString.indexOf(&#39;w&#39;));
// logs 8
console.log(&#39;The index of the first w from the end is &#39; + anyString.lastIndexOf(&#39;w&#39;)); 
// logs 10
console.log(&#39;The index of &amp;quot;new&amp;quot; from the beginning is &#39; + anyString.indexOf(&#39;new&#39;));
// logs 6
console.log(&#39;The index of &amp;quot;new&amp;quot; from the end is &#39; + anyString.lastIndexOf(&#39;new&#39;));
// logs 6

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;arr.sort(sortfunc)&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;mutable&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;1.배열을 정렬한다.&lt;/p&gt;

&lt;p&gt;2.알파벳 순서로 정렬한다.&lt;/p&gt;

&lt;p&gt;3.숫자의 경우 암시적으로 문자열로 형변환 하기 때문에 숫자 1이 숫자 10보다 먼저 나온다.&lt;/p&gt;

&lt;p&gt;4.sortfunc 로 비교 대상인 두개의 인자를 전달하는데, 리턴 값에 따라서 선후를 판단한다.&lt;/p&gt;

&lt;p&gt;Example 1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;
var numbers = [9,8,7,6,5,4,3,2,1];
alert(numbers.sort()); // array, [1,2,3,4,5,6,7,8,9]
alert(numbers); // array, [1,2,3,4,5,6,7,8,9], 원본을 변경한다. 
alert(numbers.sort() === numbers); // boolean, true, 원본과 반환값이 같다.
 
var numbers = [20, 10, 9,8,7,6,5,4,3,2,1];
//array, [1,10,2,20,3,4,5,6,7,8,9], 암시적으로 원소를 문자로 형변환 하기 때문에 10이 1뒤에 온다.
alert(numbers.sort()); 

&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Example 2&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;var numbers = [20, 10, 9,8,7,6,5,4,3,2,1];
var x = function(a,b){
	return a-b;
}

console.log(numbers.sort(x));

[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20]


순서반대 로 할려면
return a+b;

[20, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]

&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Example 3&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;
function sortNumber(a,b){
// 비교 대상인 a와 b가 인자로 전달된다.
//alert(&#39;a :&#39;+a+&#39;, b:&#39;+b);
// a에서 b를 뺀 결과가 음수면 a가 b보다 작고, 0이면 같다.
// sort메소드는 return 값이 음수,양수,0인지에 따라서 순서를 정한다.
return a-b;
}
var numbers = [20, 10, 9,8,7,6,5,4,3,2,1];
alert(numbers.sort(sortNumber)); // array, [1,2,3,4,5,6,7,8,9,10,20]


&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Description from others&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;
위의 sort함수를 보면 parameter로 function이 올수 있다은건 이 문서를 보고 알수 있습니다.
그런데 sort함수 parameter인 function의 parameter와 retrun에 대한 설명(?)은 어떻게 알수 있나요??

예를들어서
var numbers = [20, 10, 9,8,7,6,5,4,3,2,1]; 
function sortNumber(a,b){
return a - b;
}

이럴때, sortNumber함수(내가 만들려는 함수 )의 파라미터가 2개 (a,b)인건 어찌 알수있고, 
return함수가 어떻게 동작하는지는 어떻게 알수 있을까요?


&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Description from others&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
우선 [20, 10, 9,8,7,6,5,4,3,2,1]의 배열에서 a-b라는 연산을 모두 한 다음 
그 결과값으로 정렬하는 것이 결코 아닙니다.
뭐하러 굳이 뺄셈을 하고 그 값으로 또 정렬하겠습니까? 

자바스크립트의 정확한 알고리즘은 아니지만 
쉽게 정렬 알고리즘을 설명하면 이렇습니다. 

(a,b) 형식으로 지정한 두 인자를 차례로 비교합니다.

우선 배열 numbers[0]과 numbers[1] 즉, 20과 10을 비교해 볼까요?
20-10 = 10 
결과값이 10 즉, 양수입니다.
sort함수에 sortNumber(a,b)의 return 값으로 양수 10을 전달합니다. 
그럼 sort함수가 양수값을 전달받고 배열의 순서를 바꾸어 버립니다. 
(정확하게 말하면 두 배열 안에 든 값을 교체)
그럼 배열이 [10, 20, 9,8,7,6,5,4,3,2,1] 이렇게 바뀝니다. 

그 다음 numbers[0]과 numbers[2] 즉 10과 9를 비교합니다. 10 - 9 = 1 &amp;gt;0, 양수입니다. 
결과값이 양수이므로 또 10과 9의 순서를 바꿉니다. 
이런 식으로 계속 두 인자를 비교해서 결과값이 양수가 나오면 순서를 바꾸고, 
음수가 나오면 순서를 그대로 유지하는 겁니다.

배열이 바뀌어가는 순서를 보면 이해하기 쉽습니다.

[(20), (10), 9,8,7,6,5,4,3,2,1] 20-10 = 10, 즉 양수이므로 순서바뀜! ()는 비교되는 인자값.
[(10), 20, (9),8,7,6,5,4,3,2,1] 10 - 9 = 1 또 양수, 순서 바뀜.
[(9), 20, 10, (8),7,6,5,4,3,2,1] 반복...
[(8), 20, 10, 9,(7)...]
...
[(2). 20, 10...3, (1)]
[(1), 20, 10...]

그럼 배열 내에서 가장 작은 값 1이 찾아지겠죠. 

[1, 20, 10, 9,8,7,6,5,4,3,2]

1의 순서는 바뀌지 않습니다. 1-2 = -1 
즉 결과값이 음수이기 때문이죠. 

그 다음은 두번째 배열 차례입니다.
20 - 10 = 10 &amp;gt; 0 이므로 순서를 또 바꿉니다. 

[1, (20), (10), 9,8,7,6,5,4,3,2]
[1, (10), 20, (9), 8...]
[1, (9), 20, 10, (8)...]

이런 식으로 반복하다 보면 두번째로 작은 값 2도 찾게 됩니다. 

....

[1, 2, 20, 10, 9,8,7,6,5,4,3]

그럼 다음은 세번째... 
이렇게 지루하게 반복하면 결국 정렬이 됩니다.

물론 실제 자바스크립트에서는 비교하는 순서가 다릅니다. 
다른 알고리즘을 쓰기 때문이죠.

이렇게 차례차례 비교해 나가면 인간이 이해하기는 쉽지만 
연산량이 기하급수적으로 늘어나기 때문에 다른 정렬 알고리즘을 쓰는 것이죠.

실제로는 
[20, 10, 9,8,7,6,5,4,3,2,1]
배열의 양쪽 끝부터 비교하고 (20, 1), 
그 다음 배열의 가운데 값을 차례로 비교해 나갑니다. (1,6)
디버깅해 보시면 쉽게 아실 수 있을 겁니다
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Description from others&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;ar numbers = [20, 10, 9,8,7,6,5,4,3,2,1]; 
function sortNumber(a,b){
return a - b;
}
를 하게 되면 모든 값들끼리 a - b를 하게 됩니다. 

그렇게 나온 값들을 sort()에 넣으면, (a - b)의 순서가 숫자가 낮은 것부터 높은 순서대로 정렬이 되겠죠.
-19(1 - 20), -9(1-10), -8(1-9), -7(1-8), -6(1-7), -5(1-6), -4(1-5), -3(1-4), -2(1-3), -1(1-2)
-18(2-20), -8(2-10), -7(2-9), -6(2-8), -5(2-7), -4(2-6), -3(2-5), -2(2-4), -1(2-3), 0(2-2), 1(2-1)
-17(3-20), -7(3-10), -6(3-9), -5(3-8), -4(3-7), -3(3-6), -2(3-5), -1(3-4), 0(3-3), 1(3-2), 2(3-1)
...
10(20-10), 11(20-9), 12(20-8), 13(20-7), 14(20-6), 15(20-5), 16(20-4), 17(20-3), 18(20-2), 19(20-1)

그럼 계산된 숫자의 크기에 따라서 a와 b의 순서가 sort()에 의해 재배열 되어
1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20
가 나옵니다.

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;arr.push(newElement)&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;mutable&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;마지막 배열에 추가&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;var arr = [1,2,3,4,];
arr.push(1);

arr; // = &amp;gt; [1,2,3,4,1]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;arr.pop()&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;mutable&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;뒤에 있는배열 제거&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var arr = [1,2,3,4,];
arr.pop();

arr; // = &amp;gt; [1,2,3]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;arr.unshift()&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;mutable&lt;/code&gt;
앞에 붙이기&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;var arr = [1,2,3,4];

arr.unshift(1);

arr; // = &amp;gt; [1,1,2,3,4,];

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;arr.shift()&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;앞에 있는거 빼기&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;var arr = [1,2,3,4];

arr.shift();

arr; // = &amp;gt; [2,3,4,]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;arr.slice(bein,end)&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;immutable&lt;/code&gt;
문자열의 특정구간을 검색&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tip&lt;/code&gt; 복제할수 있는 기능도 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let obj1 = [1,2,3,4,5,6];
let obj2 = obj1.slice();

&amp;gt;&amp;gt; obj2 = [1,2,3,4,5,6 ];

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;2번째 인덱스 부터 가져온다&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var fruits = [&#39;Banana&#39;, &#39;Orange&#39;, &#39;Lemon&#39;, &#39;Apple&#39;, &#39;Mango&#39;];
var myFruits = fruits.slice(2);

myFruits = [&amp;quot;Lemon&amp;quot;, &amp;quot;Apple&amp;quot;, &amp;quot;Mango&amp;quot;]


&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Return a portion of an existing array&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
var fruits = [&#39;Banana&#39;, &#39;Orange&#39;, &#39;Lemon&#39;, &#39;Apple&#39;, &#39;Mango&#39;];
var citrus = fruits.slice(1, 3);

// fruits contains [&#39;Banana&#39;, &#39;Orange&#39;, &#39;Lemon&#39;, &#39;Apple&#39;, &#39;Mango&#39;]
// citrus contains [&#39;Orange&#39;,&#39;Lemon&#39;]

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;만약 fruits.slice(1,&lt;code&gt;0&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var fruits = [&#39;Banana&#39;, &#39;Orange&#39;, &#39;Lemon&#39;, &#39;Apple&#39;, &#39;Mango&#39;];

fruits.slice(1, 0);

&amp;gt;&amp;gt; []  &amp;lt;&amp;lt; 값이 사라진다. 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;arr.splice(start,deleteCount,&amp;ldquo;itme1&amp;rdquo;,&amp;hellip;&amp;ldquo;)&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;mutable&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;중간에 element 를 삭제 할수 있는 방법이 이거뿐&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Remove 0 (zero) elements from index 2, and insert &amp;ldquo;drum&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
var myFish = [&#39;angel&#39;, &#39;clown&#39;, &#39;mandarin&#39;, &#39;sturgeon&#39;];
var removed = myFish.splice(2, 0, &#39;drum&#39;);

// myFish is [&amp;quot;angel&amp;quot;, &amp;quot;clown&amp;quot;, &amp;quot;drum&amp;quot;, &amp;quot;mandarin&amp;quot;, &amp;quot;sturgeon&amp;quot;] 
// removed is [], no elements removed

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Remove 0 (zero) elements from index 2, and insert &amp;ldquo;drum&amp;rdquo; and &amp;ldquo;guitar&amp;rdquo;Section&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
var myFish = [&#39;angel&#39;, &#39;clown&#39;, &#39;mandarin&#39;, &#39;sturgeon&#39;];
var removed = myFish.splice(2, 0, &#39;drum&#39;, &#39;guitar&#39;);

// myFish is [&amp;quot;angel&amp;quot;, &amp;quot;clown&amp;quot;, &amp;quot;drum&amp;quot;, &amp;quot;guitar&amp;quot;, &amp;quot;mandarin&amp;quot;, &amp;quot;sturgeon&amp;quot;] 
// removed is [], no elements removed

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Remove 1 element from index 3&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
var myFish = [&#39;angel&#39;, &#39;clown&#39;, &#39;drum&#39;, &#39;mandarin&#39;, &#39;sturgeon&#39;];
var removed = myFish.splice(3, 1);

// removed is [&amp;quot;mandarin&amp;quot;]
// myFish is [&amp;quot;angel&amp;quot;, &amp;quot;clown&amp;quot;, &amp;quot;drum&amp;quot;, &amp;quot;sturgeon&amp;quot;]

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Remove 1 element from index 2, and insert &amp;ldquo;trumpet&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
var myFish = [&#39;angel&#39;, &#39;clown&#39;, &#39;drum&#39;, &#39;sturgeon&#39;];
var removed = myFish.splice(2, 1, &#39;trumpet&#39;);

// myFish is [&amp;quot;angel&amp;quot;, &amp;quot;clown&amp;quot;, &amp;quot;trumpet&amp;quot;, &amp;quot;sturgeon&amp;quot;]
// removed is [&amp;quot;drum&amp;quot;]

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Remove 2 elements from index 0, and insert &amp;ldquo;parrot&amp;rdquo;, &amp;ldquo;anemone&amp;rdquo; and &amp;ldquo;blue&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;

var myFish = [&#39;angel&#39;, &#39;clown&#39;, &#39;trumpet&#39;, &#39;sturgeon&#39;];
var removed = myFish.splice(0, 2, &#39;parrot&#39;, &#39;anemone&#39;, &#39;blue&#39;);

// myFish is [&amp;quot;parrot&amp;quot;, &amp;quot;anemone&amp;quot;, &amp;quot;blue&amp;quot;, &amp;quot;trumpet&amp;quot;, &amp;quot;sturgeon&amp;quot;] 
// removed is [&amp;quot;angel&amp;quot;, &amp;quot;clown&amp;quot;]



&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Remove 2 elements from index 2&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
var myFish = [&#39;parrot&#39;, &#39;anemone&#39;, &#39;blue&#39;, &#39;trumpet&#39;, &#39;sturgeon&#39;];
var removed = myFish.splice(2, 2);

// myFish is [&amp;quot;parrot&amp;quot;, &amp;quot;anemone&amp;quot;, &amp;quot;sturgeon&amp;quot;] 
// removed is [&amp;quot;blue&amp;quot;, &amp;quot;trumpet&amp;quot;]

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Remove 1 element from index -2&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
var myFish = [&#39;angel&#39;, &#39;clown&#39;, &#39;mandarin&#39;, &#39;sturgeon&#39;];
var removed = myFish.splice(-2, 1);

// myFish is [&amp;quot;angel&amp;quot;, &amp;quot;clown&amp;quot;, &amp;quot;sturgeon&amp;quot;] 
// removed is [&amp;quot;mandarin&amp;quot;]


&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Remove all elements after index 2 (incl.)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var myFish = [&#39;angel&#39;, &#39;clown&#39;, &#39;mandarin&#39;, &#39;sturgeon&#39;];
var removed = myFish.splice(2);

// myFish is [&amp;quot;angel&amp;quot;, &amp;quot;clown&amp;quot;]
// removed is [&amp;quot;mandarin&amp;quot;, &amp;quot;sturgeon&amp;quot;]


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;arr.concat(arr)&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;immutable&lt;/code&gt;
더하기&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;1.

let letters = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;];
let numbers = [1, 2, 3];

letters.concat(numbers);


// result in [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, 1, 2, 3]


2.

var arr = [1,2,3,4,5];

arr.concat(6); 

console.log(arr) 

&amp;gt;&amp;gt; [1,2,3,4,5,]  

기존에 있는 것은 변하지 않는다.
변하게 하기위해서는 변수를 새로 만들기 !



3. 

arr.concat([6,7,8,9,10]);

&amp;gt;&amp;gt;arr

[1,2,3,4,5,6,7,8,9,10] 
여러게를 더할수 있다.

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;arr.forEach()&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;immutable&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;배열에 길이 만큼 반복 실행하는 용도!&lt;/p&gt;

&lt;p&gt;forEach()는 주어진 callback을 배열에 있는 각 요소에 대해 오름차순으로 한 번씩 실행합니다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var array1 = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;];

array1.forEach(function(element) {
  console.log(element);
});

// expected output: &amp;quot;a&amp;quot;
// expected output: &amp;quot;b&amp;quot;
// expected output: &amp;quot;c&amp;quot;


&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;3가지 인자값을 싱행 할수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;요소 값&lt;/li&gt;
&lt;li&gt;요소 인덱스&lt;/li&gt;

&lt;li&gt;&lt;p&gt;순회 중인 배열&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function logArrayElements(element, index, array) {
console.log(&#39;a[&#39; + index + &#39;] = &#39; + element);
}

// Notice that index 2 is skipped since there is no item at
// that position in the array.
[2, 5, , 9].forEach(logArrayElements);
// logs:
// a[0] = 2
// a[1] = 5
// a[3] = 9

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;arr.map()&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;immutable&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;callback 내에서 리턴이 필요하다.&lt;/p&gt;

&lt;p&gt;기존배열과 길이가 같고 , 형태가 다른 배열을 만들때 유용&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;배열에 있는 값 각 각  100으로나누고 싶다?&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
let arr = [100 ,200 ,500 ];

let newArr = arr.map(function(cur,idx,arr){
return cur / 100;
})

&amp;gt;&amp;gt;newArr = [1, 2, 5]


&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;배열 안에있는 것을 다른 형태로 출력 하고 싶다.?(길이)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;

arr2 = [&amp;quot;code&amp;quot;,&amp;quot;states&amp;quot;];

let newArr2 = arr2.map(function(cur){
	return cur.length
});

&amp;gt;&amp;gt; newArr2 = [4, 6]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;arr.filter()&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;걸러주는 역활 한다.&lt;/p&gt;

&lt;p&gt;return 필요&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
let arr = [1,2,3,4,5,6];

newArr = arr.filter(function(cur,index,arr2){

	return cur &amp;lt; 2;
})


newArr = [1];



&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;arr.reduce(callback,[,initalValue])&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;immutable&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;return value :  최종 누적값&lt;/p&gt;

&lt;p&gt;모든 element 값을 누적해 하나의 결과로 리턴할 때 유용&lt;/p&gt;

&lt;p&gt;The reducer function takes four arguments:&lt;/p&gt;

&lt;p&gt;Accumulator (acc)&lt;/p&gt;

&lt;p&gt;Current Value (cur)&lt;/p&gt;

&lt;p&gt;Current Index (idx)&lt;/p&gt;

&lt;p&gt;Source Array (src)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;배열안에 있는 값을 각 각 더하고 싶을때 ?&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let arr = [1, 2, 3, 4];

let count = arr.reduce(function(acc.cur){
  return acc + cur;
  // 1 + 2 + 3 + 4
});

conunt =&amp;gt; 10

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;초기값 5 를 넣고 더했을때&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
let arr = [1, 2, 3, 4];

let count = arr.reduce(function(acc.cur) {
  return acc + cur;
  //5 + 1 + 2 + 3 + 4
},5);


count = &amp;gt;&amp;gt; 15

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;arr.join(separator)&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;immutable&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;배열의 원소를 결합해서 하나의 문자열로 만든다.
공백이 있는 곳에  요소를 더할수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
let arr = [&amp;quot;welcome&amp;quot;,&amp;quot;coding&amp;quot;,&amp;quot;everybody&amp;quot;];
arr.join(&amp;quot; &amp;quot;);
&amp;quot;welcome coding everybody&amp;quot;

arr.join(&amp;quot; hi &amp;quot;)
&amp;quot;welcome hi coding hi everybody&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;arr.every()&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;every() 메서드는 배열 안의 모든 요소가 주어진 판별 함수를 통과하는지 테스트합니다.&lt;/p&gt;

&lt;p&gt;다음 예는 배열의 모든 요소가 10보다 더 큰지 테스트합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function isBigEnough(element, index, array) {
  return element &amp;gt;= 10;
}
[12, 5, 8, 130, 44].every(isBigEnough);   // false
[12, 54, 18, 130, 44].every(isBigEnough); // true
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;화살표 함수 사용&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
[12, 5, 8, 130, 44].every(elem =&amp;gt; elem &amp;gt;= 10); // false
[12, 54, 18, 130, 44].every(elem =&amp;gt; elem &amp;gt;= 10); // true


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;arr.some()&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;하나라도 조건이 맞으면 true  반환한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var array = [1, 2, 3, 5];

var even = function(element) {
  // checks whether an element is even
  return element % 2 === 0;
};

console.log(array.some(even));
// expected output: true



&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;object&#34;&gt;&lt;strong&gt;object&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;Object.keys(객체)  : &lt;code&gt;key&lt;/code&gt; 뽑기 into array&lt;/li&gt;
&lt;li&gt;Object.values(객체) : &lt;code&gt;value&lt;/code&gt; 뽑기 into array&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Object.entries(객체) : &lt;code&gt;전체&lt;/code&gt;뽑기 into array&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let user = {
name: &amp;quot;John&amp;quot;,
age: 30
};
Object.keys(person) = [&amp;quot;name&amp;quot;, &amp;quot;age&amp;quot;]
Object.values(person) = [&amp;quot;John&amp;quot;, 30]
Object.entries(person) = [ [&amp;quot;name&amp;quot;,&amp;quot;John&amp;quot;], [&amp;quot;age&amp;quot;,30] ]

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;뽑은것들 변수에 담아서 배열 에 넣기&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;let arrKey =  Object.keys(person);
&amp;gt;&amp;gt;[&amp;quot;name&amp;quot;, &amp;quot;age&amp;quot;]

let arrValues = Object.values(person);
&amp;gt;&amp;gt; [&amp;quot;John&amp;quot;, 30]

let arrEntries = Object.entries(person);
&amp;gt;&amp;gt;[ [&amp;quot;name&amp;quot;,&amp;quot;John&amp;quot;], [&amp;quot;age&amp;quot;,30] ]

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;obj.key&lt;/code&gt; or &lt;code&gt;obj[key]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;for 문을 이용해 객체안에 있는 key value 뽑기&lt;/p&gt;

&lt;p&gt;ex 키값 뽑기&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;let person = { name : &amp;quot;john&amp;quot; , age : 33 } ; 

for (let key in person) {
	console.log(key);
}

&amp;gt;&amp;gt;name
&amp;gt;&amp;gt;age

&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;ex value 뽑기&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;
let person = { name : &amp;quot;john&amp;quot; , age : 33 } ;

for (let key in person) {
	console.log(person[key]);
}

&amp;gt;&amp;gt;john
&amp;gt;&amp;gt;33

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;delete object.property&lt;/li&gt;
&lt;li&gt;delete object[&amp;ldquo;property&amp;rdquo;]&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;ex&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt; 
 var Employee = {
  age: 28,
  name: &#39;abc&#39;,
  designation: &#39;developer&#39;
}

console.log(delete Employee.name);   // returns true
console.log(delete Employee.age);    // returns true

// When trying to delete a property that does 
// not exist, true is returned 
console.log(delete Employee.salary); // returns true
 
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Notes</title>
      <link>/tutorial/javascript_note/</link>
      <pubDate>Thu, 01 Jan 1970 09:33:39 +0900</pubDate>
      
      <guid>/tutorial/javascript_note/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/tutorial/Javascript_Dictionary_files/javascriptt-light_870x220.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;today-what-i-learn&#34;&gt;Today What I Learn ?&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;/tutorial/Javascript_Note_files/Screen Shot 2019-08-19 at 8.22.08 PM.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;parameter-지정하는-법&#34;&gt;parameter 지정하는 법&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code&gt;ES6&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
function timeToGoHome(distance, speed = 20 ) { 

	return distance + speed;
}

timeToGoHome(10);

// 30

timeToGoHome(10,10); // 두번째 값인 지정했던 speed 값이 변한다. 

// 20



 // 만약 첫번째 값을 지정하고 출력하고 싶다면

function timeToGoHome(distance = 20, speed) { 

timeToGoHome(undefined,20) ;
// 40
 

&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;getmaxnum-함수-만들기&#34;&gt;getMaxNum 함수 만들기&lt;/h3&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
function getMaxNums(...nums) {
	console.log(nums);
}

getMaxNums(1,2,3,4,5);  // nums 는 arr로 출력된다. 따라서 
// &amp;gt;&amp;gt;&amp;gt;(5) [1, 2, 3, 4, 5]



let getMaxNum = function(...nums) {
	
	return nums.reduce(function(acc,curr) {
		if ( acc &amp;gt; curr ) {
		  return acc;	
		} else {
		  return curr;
		}
	 })
}

getMaxNum(1,2,3,4,5) //  Math.max(5,4,3,2,1)  &amp;gt;&amp;gt; 5같다

// &amp;gt;&amp;gt; 5 출력 

&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;현재-시간-날짜-년도-불러오기&#34;&gt;현재 시간,날짜  || 년도 불러오기&lt;/h3&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let a = new Date()

a &amp;gt; // Tue Aug 20 2019 15:14:58 GMT+0900 (Korean Standard Time)

let b = (a.getFullYear());

b &amp;gt; // 2019 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
let currentDate = new Date() // Date() 라는 함수가 이미저장되어있다. 
currentDate 

&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;in-에-관해서&#34;&gt;in 에 관해서&lt;/h3&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;

obj = {a:1,b:2}; // obj 객체가 있다.

let obj2 = &amp;quot;a&amp;quot; in obj; //  obj 안에 a라는 키값이 있는지 확인한다. 

console.log(obj2) // &amp;gt;&amp;gt; true &amp;lt;&amp;lt; true or false 로 값을 나타낸다.  



&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;prototype를-사용해-ininstance-객체에-키값-속성값-추가하는법&#34;&gt;prototype를 사용해 ininstance 객체에 키값 속성값 추가하는법&lt;/h3&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
// prototype를 사용해 모든 instance 객체에 property와 method 추가하는 법을 확인합니다

function objFunc(para) { // 객체를 담고있는 함수를 먼저 만든다.
      this.age = para; // key 는 name / property는 para  &amp;lt; 아직 모른다.
    }

    let newObj = new objFunc(33); // para 값이 33이 됨 따라서 info1 = { age:33 }
    newObj.name = &amp;quot;John&amp;quot;; //  // 함수안에 infor1 객체안에 키값이랑 property 를 추가한다.

newObj //&amp;gt;&amp;gt; objFunc = { age: 33 , name: &amp;quot;John&amp;quot; } name = &amp;quot;john&amp;quot; 이 추가됬다. 

// prototype 을 사용해서 추가하기

objFunc.prototype.text = function() { // 처음함수에 prototype을 넣는다.  그다음에 text라는 키값을 지정한다. 이키값은 함수이기도 하다. 그래서 키이면서도 함수인 text()가 실행되면 return값이 출력된다.  
	return &amp;quot;this is the stroy what I want to say to &amp;quot; + newObj.name; 
}

newObj.text(); // &amp;quot;this is the stroy what I want to say to john&amp;quot;


&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;객체안에-담겨있는-function-사용하기&#34;&gt;객체안에 담겨있는 function 사용하기&lt;/h3&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
  // 객체를 만들고 속성값에 text 내용을 출력할 함수를 만든다. 
  
 // 이름을 몇번 집어넣을지 num 라는 것을 Array(num+1)를 통해 만들고 join 메소드를 이용해 &amp;quot; &amp;quot; 띄어쓰기를 한후 text 를 출력한다.

obj1 = {
      name1 : &amp;quot;john&amp;quot;,
      name2: &amp;quot;tim&amp;quot;,
      funcSum: function (num) {
        return &amp;quot;They are &amp;quot; + this.name1 + &amp;quot; and the&amp;quot; +
        Array(num + 1).join(&amp;quot; &amp;quot; + this.name2);     
      }
    };

let massage = obj1.funcSum(2) //  객체안에 있는 속성인 funcSum(2) 호출한다.

console.log(massage) // &amp;gt;&amp;gt; &amp;quot;They are john and the tim tim&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;함수가-객체의-키값으로-사용&#34;&gt;함수가 객체의 키값으로 사용&lt;/h3&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
// 객체와 함수를 이용한다.
// 장점 객체안에 키값을 자유롭게 사용할수 있다.

let funcGood = function (elem) {
      return elem + &amp;quot; is good man!&amp;quot;;
    };
    let obj1 = { name: funcGood };
    

obj1.name(&amp;quot;John&amp;quot;) // &amp;gt;&amp;gt; john is good man!

// 만약 obj.name 이 다른 기능을 가지고있는 함수를 대입하면..

let funcBad = function (elem) {
      return elem + &amp;quot; is good bad!&amp;quot;;
    };

obj.name = funcBad 

// 기존에 있던 obj.name 기능은 사라지고 obj.name 의 기능은

obj.name(&amp;quot;john&amp;quot;) // john is good bad!


&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;key-배열-출력-object-keys-for-in-문&#34;&gt;key 배열 출력 - Object.keys, for in 문&lt;/h3&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
var arr = [];
arr[&amp;quot;a&amp;quot;] = 20;
arr[&amp;quot;b&amp;quot;] = 10;
arr[&amp;quot;c&amp;quot;] = 30;
arr[&amp;quot;d&amp;quot;] = 40;

arr = [a: 20, b: 10, c: 30, d: 40];


console.log(arr);    
console.log(arr.length);  // 헉 키값으로 된 array는 length가 0??
// jquery each문으로 안돌아간다.
$.each(arr, function(index, el) {
	console.log(el);
});

 // key만 출력
console.log(Object.keys(arr)) // [&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;d&amp;quot; ] 
// for in으로 출력하자

for (var i in arr) {  // in 연산자는 상속계통을 모두 검색하여 맴버가 존재하는지 확인한다. (반복문중 가장 느리다.)
	if (arr.hasOwnProperty(i)) {   // hasOwnProperty를 통해 해당 객체의 맴버인지 확인을 한다.
		console.log(arr[i]);
	}
}
//------------------------------------------------------------------------------------------------------
//  key array length 키 배열 사이즈  얻는 사용자함수
function arraySize(obj) {
	var size = 0, key;
	for (key in obj) {
		if (obj.hasOwnProperty(key)) {
			size++;
		}
	}
	return size;
};	
console.log(arraySize(arr));  // 4


출처: https://mylife365.tistory.com/286?category=624212 [변화에 적응하기]
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;dot-notation-and-braket-notation&#34;&gt;dot notation and  braket notation ?&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;다른점은 dot notation 을 쓴것과 braket notation을 쓴것인데 이게 왜 다를까요???&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Example1&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var obj = {steve:1, bob:2};
var steve = &#39;bob&#39;;

console.log(obj.steve);    // 1
console.log(obj[&#39;steve&#39;]); // also 1
console.log(obj[steve]);   // 2

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Example2&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var obj = {steve:1, bob:2};

console.log(obj.steve);    // 1
console.log(obj[&#39;steve&#39;]); // also 1
console.log(obj[&#39;bob&#39;]);   // 2



&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;first-class-object&#34;&gt;first-class object()&lt;/h3&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code&gt;함수를 변수, 매개변수 ,리턴값 으로 사용할수 있다 이것을

first-class value 
first-class citizen
first-class object

라고 부른다. 

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;값으로써 쓰이는 함수 예제&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function cal(mode){
var funcs = {
    &#39;plus&#39; : function(left, right){return left + right},
    &#39;minus&#39; : function(left, right){return left - right}
}
return funcs[mode];
}
alert(cal(&#39;plus&#39;)(2,1));
alert(cal(&#39;minus&#39;)(2,1));  
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;배열로서의 함수&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
var process = [
function(input){ return input + 10;},
function(input){ return input * input;},
function(input){ return input / 2;}
];
var input = 1;
for(var i = 0; i &amp;lt; process.length; i++){
input = process[i](input);
}
alert(input);

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/tutorial/Javascript_Notes_files/Screen Shot 2019-07-17 at 4.10.02 PM.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;callback&#34;&gt;Callback&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;장점&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;원래의 내장메소드에 있는 기능을 콜백 으로 바꿔서 사용할수 있다.&lt;/p&gt;

&lt;p&gt;값으로 사용될 수 있는 특성을 이용하면 함수의 인자로 함수로 전달할 수 있다. 값으로 전달된 함수는 호출될 수 있기 때문에 이를 이용하면 함수의 동작을 완전히 바꿀 수 있다. 인자로 전달된 함수 sortNumber의 구현에 따라서 sort의 동작방법이 완전히 바뀌게 된다.&lt;/p&gt;

&lt;p&gt;ajax를 사용할때 제이 쿼리를 이용해서 콜백이 사용된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;function sortNumber(a,b){
    // 위의 예제와 비교해서 a와 b의 순서를 바꾸면 정렬순서가 반대가 된다.
    return b-a;
}
var numbers = [20, 10, 9,8,7,6,5,4,3,2,1];
alert(numbers.sort(sortNumber)); // array, [20,10,9,8,7,6,5,4,3,2,1]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/tutorial/Javascript_Notes_files/Screen Shot 2019-07-17 at 4.46.43 PM.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;dom-dom을-이용해서-html문서를-제어할수-있다&#34;&gt;Dom : Dom을 이용해서 HTML문서를 제어할수 있다&lt;/h3&gt;

&lt;hr /&gt;

&lt;h5 id=&#34;dom-객체의-값-바꾸기&#34;&gt;DOM 객체의 값 바꾸기&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ex1-1 document.getElementsByTagName()&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
document.getElementsByTagName() 
&amp;gt;&amp;gt;html에 있는 tag name 을 가져오는 명령이다.

var list = document.getElementsByTagName(&#39;h2&#39;) 
&amp;gt;&amp;gt;모든 h2를 list 라는 변수에 담아오겠다. 

태그 이름을 바꾸기 위해서는 

a
&amp;gt;&amp;gt; [h2,h2]

a[0]
&amp;gt;&amp;gt; &amp;lt;h2&amp;gt;hello 1&amp;lt;/h2&amp;gt;

a[1]
&amp;gt;&amp;gt; &amp;lt;h2&amp;gt;hello 2&amp;lt;/h2&amp;gt;
이렇게 배열안에 들어가 있다. 

a[1].innerHTML = &amp;quot;good morning&amp;quot;
heelo 2 &amp;gt;&amp;gt; good morning 으로 바뀐다. 

이것이 dom 의 역활 이다. 

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ex1-2 document.getElementsById()&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var a = document.getElementsById(&amp;quot;main&amp;quot;)
&amp;gt;&amp;gt; main 아이디 값의 tag를 가져와서  a 변수에 담는다

a
&amp;gt;&amp;gt; &amp;lt;p id = main&amp;gt;hello jj &amp;lt;/p&amp;gt;

a.innerHTML = &amp;quot;hello John jung&amp;quot;

a

&amp;gt;&amp;gt;&amp;lt;p id = main&amp;gt;hello john jung&amp;lt;/p&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;버튼-만들기&#34;&gt;버튼 만들기&lt;/h3&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;함수를 이용해 버튼 만들기&amp;lt;/h1&amp;gt;
    
    
    // 1.value 를 지정하기 in HTML
    
    
    &amp;lt;input id = &amp;quot;input1&amp;quot; type =&amp;quot;text&amp;quot;&amp;gt;
    &amp;lt;button id =&amp;quot;button1&amp;quot;&amp;gt;cilck&amp;lt;/button&amp;gt;
    
    
    &amp;lt;script&amp;gt;
    
    // 2. 함수&amp;amp;변수를 만들어서 준비한다 
    
        var ret = function(){
            document.getElementById(&amp;quot;input1&amp;quot;);
            console.log(input1.value);
        }
    
        var button = document.getElementById(&amp;quot;button1&amp;quot;);
        
        
    // 3 .입력받을 ID 값을 받는 함수를 연결해준다.
       
        button1.onclick = ret; 

    /script&amp;gt;
    


&amp;lt;/body&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;객체-숫자-계산-하는-방법&#34;&gt;객체 숫자 계산 하는 방법&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;how-to-count-the-number-of-properties-of-the-javascript-object&#34;&gt;How to Count the Number of Properties of the JavaScript Object&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;While working with JavaScript, I come across a requirement to count a number of properties in a JavaScript object. I found two ways to find the number of properties in an object. They are as follows:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;Consider an object, &amp;quot;cat,&amp;quot; as demonstrated below:

var cat = {
    name: &#39;foo&#39;,
    age: 9
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;You can find a number of properties by iterating in a for loop and update counter, as shown in the below listing:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;let count = 0;
for (var c in cat) {
    count = count + 1;
}
console.log(count);// 2

&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Above code will print &amp;ldquo;2&amp;rdquo; as the output.&lt;/p&gt;

&lt;p&gt;The above approach not only prints the object&amp;rsquo;s own enumerable properties, but it also prints properties of objects to which it is linked. To further understand it, let us consider the below listing:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;var animal = {
    canRun: true
}
var cat = {
    name: &#39;foo&#39;,
    age: 9
}
cat.__proto__ = animal;

&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;There are two objects, cat andanimal, and the cat object is linked to an animal object using the &lt;strong&gt;proto&lt;/strong&gt; property. Now, when you use a for loop to iterate and count a number of properties, it will also count the enumerable properties of the animal object. Therefore, the code listing below will print &amp;ldquo;3.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;var animal = {
    canRun: true
}
var cat = {
    name: &#39;foo&#39;,
    age: 9
}
cat.__proto__ = animal;
let count = 0;
for (var c in cat) {
    count = count + 1;
}
console.log(count);// 3

&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;A JavaScript for loop will iterate through all the linked properties of the object.&lt;/p&gt;

&lt;p&gt;To count the object&amp;rsquo;s own enumerable properties, you may consider using another approach, Object.keys(), which only enumerates the object&amp;rsquo;s own enumerable properties. It does not enumerate the object&amp;rsquo;s linked properties.&lt;/p&gt;

&lt;p&gt;Moving forward, let us again consider the cat object which is linked to animal object and count the number of properties using Object.keys:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;
var animal = {
    canRun: true
}
var cat = {
    name: &#39;foo&#39;,
    age: 9
}
cat.__proto__ = animal;
var count = Object.keys(cat).length;
console.log(count);

&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Now you will get &amp;ldquo;2&amp;rdquo; printed as the output.&lt;/p&gt;

&lt;p&gt;Object.keys only enumerates the object&amp;rsquo;s own enumerable properties.&lt;/p&gt;

&lt;p&gt;If the object&amp;rsquo;s property enumerable is set to false, then it is not a member of the Object.keys array. Let us again consider the cat object and set its name property enumerable to false.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;var cat = {
    name: &#39;foo&#39;,
    age: 9
}
Object.defineProperty(cat, &#39;name&#39;, { enumerable: false });

&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Now, when you use Object.keys to find a number of properties, it will count only one.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;var count = Object.keys(cat).length;
console.log(count);  // print 1
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;In closing, these are the two ways that you can use to find the number of properties in a JavaScript object&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;iteration-statements&#34;&gt;iteration statements&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;반복문 순서&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 반복문

1. let i = 0  처음에 실행

2. i &amp;lt; 4 조건을 검사  

3. 반복할 내용 돌리고

4. i = i + 1 마지막으로  실행한다. 
  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;difference bewteen for in or  for of&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;for in&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
let list = [4, 5, 6];

for (let i in list) {
   console.log(i); // &amp;quot;0&amp;quot;, &amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;,
}

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;for of&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;for of 는  &lt;code&gt;for (let i = 0; i &amp;lt; arr.length; i = i + 1 ) { }&lt;/code&gt; 쓰는 것이랑  동일하다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
let list = [4, 5, 6];

for (let i of list) {
   console.log(i); // &amp;quot;4&amp;quot;, &amp;quot;5&amp;quot;, &amp;quot;6&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;For Loop&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
// 요소를 불러오기 위해 i 라는 변수를 지정한다. 
// 불러오는 두가지 방법이 있다.

1.

for ( let i = 0; i &amp;lt; obj[key].length; i = i + 1 )

2.

for(var i in obj[key])


&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;array&#34;&gt;&lt;strong&gt;Array&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt; 1. 기존에 arr 를 새로운 newArr 라는 변수를 지정해 쓰는 경우에
 만약 newArr 를 바꾸면 기존의 arr 까지 바뀌게 된다. 
 
 2. 그런데 만약 새로운 newArr 라는 변수에 arr.slice() 로 copy 한 것을 저장하여 쓰게 된다면 기존에 arr 값이 변하지 않는다. 
 
SumUp

기존에 arr 에 영향을 주지 않으려면 array 를 copy해서 써라! 
 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Get the last item in an array&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let arr = [1, 2, 3, 4] ;

* First
arr[arr.length - 1] ;


* Second
arr.slice(-1);

* Third
arr.slice(-1).pop();

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;배열안에 있는 문자열 빼는 방법&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
var newArray = [];
  for (let i = 0; i &amp;lt; arr.length; i++) {
    if (typeof(arr[i]) === &#39;string&#39;) {
      newArray.push(arr[i]);
    } 
  }

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;How to find the sum of an array of numbers&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/1230233/how-to-find-the-sum-of-an-array-of-numbers&#34; target=&#34;_blank&#34;&gt;This is link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9 Ways to Remove Elements From A JavaScript Array&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://love2dev.com/blog/javascript-remove-from-array&#34; target=&#34;_blank&#34;&gt;This is link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript Arrays: slice vs splice&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://wsvincent.com/javascript-array-slice-vs-splice/&#34; target=&#34;_blank&#34;&gt;This is link&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2. Basic_Daliy_Coding</title>
      <link>/tutorial/javascript_q1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/tutorial/javascript_q1/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/tutorial/Javascript_Dictionary_files/javascriptt-light_870x220.png&#34; alt=&#34;&#34; /&gt;&amp;mdash;&lt;/p&gt;

&lt;h2 id=&#34;conditional-isoldenoughtodrink&#34;&gt;Conditional : isOldEnoughToDrink&lt;/h2&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;어떤 숫자, 이 경우에는 연령이 하나 주어졌을 때, isOldEnoughToDrink 함수는 주어진 연령의 사람이 미국에서 합법적으로 술을 마실 수 있는지의 여부를 반환해야 합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;my_answer&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;function isOldEnoughToDrink(age) {
  // 여기에 코드를 작성하세요
  if (age &amp;lt; 21 ) {
    return false;
  } else {
    return true;
  }
}


&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;conditional-checkage&#34;&gt;Conditional : checkAge&lt;/h2&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;이름과 나이를 파라미터로 받는 checkAge라는 함수는 두개 중 하나의 메시지를 리턴합니다.&lt;/p&gt;

&lt;p&gt;만일 21살보다 적으면, Go home, {전달받은_이름}! 만일 21살이거나 더 나이가 많으면, Welcome, {전달받은_이름}! 을 리턴하세요. 쉼표와 공백, 느낌표까지 정확히 리턴해야 합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;my_answer&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
function checkAge(name, age) {
// 여기에 코드를 작성하세요
if (age &amp;gt;= 21){
return &#39;Welcome, &#39; + name+ &#39;!&#39;;
} else {
return &#39;Go home, &#39; + name+ &#39;!&#39;;
}
};

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;conditional-equalsten&#34;&gt;Conditional : equalsTen&lt;/h2&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;equalsTen&amp;rdquo;. (&amp;ldquo;equalsTen&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given a number, &amp;ldquo;equalsTen&amp;rdquo; returns whether or not the given number is 10. (&amp;ldquo;숫자가 주어졌을때, &amp;ldquo;equalsTen&amp;rdquo; 함수는 숫자가 10과 같은지 반환합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;my_answer&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function equalsTen(num) {
// 여기에 코드를 작성하세요
if ( num !== 10){
return false;
}else if (num === 10 ){
return true;
}
}

equalsTen(10);


&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;conditional-isgreaterthan&#34;&gt;Conditional : isGreaterThan&lt;/h2&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;isGreaterThan&amp;rdquo;. (&amp;ldquo;isGreaterThan&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given 2 numbers, &amp;ldquo;isGreaterThan&amp;rdquo; returns whether num2 is greater than num1. (두 숫자가 주어졌을때, &amp;ldquo;isGreaterThan&amp;rdquo; 함수는 두번째 숫자(num2)가 첫번째 숫자(num1)보다 큰지 반환해야 합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;my_answer&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
function isGreaterThan(num1, num2) {
// 여기에 코드를 작성하세요
if ( num1 === num2 ){
return false;
} else if ( num1 &amp;lt; num2) {
return true;
} else {
return false;
}
}

isGreaterThan(20,30)

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;conditional-iseven&#34;&gt;Conditional : isEven&lt;/h2&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;isEven&amp;rdquo;. (&amp;ldquo;isEven&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given a number, &amp;ldquo;isEven&amp;rdquo; returns whether it is even. (&amp;ldquo;숫자가 주어졌을때, &amp;ldquo;isEven&amp;rdquo; 함수는 주어진 숫자가 짝수인지 반환합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;my_answer&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function isEven(num) {
// 여기에 코드를 작성하세요
if ( num % 2 === 0 ) {
return true;
} else {
return false;
}

}

isEven(21)

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;conditional-isevenandgreaterthanten&#34;&gt;Conditional : isEvenAndGreaterThanTen&lt;/h2&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;isEvenAndGreaterThanTen&amp;rdquo;. (&amp;ldquo;isEvenAndGreaterThanTen&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given a number, &amp;ldquo;isEvenAndGreaterThanTen&amp;rdquo; returns whether it is both even and greater than 10. (숫자가 주어졌을때, &amp;ldquo;isEvenAndGreaterThanTen&amp;rdquo; 함수는 주어진 숫자가 10보다 크고 짝수인지 반환해야 합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;my_answer&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function isEvenAndGreaterThanTen(num) {
// 여기에 코드를 작성하세요
if ( num % 2 === 0 &amp;amp;&amp;amp; num &amp;gt; 10 ){
return true;
} else {
return false;
}
}
isEvenAndGreaterThanTen(13);


&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;conditional-convertscoretograde&#34;&gt;Conditional : convertScoreToGrade&lt;/h2&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;convertScoreToGrade&amp;rdquo;. (&amp;ldquo;convertScoreToGrade&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given a score, &amp;ldquo;convertScoreToGrade&amp;rdquo; returns a string representing the letter grade corresponding to the given score. (점수가 주어졌을때, &amp;ldquo;convertScoreToGrade&amp;rdquo; 함수는 주어진 점수와 대응하는 등급을 문자열로 반환합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;my_answer&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function convertScoreToGrade(score) {
// 여기에 코드를 작성하세요
if ( score &amp;gt; 100 || score &amp;lt; 0) {
return &amp;quot;INVALID SCORE&amp;quot;;
} else if ( score &amp;gt;= 90 ) {
return &amp;quot;A&amp;quot;;
} else if ( score &amp;gt;= 80 ) {
return &amp;quot;B&amp;quot;;
} else if ( score &amp;gt;= 70 ) {
return &amp;quot;C&amp;quot;;
} else if ( score &amp;gt;= 60 ) {
return &amp;quot;D&amp;quot;;
} else {
return &#39;F&#39;;
}
}
convertScoreToGrade(0);

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;conditional-or&#34;&gt;Conditional : Or&lt;/h2&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;or&amp;rdquo;. (&amp;ldquo;or&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given 2 boolean expressions, &amp;ldquo;or&amp;rdquo; returns true or false, corresponding to the || operator. (boolean 두개가 주어졌을때, &amp;ldquo;or&amp;rdquo; 함수는 || 연산자에 대응하는 true 나 false 를 반환합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;my_answer&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function or(expression1, expression2) {
// 여기에 코드를 작성하세요
if ( expression1 !== false  ) {
return true;
} else if ( expression2 !== false ) {
return true;
} else {
return false;
}

}

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;conditional-iseitherevenandlessthan9&#34;&gt;Conditional : isEitherEvenAndLessThan9&lt;/h2&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;isEitherEvenAndLessThan9&amp;rdquo;. (&amp;ldquo;isEitherEvenAndLessThan9&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given two numbers, &amp;lsquo;isEitherEvenAndLessThan9&amp;rsquo; returns whether at least one of them is even, and, both of them are less than 9. (숫자 두개가 주어졌을때, &amp;lsquo;isEitherEvenAndLessThan9&amp;rsquo; 함수는 2가지 조건을 검사합니다. 우선 두 숫자 중 적어도 하나가 짝수인지, 그리고 두 숫자 모두 9보다 작은지를 확인합니다. 두 조건을 모두 만족 했을 때만 true를 반환합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;my_answer&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
function isEitherEvenAndLessThan9(num1, num2) {
if ((num1 % 2 === 0 || num2 % 2 === 0) &amp;amp;&amp;amp; (num1 &amp;lt; 9 &amp;amp;&amp;amp; num2 &amp;lt; 9)) {
return true;
} else {
return false;
}
}


&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;string-getfullname&#34;&gt;string : getFullName&lt;/h2&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;getFullName&amp;rdquo;. (&amp;ldquo;getFullName&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given a first and a last name, &amp;ldquo;getFullName&amp;rdquo; returns a single string with the given first and last names separated by a single space. (이름과 성이 주어졌을때, &amp;ldquo;getFullName&amp;rdquo; 함수는 이름과 성이 띄어쓰기 하나를 사이에 둔 단일 문자열을 반환해야 합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;my_answer&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
function getFullName(firstName, lastName) {
// 여기에 코드를 작성하세요
let output = firstName + lastName;
return firstName + &amp;quot; &amp;quot; + lastName;
}
  
getFullName(&#39;john&#39;,&#39;jung&#39;)

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;string-getlengthofword&#34;&gt;string : getLengthOfWord&lt;/h2&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;getLengthOfWord&amp;rdquo;. (&amp;ldquo;getLengthOfWord&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given a word, &amp;ldquo;getLengthOfWord&amp;rdquo; returns the length of the given word. (단어가 주어졌을때, &amp;ldquo;getLengthOfWord&amp;rdquo; 함수는 단어의 길이를 반환해야 합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;my_answer&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
function getLengthOfWord(word) {
// 여기에 코드를 작성하세요
let count = word.length;
return count;
}
getLengthOfWord(&amp;quot;hello&amp;quot;)

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;string-computeaveragelengthofwords&#34;&gt;string : computeAverageLengthOfWords&lt;/h2&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;computeAverageLengthOfWords&amp;rdquo;. (&amp;ldquo;computeAverageLengthOfWords&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given two words, &amp;ldquo;computeAverageLengthOfWords&amp;rdquo; returns the average of their lengths. (두 단어가 주어졌을때, &amp;ldquo;computeAverageLengthOfWords&amp;rdquo; 함수는 두 단어 길이의 평균값을 반환합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;my_answer&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function computeAverageLengthOfWords(word1, word2) {
// your code here
// count
var firstNum = word1.length;
var sceondNum = word2.length;
var ret = (firstNum + sceondNum) / 2;
return ret;
}
computeAverageLengthOfWords(&amp;quot;whatIYouDoing?&amp;quot;,&amp;quot;this is JJ&amp;quot;)


&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;string-isoddlength&#34;&gt;string : isOddLength&lt;/h2&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;isOddLength&amp;rdquo;. (&amp;ldquo;isOddLength&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given a word, &amp;ldquo;isOddLength&amp;rdquo; returns whether the length of the given word is odd. (단어가 주어졌을때, &amp;ldquo;isOddLength&amp;rdquo; 함수는 주어진 단어의 길이가 홀수인지 반환해야 합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;my_answer&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function isOddLength(word) {
// your code here
let countNum = word.length;
if ( countNum % 2 !== 0) {
return true;
} else {
return false;
}
}

isOddLength(&amp;quot;heeeee&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;string-isevenlength&#34;&gt;string : isEvenLength&lt;/h2&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;isEvenLength&amp;rdquo;. (&amp;ldquo;isEvenLength&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given a word, &amp;ldquo;isEvenLength&amp;rdquo; returns whether the length of the word is even. (단어가 주어졌을때, &amp;ldquo;isEvenLength&amp;rdquo; 함수는 주어진 단어의 길이가 짝수인지 반환해야 합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;my_answer&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
function isEvenLength(word) {
// your code here
var countNum = word.length;
if ( countNum % 2 === 0 ) {
return true;
} else {
return false;
}
}

isEvenLength(&amp;quot;hee&amp;quot;)


&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;string-repeatstring&#34;&gt;string : repeatString&lt;/h2&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;repeatString&amp;rdquo;. (&amp;ldquo;repeatString&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given a string and a number, &amp;ldquo;repeatString&amp;rdquo; returns the given string repeated the given number of times. (문자열과 숫자가 주어졌을때, &amp;ldquo;repeatString&amp;rdquo; 함수는 주어진 문자열을 주어진 숫자만큼 반복하여 반환해야 합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;my_answer&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
function repeatString(string, num) {
// your code here
var repeatation = string.repeat(num) 
return repeatation;
}

repeatString(&amp;quot;thewordofGod is the way&amp;quot;,50)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;string-findshortestofthreewords&#34;&gt;string : findShortestOfThreeWords&lt;/h2&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;findShortestOfThreeWords&amp;rdquo;. (&amp;ldquo;findShortestOfThreeWords&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given 3 strings, &amp;ldquo;findShortestOfThreeWords&amp;rdquo; returns the shortest of the given strings. (문자열 3개가 주어졌을때, &amp;ldquo;findShortestOfThreeWords&amp;rdquo; 함수는 주어진 문자열 중 가장 짧은 문자열을 반환해야 합니다.)&lt;/p&gt;

&lt;p&gt;If there are ties, it should return the first word in the parameters list. (만약 동률이 있다면, 그 중 앞에 있는 문자열을 반환해야 합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;my_answer&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function findShortestOfThreeWords(word1, word2, word3) {
// your code here
if ( word1.length &amp;lt; word2.length &amp;amp;&amp;amp; word3.length ) {
return word1;
} else if (word1.length === word2.length &amp;amp;&amp;amp; word3.length){
return word1;
} else if ( word2.length &amp;lt; word1.length &amp;amp;&amp;amp; word3.length ){
return word2;
} else if ( word3.length &amp;lt; word2.length &amp;amp;&amp;amp; word1.length ) {
return word3;
}
}

findShortestOfThreeWords(&amp;quot;111&amp;quot;,&amp;quot;222&amp;quot;,&amp;quot;333333333&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;string-countcharacter&#34;&gt;string : countCharacter&lt;/h2&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;countCharacter&amp;rdquo;. (&amp;ldquo;countCharacter&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given a string input and a character, &amp;ldquo;countCharacter&amp;rdquo; returns the number of occurences of a given character in the given string. (문자열과 문자가 주어졌을때, &amp;ldquo;countCharacter&amp;rdquo; 함수는 주어진 문자열에서 주어진 문자가 몇개가 있는지를 반환해야 합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;my_answer&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
function countCharacter(str, char) {
// your code here
let countRet = 0;
for ( let i = 0; i &amp;lt; str.length; i = i + 1 ) {
if ( str.charAt(i) === char ) {
  countRet = countRet + 1 ;
}
}
return countRet;
}

countCharacter(&amp;quot;hello&amp;quot;, &amp;quot;l&amp;quot; );



&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;string-arevalidcredentials&#34;&gt;string : areValidCredentials&lt;/h2&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;areValidCredentials&amp;rdquo;. (&amp;ldquo;areValidCredentials&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given a name and a password, &amp;ldquo;areValidCredentials&amp;rdquo;, returns true if the name is longer than 3 characters, AND, the password is at least 8 characters long. Otherwise it returns false. (이름과 비밀번호가 주어졌을때, &amp;ldquo;areValidCredentials&amp;rdquo; 함수는 이름이 3글자이상 그리고 비밀번호가 8글자 이상이면 true를 반환합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;my_answer&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ex1&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function findMinLengthOfThreeWords(word1, word2, word3) {
// your code here
if (word1.length === (word2.length &amp;amp;&amp;amp; word3.length)){
return word1.length
} else if (word1.length &amp;lt; (word2.length &amp;amp;&amp;amp; word3.length)){
return word1.length;
} else if (word2.length &amp;lt; (word1.length &amp;amp;&amp;amp; word3.length) ){
return word2.length;
} else if (word3.length &amp;lt; (word1.length &amp;amp;&amp;amp; word2.length) ){
return word3.length;
}
}

findMinLengthOfThreeWords(&amp;quot;111&amp;quot;,&amp;quot;2222&amp;quot;,&amp;quot;33333&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ex2&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
function findMinLengthOfThreeWords(word1, word2, word3) {
var arr = [];
arr.push(word1, word2, word3);
arr.sort();
return arr[0].length;
}
findMinLengthOfThreeWords(&amp;quot;dwdsdsdsdsdsdsdwd&amp;quot;,&amp;quot;ddwwd&amp;quot;,&amp;quot;wdwdwdsdsdwdwwd&amp;quot;)

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ex3&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function findMinLengthOfThreeWords(word1, word2, word3) {
// your code here
/* START SOLUTION */
words = [word1, word2, word3];
return words.sort()[0].length;
/* END SOLUTION */
}

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ex4&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
function findMinLengthOfThreeWords(word1, word2, word3) {
return Math.min(word1.length, word2.length, word3.length)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;math-computeareaofatriangle&#34;&gt;Math : computeAreaOfATriangle&lt;/h2&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;Given the base and height of a triangle, &amp;ldquo;computeAreaOfATriangle&amp;rdquo; returns its area. (삼각형의 밑변과 높이가 주어졌을때, &amp;ldquo;computeAreaOfATriangle&amp;rdquo; 함수는 삼각형의 넓이를 반환합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;my_answer&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function computeAreaOfATriangle(base, height) {
// your code here
let ret = base * height / 2;
return ret;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;math-computeperimeterofacircle&#34;&gt;Math : computePerimeterOfACircle&lt;/h2&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;computePerimeterOfACircle&amp;rdquo;. (&amp;ldquo;computePerimeterOfACircle&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given the radius of a circle, &amp;ldquo;computePerimeterOfACircle&amp;rdquo; returns its perimeter. (원의 반지름이 주어졌을때, &amp;ldquo;computePerimeterOfACircle&amp;rdquo; 함수는 원의 둘레를 반환하세요.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;my_answer&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
function computePerimeterOfACircle(radius) {
// your code here\
//원의 둘레 = 2 X 반지름 X 원주율 = 지름 X 원주율
let ret = radius * 2 * Math.PI;
return ret;
}

computePerimeterOfACircle(200);


&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;math-computeaverageofnumbers&#34;&gt;Math : computeAverageOfNumbers&lt;/h2&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;computeAverageOfNumbers&amp;rdquo;. (&amp;ldquo;computeAverageOfNumbers&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given an array of numbers, &amp;ldquo;computeAverageOfNumbers&amp;rdquo; returns their average. (숫자이 배열이 주어졌을때, &amp;ldquo;computeAverageOfNumbers&amp;rdquo; 함수는 그들의 평균을 반환합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;my_answer&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function computeAverageOfNumbers(nums) {
// your code here
let sum = 0;
if ( nums.length === 0 ) {
return 0;
}
for (let i = 0; i &amp;lt; nums.length; i = i + 1 ){
sum = sum + nums[i]
}
return sum / nums.length; 
}
computeAverageOfNumbers[1,2,3,4,5,6];

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;type&#34;&gt;&lt;strong&gt;type&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;01_convertToString&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;convertToString함수가 있습니다. 이 함수는 주어진 파라미터를 문자열의 형태로 변환합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;my_answer&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
function convertToString(anything) {
// 여기에 코드를 작성하세요
return anything.toString();
// return &amp;quot;&amp;quot; + anything;
// return String(anything);
}

convertToString(&#39;hello&#39;)




&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;02_convertToNumber&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;convertToNumber함수가 있습니다. 이 함수는 주어진 파라미터를 숫자의 형태로 변환합니다.&lt;/p&gt;

&lt;p&gt;숫자로 변환할 수 없는 경우, NaN (Not a number) 이라는 결과가 나올것입니다. NaN은 숫자가 아님을 나타내는 특수한 값으로, 문자열이 아닙니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;
function convertToNumber(anything) {
  anything = Number(anything);
  
  if(!anything){
    return NaN;
  }else{
    return anything;
  }
}
convertToNumber(&#39;hello&#39;)



&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;03_isFalsy&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;isFalsy함수가 있습니다. falsy 값은, 거짓으로 취급되는 값을 의미합니다. 이 함수는 주어진 파라미터가 falsy값인지 아닌지를 평가합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;my_answer&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
function isFalsy(anything) {
// 여기에 코드를 작성하세요
if ( typeof anything === &#39;undefined&#39; ) {
  return true;
} else if (!anything) {
  return true;
} else if ( anything === null ) {
  return true;
} else if ( anything === 0 ) {
  return true;
} else if (anything === NaN ) {
  return true;
} else if ( anything === &#39;&#39; ) {
  return true;
} else {
  return false;
}
} 

isFalsy(&#39;hello&#39;);

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;04_getType&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;getType함수가 있습니다. 이 함수는 주어진 파라미터의 타입을 리턴합니다.&lt;/p&gt;

&lt;p&gt;Note:
배열을 넘길 경우, &amp;lsquo;object&amp;rsquo;라고 나올 수 있습니다. 배열과 객체는 어떻게 구분할 수 있을까요?
배열과 객체를 구분하려면 Array.isArray 메소드를 사용하면 됩니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;my_answer&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
function getType(anything) {
// 여기에 코드를 작성하세요
// if 문을 사용해서 문자,숫자, boolean , arry, object 을 구분하는 것을 사용한다.
if (Array.isArray(anything) === true ) {
return &#39;array&#39;
} else 
return typeof anything;
}


getType([1,2,3,4])

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;object&#34;&gt;&lt;strong&gt;object&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;01_getProperty&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;파라미터로 객체와 키를 받는 getProperty함수가 있습니다. 이 함수는 주어진 객체와 키를 이용하여 속성값을 찾아 리턴합니다.
만일 주어진 키가 객체의 속성에 없다면, undefined를 리턴하면 됩니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;my_answer&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
function getProperty(obj, propertyName) {
return obj[propertyName];
}
let person = {
name: &#39;Steve&#39;,
age: 16
};

getProperty(person,&amp;quot;name&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;02_addProperty&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;파라미터로 객체와 키를 받는 addProperty 함수가 있습니다. 이 함수는 주어진 객체에, 키 이름으로 속성을 만들고 값을 true로 설정합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;my_answer&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function addProperty(obj, propertyName) {
// 여기에 코드를 작성하세요
return obj[propertyName] = true;
// return obj.propertyNmae = true; &amp;lt;&amp;lt;&amp;lt;is not working at all
}

let john = {};

addProperty(john,&#39;isprogrammer&#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Q&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;obj[propertyName]를 이용했을 때는 테스트가 통과가 되고,
obj.propertyName를 이용했을 때는 통과가 되지 않습니다.
객체에 프로퍼티를 추가할 때 dot노테이션을 사용할 수 있는 걸로 알고있는데..이유가 뭘까요?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;answer&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;. 으로 했을때는 바로 객체의 키로 접근하고 [ ] 으로 하면 변수로 접근합니다.
addProperty(steve, &amp;lsquo;isProgrammer&amp;rsquo;); 이라는 함수 호출 구문이 있다고 가정하면
obj[propertyName] = true; 는 steve.isProgrammer = true; 이고
obj.propertyName = true; 는 steve.propertyName = true; 입니다. 완전히 다른값이 나오죠?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;04_addObjectProperty&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;파라미터로 두 개의 객체와 키를 받는 addObjectProperty 함수가 있습니다. 이 함수는 주어진 첫번째 객체에, 키 이름으로 속성을 만드는데, 그 값은 두번째 객체로 설정합니다.
객체의 키 값은 또다른 객체가 될 수 있음을 기억하세요.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;my_answer&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
function addObjectProperty(obj1, propertyName, obj2) {
// 여기에 코드를 작성합니다.
obj1[propertyName] = obj2; 
return obj1;
}
let person1 = {
name: &#39;Joe&#39;,
role: &#39;Team Member&#39;
};
let person2 = {
name: &#39;Steve&#39;,
role: &#39;CEO&#39;
};


addObjectProperty(person1, &#39;manager&#39;, person2);


&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;05_removeProperty&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;removeProperty&amp;rdquo;. (&amp;ldquo;removeProperty&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given an object and a key, &amp;ldquo;removeProperty&amp;rdquo; removes the given key from the given object. (객체와 키가 주어졌을때, &amp;ldquo;removeProperty&amp;rdquo; 함수는 주어진 키에 해당하는 객체의 속성값을 제거해야 합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;my_answer&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
function removeProperty(obj, propertyName) {
// 여기에 코드를 작성하세요
delete obj[propertyName];
}

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;06_isPersonOldEnoughToVote&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;isPersonOldEnoughToVote&amp;rdquo;. (&amp;ldquo;isPersonOldEnoughToVote&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given a &amp;ldquo;person&amp;rdquo; object, that contains an &amp;ldquo;age&amp;rdquo; property, &amp;ldquo;isPersonOldEnoughToVote&amp;rdquo; returns whether the given person is old enough to vote. (&amp;ldquo;age&amp;rdquo; 속성을 가지고 있는 &amp;ldquo;person&amp;rdquo; 객체가 주어졌을때, &amp;ldquo;isPersonOldEnoughToVote&amp;rdquo; 함수는 그 사람이 미국에서 합법적으로 투표를 할 수 있는 나이인지를 반환해야 합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;
function isPersonOldEnoughToVote(person) {
  // your code here
  // 1. if 사용해서 18세 이상일 경우 리턴 참
  // 2. 아닐경우 거짓
  if ( person.age &amp;gt;= 18 ) {
    return true;
  } else {
    return false;
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;08_removeNumbersLargerThan&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;removeNumbersLargerThan&amp;rdquo;. (&amp;ldquo;removeNumbersLargerThan&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given a number and an object, &amp;ldquo;removeNumbersLargerThan&amp;rdquo; removes any properties whose values are numbers greater than the given number. (숫자와 객체가 주어졌을때, &amp;ldquo;removeNumbersLargerThan&amp;rdquo; 함수는 주어진 객체에서 주어진 숫자보다 큰 모든 숫자 속성을 제거합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;my_answer&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let obj = {
a: 8,
b: 2,
c: &#39;montana&#39;,
d: 10,
e: 4,
f: 5
}

function removeNumbersLargerThan(num, obj) {
// your code here
for (let key in obj){
if ( obj[key] &amp;gt; num ) {
delete obj[key];
}
}
return obj;
}

removeNumbersLargerThan(3,obj)

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;09_removeOddValues&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;removeOddValues&amp;rdquo;. (&amp;ldquo;removeOddValues&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given an object, &amp;ldquo;removeOddValues&amp;rdquo; removes any properties whose values are odd numbers. (객체가 주어졌을때, &amp;ldquo;removeOddValues&amp;rdquo; 함수는 주어진 객체의 속성값이 홀수인 속성을 모두 제거합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;my_answer&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let obj = {
a: 2,
b: 3,
c: 4,
d: 7
};
function removeOddValues(obj) {
// your code here
// 1. value 을 불러온다
// 2. value 홀수 있지 짝수 인지 구분한다.
// 3. value 가 홀수 일때 삭제한다.
for ( let key in obj ) {
if ( obj[key] % 2 === 1 ) {
  delete obj[key];
}
}
return obj;
}
removeOddValues(obj)


&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;10_countNumberOfKeys&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;countNumberOfKeys&amp;rdquo;. (&amp;ldquo;countNumberOfKeus&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given an object, &amp;ldquo;countNumberOfKeys&amp;rdquo; returns how many properties the given object has. (객체가 주어졌을때, &amp;ldquo;countNumberOfKeys&amp;rdquo; 함수는 객체안에 있는 속성들의 갯수를 반환합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;my_answer&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function countNumberOfKeys(obj) {
// 여기에 코드를 작성하세요
// 1.숫자출력할 변수를 0으로 초기화한다.
// 2.for 문을 이용해 객체를 나열한다.
// 3. 나열한 객체를 변수안에 넣는다.
let count = 0;
for ( let key in obj ) {
count = count + 1 ;
}
return count;
}

let obj = {
a: 1,
b: 2,
c: 3,
d: 4
};
countNumberOfKeys(obj)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Model Solutions&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
function countNumberOfKeys(obj) {
return Object.keys(obj).length;
}


&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;11_printObject&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;객체를 파라미터로 받는 printObject 함수는 객체 안에 정의된 키와 값 쌍을 조합한 문자열을 리턴합니다. 문자열은 한 줄에 하나의 키/값 쌍을 콜론(:) 및 공백문자와 함께 표시하며, 또다른 키/값 쌍 사이에는 줄바꿈 문자가 포함되어 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;my_answer&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
let obj = { name: &#39;Steve&#39;, age: 13, sex: &#39;Male&#39; };

function printObject(obj) {
let ret = &amp;quot;&amp;quot;
for ( let key in obj ) {
ret = ret + key +&amp;quot;: &amp;quot; + obj[key]+ &amp;quot;\n&amp;quot;;
}
return ret;
};
printObject(obj);

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;12_extends&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;extend&amp;rdquo;. (&amp;ldquo;extend&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given two objects, &amp;ldquo;extend&amp;rdquo; adds properties from the 2nd object to the 1st object. (객체 두개가 주어졌을때, &amp;ldquo;extend&amp;rdquo; 함수는 두번째 객체의 속성을 첫번째 객체에 추가해야 합니다.)&lt;/p&gt;

&lt;p&gt;Add any keys that are not in the 1st object. (첫번째 객체에 없는 모든 키를 추가하세요.)&lt;/p&gt;

&lt;p&gt;If the 1st object already has a given key, ignore it (do not overwrite the property value). (만약 첫번째 객체에 이미 있는 키라면, 값을 덮어쓰지 말고 무시하세요.)&lt;/p&gt;

&lt;p&gt;Do not modify the 2nd object at all. (두번째 객체는 수정하지 마세요.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;et obj1 = {
  a: 1,
  b: 2
};
let obj2 = {
  b: 4,
  c: 3
};

function extend(obj1, obj2) {
  // 여기에 코드를 작성하세요
  // 1. obj2 의 key들을 반복합니다.
  // 2. obj2 안에 있는 key 가  obj1 key 안에에 포함 되어있는지 if 문을 써서 확인한다.
  // 4. 포함되어있지 않으면 ob1에 추가한다.
  for ( let key in obj2 ) {
      if (!( key in obj1 )) {
        obj1[key] = obj2[key];
      }
    }
  }
  

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;13_countAllCharacters&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;countAllCharacters&amp;rdquo;. (&amp;ldquo;countAllCharacters&amp;rdquo; 함수를 작성하세요&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;Given a string, &amp;ldquo;countAllCharacters&amp;rdquo; returns an object where each key is a character in the given string. The value of each key should be how many times each character appeared in the given string. (문자열이 주어졌을때, &amp;ldquo;countAllCharacters&amp;rdquo; 함수는 주어진 문자열의 각각의 문자를 키로 가지는 객체를 반환합니다. 각 키의 값은 해당 문자가 주어진 문자열에서 몇번 나오는지를 나타냅니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;
function countAllCharacters(str) {
  let obj = {};
  for (let i = 0; i &amp;lt; str.length; i++) { // input으로 받은 문자열에서 하나의 character씩 loop를 돕니다.
    
    if (obj[str[i]] === undefined) { 
// 그런데 obj란 객체에 character가 들어 있지 않다면 새로운 문자열이기 때문에 객체에 char를 추가하고 0으로 만들어 줍니다.
      obj[str[i]] = 0;
    }
    obj[str[i]]++;  // 그 이후 이 곳에서 char key의 value 값을 1 더해줍니다.
  }
  return obj;
}

let output = countAllCharacters(&#39;banana&#39;);
console.log(output); // --&amp;gt; {b: 1, a: 3, n: 2}


&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;object-and-type&#34;&gt;&lt;strong&gt;object and type&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;01_removeStringValues&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;removeStringValues&amp;rdquo;. (&amp;ldquo;removeStringValues&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given an object, &amp;ldquo;removeStringValues&amp;rdquo; removes any properties on the given object whose values are strings. (객체가 주어졌을때, &amp;ldquo;removeStringValues&amp;rdquo; 함수는 속성값이 문자열인 모든 속성을 제거합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;my_answer&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;
function removeStringValues(obj) {
  // 여기에 코드를 작성하세요.
  // 객체안에 있는 속성값이 문자열인지 판별한다.
  // 문자열이라면 삭제한다.
  for ( let prop in obj ) {
    if ( typeof obj[prop] === &amp;quot;string&amp;quot; ) {
      delete obj[prop]
    }
  }
}



&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;02_removeNumberValues&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;removeNumberValues&amp;rdquo;. (&amp;ldquo;removeNumberValues&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given an object, &amp;ldquo;removeNumberValues&amp;rdquo; removes any properties whose values are numbers. (객체가 주어졌을때, &amp;ldquo;removeNumberValues&amp;rdquo; 함수는 속성값이 숫자인 모든 속성을 제거합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;let obj = {
  a: 2,
  b: &#39;remaining&#39;,
  c: 4
};
function removeNumberValues(obj) {
  // 여기에 코드를 작성하세요.
  // prop 을 불러온다.
  // 불러온 prop 값을 숫자인지 판별한다/
  // 숫자이면 제거한다
  for ( let prop in obj ) {
    if ( typeof obj[prop] === &amp;quot;number&amp;quot; ) {
      delete obj[prop]
    }
  } 
  return obj;
}

removeNumberValues(obj);

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;03_removeArrayValues&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;removeArrayValues&amp;rdquo;. (&amp;ldquo;removeArrayValues&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given an object, &amp;ldquo;removeArrayValues&amp;rdquo; removes any properties whose values are arrays. (객체가 주어졌을때, &amp;ldquo;removeArrayValues&amp;rdquo; 함수는 속성값이 배열인 모든 속성을 제거합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;
let obj = {
  a: [1, 3, 4],
  b: 2,
  c: [&#39;hi&#39;, &#39;there&#39;]
}
function removeArrayValues(obj) {
  // 여기에 코드를 작성하세요
  // prop 값을 불러온다
  // prop 값이 배열에 속하는지 판별한다
  // 배열에 속하면 제거한다.
  for ( let prop in obj ) {
    if (Array.isArray(obj[prop])) {
      delete obj[prop];
    }
  }
  return obj
}
removeArrayValues(obj)



&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;array&#34;&gt;&lt;strong&gt;array&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;01_getFirstElement&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;getFirstElement&amp;rdquo;. (&amp;ldquo;getFirstElement&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given an array, &amp;ldquo;getFirstElement&amp;rdquo; returns the first element of the given array. (배열이 주어졌을때, &amp;ldquo;getFirstElement&amp;rdquo; 함수는 주어진 배열의 첫번째 요소를 반환해야 합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;my_answer&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
function getFirstElement(array) {
// 여기에 코드를 작성하세요.
// 배열을 0번째 숫자를 불러온다.
if ( array.length === 0 ) {
return undefined;
} else
return array[0];
}

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;02_getLastElement&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;getLastElement&amp;rdquo;. (&amp;ldquo;getLastElement&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given an array, &amp;ldquo;getLastElement&amp;rdquo; returns the last element of the given array. (배열이 주어졌을때, &amp;ldquo;getLastElemeent&amp;rdquo; 함수는 주어진 배열의 마지막 요소를 반환해야 합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;my_answer&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
function getLastElement(array) {
// 여기에 코드를 작성하세요
// 만약 배열의 길이가 0 이라면 undefinded 출력
// 아니라면 return 마지막 배열숫자 출력
if ( array.length === 0 ) {
return undefined;
} else {
let lastNum = array[array.length -1]
return lastNum;
}
}

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;03_getNthElement&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;getNthElement&amp;rdquo;. (&amp;ldquo;getNthElement&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given an array and an integer, &amp;ldquo;getNthElement&amp;rdquo; returns the element at the given integer, within the given array. (배열과 숫자가 주어졌을때, &amp;ldquo;getNthElement&amp;rdquo; 함수는 주어진 배열에서 n번 인덱스의 요소를 반환해야 합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;
function getNthElement(array, n) {
  // 여기에 코드를 작성하세요
  // 만약 배열에 길이가 0보다 크면 코드 진행실행 아니면 undefinded
  // 배열에 n번째 있는 숫자를 변수에 저장
  // 배열안에 있는 n 번째의 숫자 출력
  if ( array.length &amp;gt; 0 ) {
    let ret = array[n];
    return ret;
  } else {
    return undefined;
  }
}



&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;04_addToFront&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;addToFront&amp;rdquo;. (&amp;ldquo;addToFront&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given an array and an element, &amp;ldquo;addToFront&amp;rdquo; adds the given element to the front of the given array, and returns the given array. (배열과 요소가 주어졌을때, &amp;ldquo;addToFront&amp;rdquo; 함수는 주어진 요소를 배열의 맨앞에 추가하고 주어진 배열을 반환해야 합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;my_answer&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;

function addToFront(arr, element) {
arr.unshift(element);
return arr;
}




&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;05_addToBack&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;addToBack&amp;rdquo;. (&amp;ldquo;addToBack&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given an array and an element, &amp;ldquo;addToBack&amp;rdquo; returns the given array with the given element added to the end. (배열과 요소가 주어졌을때, &amp;ldquo;addToBack&amp;rdquo; 함수는 주어진 요소를 배열의 맨뒤에 추가하고 주어진 배열을 반환해야 합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;my_ answer&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;
function addToBack(arr, element) {
  // 여기에 코드를 작성하세요.
  // push 사용해 element 값을 뒤에 추가한다.
  arr.push(element);
  return arr;
}


&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;06_joinArrays&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;joinArrays&amp;rdquo;. (&amp;ldquo;joinArrays&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given two arrays, &amp;ldquo;joinArrays&amp;rdquo; returns an array with the elements of &amp;ldquo;arr1&amp;rdquo; in order, followed by the elementsin &amp;ldquo;arr2&amp;rdquo;. (두 배열이 주어졌을때, &amp;ldquo;joinArrays&amp;rdquo; 함수는 첫번째 배열(arr1)과 두번째 배열(arr2) 순서로 합쳐진 배열을 반환해야 합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;function joinArrays(arr1, arr2) {
  // your code here
  // 변수를 만들어 배열1에 배열2를 집어넣는다.
  // 출력한다.
  let arrRet = arr1.concat(arr2);
  return arrRet
  
}


&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;07_getElementsAfter&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;getElementsAfter&amp;rdquo;. (&amp;ldquo;getElementsAfter&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given an array and an index, &amp;ldquo;getElementsAfter&amp;rdquo; returns a new array with all the elements after (but not including) the given index. (배열과 인덱스가 주어졌을때, &amp;ldquo;getElementsAfter&amp;rdquo; 함수는 주어진 배열의 인덱스 이후 요소들을 (자신은 포함하지 않고) 새로운 배열로 반환해야 합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;function getElementsAfter(array, n) {
  // your code here
  // 새로운 빈배열을 만든다.
  // 초기값을 n+1을 한 for 문을 이용해 배열인덱스를 불러온다.
  // 불러온 값을 새로운 배열에 push를 사용해 담는다.
  // 출력한다.
  let newArr = [];
  for (let i = n + 1;  i &amp;lt; array.length; i = i + 1 ) {
    newArr.push(array[i]);
  }
  return newArr;
}
getElementsAfter([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;], 1);


&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;08_getElementsUpTo&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;getElementsUpTo&amp;rdquo;. (&amp;ldquo;getElementsUpTo&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given an array and a index, &amp;ldquo;getElementsUpTo&amp;rdquo;, returns an array with all the elements up until, but not including, the element at the given index. (배열과 인덱스가 주어졌을때, &amp;ldquo;getElementsUpTo&amp;rdquo; 함수는 주어진 배열의 인덱스 이전 요소들을 (자신은 포함하지 않고) 새로운 배열로 반환해야 합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;my_answer&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;
function getElementsUpTo(array, n) {
  let newArr = array.slice(0,n);
  return newArr
}
getElementsUpTo([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;], 3);


&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;09_getAllElementsButFirst&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;getAllElementsButFirst&amp;rdquo;. (&amp;ldquo;getAllElementsButFirst&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given an array, &amp;ldquo;getAllElementsButFirst&amp;rdquo; returns an array with all the elements but the first. (배열이 주어졌을때, &amp;ldquo;getAllElementsButFirst&amp;rdquo; 함수는 첫번째 요소를 제외한 배열을 반환해야 합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;my_answer&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;
function getAllElementsButFirst(array) {
  // your code here
  // shift 를 이용해서 앞에 있는 요소를 뺀다.
  // 그리고 기존에 배열을 출력한다. 
  array.shift();
  return array;
}

getAllElementsButFirst([1,2,3,4])


&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;model solution&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;

function getAllElementsButFirst(array) {
  return array.slice(1, array.length);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;10_getAllElementsButLast&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;getAllElementsButLast&amp;rdquo;. (&amp;ldquo;getAllElementsButLast&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given an array, &amp;ldquo;getAllElementsButLast&amp;rdquo; returns an array with all the elements but the last. (배열이 주어졌을때, &amp;ldquo;getAllElementsButLast&amp;rdquo; 함수는 마지막 요소를 제외한 배열을 반환해야 합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;my_answer&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
function getAllElementsButLast(array) {
  // your code here
  // slice 를 이용해서 마지막 숫자를 삭제한다.
  // 출력한다.
  array.pop()
  return array
}



&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;11_removeFromFront&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;removeFromFront&amp;rdquo;. (&amp;ldquo;removeFromFront&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given an array, &amp;ldquo;removeFromFront&amp;rdquo; returns the given array with its first element removed. (배열이 주어졌을때, &amp;ldquo;removeFromFront&amp;rdquo; 함수는 첫번째 요소를 삭제한 주어진 배열을 반환해야 합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;my_answer&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
function removeFromFront(arr) {
  // your code here
  // 메소드 사용해서 첫번째요소 자르기 
  arr.shift();
  return arr;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;12_removeFromBack&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;removeFromBack&amp;rdquo;. (&amp;ldquo;removeFromBack&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given an array, &amp;ldquo;removeFromBack&amp;rdquo; returns the given array with its last element removed. (배열이 주어졌을때, &amp;ldquo;removeFromBack&amp;rdquo; 함수는 마지막 요소를 삭제한 주어진 배열을 반환해야 합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;my_answer&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
function removeFromBack(arr) {
  // your code here
  //배열 메소드 이용해서 뒤에 있는거 자르기
  arr.pop();
  return arr;
}


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;13_removeFromBackOfNew&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;removeFromBackOfNew&amp;rdquo;. (&amp;ldquo;removeFromBackOfNew&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given an array, &amp;ldquo;removeFromBackOfNew&amp;rdquo; returns a new array containing all but the last element of the given array. (배열이 주어졌을때, &amp;ldquo;removeFromBackOfNew&amp;rdquo; 함수는 마지막 요소를 제외한 모든 요소를 가지고 있는 새로운 배열을 반환해야 합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;my_answer&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
function removeFromBackOfNew(arr) {
  // your code here
  // 빈 배열을 만든다. 
  // 배열을 가져오는데 length를 이용해 마지막숫자를 뺀수를 가져온다
  // 가져온 숫자를 새로운 배열에 넣는다. 
  // arrNew 를 출력한다. 
  let arrNew = [];
  for (let i = 0; i &amp;lt; arr.length -1; i = i + 1 ) {
    arrNew.push(arr[i]);
  }
  return arrNew
  }


&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;model solution&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function removeFromBackOfNew(arr) {
  // your code here
  // 마지막 숫자를 뺀 배열값을 변수에 담는다.
  // 담은 변수를 출력한다.
  let sliced = arr.slice(0,arr.length-1)
  return sliced; 
  
  }

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;14_addToBackOfNew&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;addToBackNew&amp;rdquo;. (&amp;ldquo;addToBackNew&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given an array and an element, &amp;ldquo;addToBackNew&amp;rdquo; returns a clone of the given array, with the given element added to the end. (배열과 요소가 주어졌을때, &amp;ldquo;addToBackNew&amp;rdquo; 함수는 주어진 배열의 복사본 끝에 주어진 요소가 추가된 배열을 반환합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;my_answer&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;

function addToBackOfNew(arr, element) {
  // your code here
  arr = arr.concat(element);
  return arr;
  }
  
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;model soultion&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
function addToBackOfNew(arr, element) {
  const newArr = arr.slice();
  newArr.push(element);
  return newArr;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;16_joinArrayOfArrays&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;joinArrayOfArrays&amp;rdquo;. (&amp;ldquo;joinArrayOfArrays&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given an array of arrays, &amp;ldquo;joinArrayOfArrays&amp;rdquo; returns a single array containing the elements of the nested arrays. (배열들의 배열이 주어졌을때, &amp;ldquo;joinArrayOfArrays&amp;rdquo; 함수는 배열들의 요소를 모두 담고 있는 단일 배열을 반환합니다.)&lt;/p&gt;

&lt;p&gt;it is used by reduce and concat&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
function joinArrayOfArrays(arr) {

  output = arr.reduce(function(acc,cur) {
    return acc.concat(cur); 
    })
    return output;
  }


&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;My_Soultion&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;18_getAllLetters&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;getAllLetters&amp;rdquo;. (&amp;ldquo;getAllLetters&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given a word, &amp;ldquo;getAllLetters&amp;rdquo; returns an array containing every character in the word. (단어가 주어졌을때, &amp;ldquo;getAllLetters&amp;rdquo; 함수는 주어진 단어에 포함된 모든 문자를 담고 있는 배열을 반환합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;my_answer&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function getAllLetters(str) {
  // your code here
  // 만약 빈문자 열이라면 빈 배열을 리턴한다.
  // 만약 빈배열이 아니라면 문자를 split method 사용한다.
  if ( str === &amp;quot;&amp;quot; ) {
    return str = [];
  } else {
    return str.split(&amp;quot;&amp;quot;)
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;19_getAllWords&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;getAllWords&amp;rdquo;. (&amp;ldquo;getAllWords&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given a sentence, &amp;ldquo;getAllWords&amp;rdquo; returns an array containing every word in the sentence. (문장이 주어졌을때, &amp;ldquo;getAllWords&amp;rdquo; 함수는 주어진 문장에 포함된 모든 단어를 담고 있는 배열을 반환합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;my_answer&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt; 
 
 function getAllWords(str) {
  if (str === &#39;&#39;) {
    return [];
  } else {
    return str.split(&#39; &#39;);
  }
}

 
 
 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;21_removeElement&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;removeElement&amp;rdquo;. (&amp;ldquo;removeElement&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given an array of elements, and a &amp;ldquo;discarder&amp;rdquo; parameter, &amp;ldquo;removeElement&amp;rdquo; returns an array containing the items in the given array that do not match the &amp;ldquo;discarder&amp;rdquo; parameter. (배열과 &amp;ldquo;discarder&amp;rdquo; 매개변수가 주어졌을때, &amp;ldquo;removeElement&amp;rdquo; 함수는 주어진 배열에서 &amp;ldquo;discarder&amp;rdquo; 매개변수와 일치하지 않는 모든 요소를 포함하는 배열을 반환합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;my_answer&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;

unction removeElement(array, discarder) {
  // your code here
   /* 
  1. 빈배열이면 빈배열을 반환
  2. 새로운 빈배열을 만든다. newArr
  3. 모든 element를 조사한다.
  4. element가 discarder와 다르다면 newArr에 push로 넣는다.
  5. 위에경우가 아니라면 newArr을 반환
   */

  if ( array === [] ) {
    return [];
  }
  let newArr = [];
  for (let i = 0; i &amp;lt; array.length; i = i + 1 ) {
    if ( discarder !== array[i] ) {
      newArr.push(array[i])
    } 
  }
  return newArr;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;22_keep&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;keep&amp;rdquo;. (&amp;ldquo;keep&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given an array and a keeper element, &amp;ldquo;keep&amp;rdquo; returns an array containing the items that match the given keeper element. (배열과 &amp;ldquo;keeper&amp;rdquo; 매개변수가 주어졌을때, &amp;ldquo;keep&amp;rdquo; 함수는 &amp;ldquo;keeper&amp;rdquo; 매개변수와 일치하는 모든 요소&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;my_answer&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function keep(array, keeper) {
  // your code here
  // 만약 배열이 비워있다면 빈배열 리턴
  // 새로운 빈배열을 만든다.
  // for 문을 사용해 배열을 조사
  // 만약 keeper라는 매개변수가 있는지 조사
  // 만약 있다면 push를 사용해 새로운 배열에 투입
  // 새로운 배열 출력
  if ( array === []) {
    return [];
  }
  let newArr = [];
  for ( let i = 0; i &amp;lt; array.length; i = i + 1 ) {
    if ( array[i] === keeper ) {
      newArr.push(array[i]);
    }
  }
  return newArr;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;23_findSmallestElement&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;findSmallestElement&amp;rdquo;. (&amp;ldquo;findSmallestElement&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given an array of numbers, &amp;ldquo;findSmallestElement&amp;rdquo; returns the smallest number within the given array. (숫자의 배열이 주어졌을때, &amp;ldquo;findSmallestElement&amp;rdquo; 함수는 주어진 배열에서 가장 작은 수를 반환합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;My_solution&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;It is used by sort();&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;


function findSmallestElement(arr) {

  만약 arr 비워있다면 빈배열 리턴
  메소드 slice()이용해 복사 
  복사한 배열을 sort()를 이용해 작은숫자가 앞으로 올수 있도록 정렬
  0번째 있는 요소 출력


  if ( arr.length === 0 ){ 
    return 0;
  }
  let newArr = arr.slice();
  let sortArr = function(a,b) {
    return a-b;
  }
  newArr.sort(sortArr); 
  return newArr[0];
}

&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;It is used by reudce and if&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
function findSmallestElement(arr) {
  if (arr.length &amp;lt; 1) {  // satisfies Notes requirement
    return 0;
  }
  var newNum = arr[0];  // create number placeholder (start with first number of array)
  for (let i in arr) {  // iterate thru array
    if (arr[i] &amp;lt; newNum) {  // if element is larger than current placeholder number
      newNum = arr[i];  // make that element the new placeholder number
    }
  }
  return newNum;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;2.It is used by reudce and if ?????&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
function findSmallestElement(arr) {
  
  if(arr.length === 0) {
    return 0;
  } else {
    var smallestNum = arr.reduce(function(a,b) {
      return a &amp;lt; b ? a: b;
    });
    return smallestNum;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;1.it is used by reudce and Math method&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function findSmallestElement(arr) {

  if ( arr.length === 0 ) {
    return 0;
  }

  output = arr.reduce(function(acc,cur){
    return Math.min(acc,cur);

  })  
  return output;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;2it is used by reudce and Math method&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
function findSmallestElement(arr) {

  if ( arr.length === 0 ) {
    return 0;
  }

  return Math.min(...arr);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;24_computeSumOfAllElements&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;computeSumOfAllElements&amp;rdquo;. (&amp;ldquo;computeSumOfAllElements&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given an array of numbers, &amp;ldquo;computeSumOfAllElements&amp;rdquo; returns the sum of all the elements in the given array. (숫자의 배열이 주어졌을때, &amp;ldquo;computeSumOfAllElements&amp;rdquo; 함수는 주어진 배열의 모든 요소의 합을 반환합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;My_Solution&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function computeSumOfAllElements(arr) {
  
  // your code here.
  // 빈 배열을 만든다.
  // count 변수 초기화 한해서 만든다.
  // arr 안에 값들을 조사한다.
  // count 변수안에 조사한 값들을 더해서 넣는다.
  let sum = 0;
  for ( let i = 0; i &amp;lt; arr.length; i = i + 1 ) {
    sum = sum + arr[i];
  }
  return sum
}

&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;it used by reduce&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;

function computeSumOfAllElements(arr) {
  if ( arr.length === 0 ) {
    return 0;
  }
  return arr.reduce(function(acc,val){
    return acc + val;
  })
  
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;25_computeProductOfAllElements&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;computeProductOfAllElements&amp;rdquo;. (&amp;ldquo;computeProductOfAllElements&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given an array of numbers, &amp;ldquo;computeProductOfAllElements&amp;rdquo; returns the products of all the elements in the given array. (숫자의 배열이 주어졌을때, &amp;ldquo;computeProductOfAllElements&amp;rdquo; 함수는 주어진 배열의 모든 요소의 곱을 반환합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;My_Solution&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;



function computeProductOfAllElements(arr) {
  
  // 먄약 배열이 비워있다면 0 리턴;
  // 0으로 된 마지막에 출력할 변수 생성;
  // for 문을 사용해 배열안에 있는 요소 조사
  // 생성한 변수 안에 조사한 요소들을 곱셈하여 넣는다.
  // 변수 출려
  
  if ( arr.length === 0 ) {
    return 0;
  }
  let ret = 1;
  for ( let i = 0; i &amp;lt; arr.length; i = i + 1 ) {
    ret = ret * arr[i];
  } 
  return ret;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;It is used by redcue method&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function computeProductOfAllElements(arr) {
    
    
    if ( arr.length === 0 ) {
    return 0;
  }
  return arr.reduce(function(acc,cur) {
    return acc * cur;
  })

}


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;26_getLengthOfLongestElement&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;getLengthOfLongestElement&amp;rdquo;. (&amp;ldquo;getLengthOfLongestElement&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given an array, &amp;ldquo;getLengthOfLongestElement&amp;rdquo; returns the length of the longest string in the given array. (배열이 주어졌을때, &amp;ldquo;getLengthOfLongestElement&amp;rdquo; 함수는 주어진 배열에서 가장 긴 문자열의 길이를 반환합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;My_Solution&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;it is used by sort()&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;

function getLengthOfLongestElement(arr) {

  if ( arr.length === 0 ){
    return 0;
  } 
  sortArr = function (a, b) { 
    return b.length - a.length;
    }
    let ret = arr.sort(sortArr)[0]
    return ret.length;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;It is used by for loop and if&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
function getLengthOfLongestElement(arr) {
  
  if ( arr.length === 0 ) {
    return 0;
  } 

  let lgth = 0; // =&amp;gt; 3  =&amp;gt;5
  let longest;  // =&amp;gt;&amp;quot;one&amp;quot; =&amp;gt; &amp;quot;three&amp;quot; 
  
  for ( let i = 0; i &amp;lt; arr.length; i = i + 1) {
    if(arr[i].length &amp;gt; lgth) {
      // 첫번째 요소는 &amp;quot;one&amp;quot; 길이는 3 &amp;gt; 0
      // 두번째 요소는 &amp;quot;two&amp;quot; 길이는 3 &amp;gt; 3 : 실행이 안됨
      // 세번째 요소는 &amp;quot;three&amp;quot; 길이는 5 &amp;gt; 3 : 실행되면서 최종적으로 longest변수에 &amp;quot;three&amp;quot;가 담긴다. 
        lgth = arr[i].length;
        longest = arr[i].length;
    }      
  } 
  return longest;
}


&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;it is used by reduce method&lt;/p&gt;

&lt;p&gt;comment&lt;/p&gt;

&lt;p&gt;return a.length or return b.length 하면 안되는 이유. length를 리턴에 넣으면 다음  a 와 b.length의 길이를 비교하기 때문에 안되는거더라구요. 그래서 함수 밖에 붙여주면 숫자로 반환되는 거구요.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;


function getLengthOfLongestElement(arr) {

 
 return arr.reduce(function(a,b) {
      if (a.length &amp;gt;= b.length) {
        return a;
      } else {
        return b;
      }
  }).length
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;28_filterOddLengthWords&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;filterOddLengthWords&amp;rdquo;. (&amp;ldquo;filterOddLengthWords&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given an array of string, &amp;ldquo;filterOddLengthWords&amp;rdquo; returns an array containing only the elements of the given array whose lengths are odd numbers. (문자열의 배열이 주어졌을때, &amp;ldquo;filterOddLengthWords&amp;rdquo; 함수는 주어진 배열의 요소 중 문자열의 길이가 홀수인 문자열만을 요소로 가지는 배열을 반환합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;My_Soultion&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;


unction filterOddLengthWords(words) {

  // it passed test
  // it&#39;s good to practice useing filter 

  // your code here
  // output 빈 배열을 만든다.
  // for 문을 이용해 배열안에 있는 요소를 조사한다.
  // 만약 배열안에 있는 각각의 요소가 홀수라면 ture
  // ture 인 값을 output 배열에 넣는다.
  // 넣은 값을 출력한다.
  
  let output = [];
  for  ( let i = 0; i &amp;lt; words.length; i = i + 1 ) {
    if ( words[i].length % 2 !== 0 ) { 
      output.push(words[i]);
    }
  }
  return output;
}


&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;modle_Soultion&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;


// input: an array of strings
// output: return an array containing only the elements of the given array whose lengths are odd numbers

function filterOddLengthWords(arr) {  // HoF
  return arr.filter(function(i) {  // filters each even length elements to its own array
    return i.length % 2 !== 0;
  });
}


&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;array-object&#34;&gt;&lt;strong&gt;Array &amp;amp; object&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;01_getElementOfArrayProperty&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;getElementOfArrayProperty&amp;rdquo;. (&amp;ldquo;getElementOfArrayProperty&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given an object, a key, and a numerical index, &amp;ldquo;getElementOfArrayProperty&amp;rdquo; returns the value of the element at the given index of the array located within the given object at the given key. (객체와 키, 그리고 숫자로된 인덱스값이 주어졌을때, &amp;ldquo;getElementOfArrayProperty&amp;rdquo; 함수는 주어진 키에 위치한 배열의 인덱스에 해당하는 값을 반환합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;my_asnswer&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
function getElementOfArrayProperty(obj, key, index) {
  // your code here
 
   if (!Array.isArray(obj[key])){
    return undefined;
  } 
  return obj[key][index]; 
} 
let obj = {
  key: [&#39;Jamil&#39;, &#39;Albrey&#39;]
};

getElementOfArrayProperty(obj,&#39;key&#39;,0);


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;02_select&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;select&amp;rdquo;. (&amp;ldquo;select&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given an array and an object, &amp;ldquo;select&amp;rdquo; returns a new object whose properties are those in the given object AND whose keys are present in the given array. (배열과 객체가 주어졌을때, &amp;ldquo;select&amp;rdquo; 함수는 주어진 객체의 키값 중 주어진 배열에 포함된 키값만을 속성으로 가지는 새로운 배열을 반환합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
function select(arr, obj) {
  // your code here
  let newObj = {};
  for (let key in obj ) {
    for (let i = 0; i &amp;lt; arr.length; i = i + 1 ) {
      if (key === arr[i] ) {
       newObj[key] = obj[key]
      }

    }

  } 
  return newObj;
}


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;04_getNthElementOfProperty&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;getNthElementOfProperty&amp;rdquo;. (&amp;ldquo;getNthElementOfProperty&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given an object and a key, &amp;ldquo;getNthElementOfProperty&amp;rdquo; returns the nth element of an array located at the given key. (객체와 키가 주어졌을때, &amp;ldquo;getNthElementOfProperty&amp;rdquo; 함수는 주어진 키에 위차한 배열의 n번째 요소를 반환합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;my_answer&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
function getNthElementOfProperty(obj, key, n) {
  // your code here
  // 만약 주어진 키에 위차하는 속성값이 배열이 아니라면 undefinded 
  // 만약 그게 아니라면 주어진 키값의 인덱스 번호 리턴
  if ( !Array.isArray(obj[key])) {
    return undefined;
  } else {
    return obj[key][n];
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;03_getElementsLessThan100AtProperty&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;getElementsLessThan100AtProperty&amp;rdquo;. (&amp;ldquo;getElementsLessThan100AtProperty&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given an object and a key, &amp;ldquo;getElementsLessThan100AtProperty&amp;rdquo; returns an array containing all the elements of the array located at the given key that are less than 100. (객체와 키값이 주어졌을때, &amp;ldquo;getElementsLessThan100AtProperty&amp;rdquo; 함수는 주어진 키에 위치하는 배열에서 100 보다 작은 값으로만 이루어진 배열을 반환합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
function getElementsLessThan100AtProperty(obj, key) {
  for (let prop in obj) {
    if (! Array.isArray(obj[key])){
    return [];
    } else if ( !prop in obj ) {
      return [];
    }
  }
    let retArr = [];
    for ( let prop2 in obj ) {
    for ( let i = 0; i &amp;lt; obj[prop2].length; i = i + 1) {
      if ( obj[prop2][i] &amp;lt; 100 ) {

        retArr.push(obj[prop2][i]);
      }

  }
    }
    return retArr;
  }



&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;My_Re_Soultion&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;

function getElementsLessThan100AtProperty(obj, key) {

  if ( ! Array.isArray(obj[key])) {
    return [];
  } else {
  return obj[key].filter(cur =&amp;gt; cur &amp;lt; 100);

  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;05_getLastElementOfProperty&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Question&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;getLastElementOfProperty&amp;rdquo;. (&amp;ldquo;getLastElementOfProperty&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given an object and a key, &amp;ldquo;getLastElementOfProperty&amp;rdquo; returns the last element of an array located at the given key. (객체와 키가 주어졌을때, &amp;ldquo;getLastElementOfProperty&amp;rdquo; 함수는 주어진 키에 위치한 배열의 마지막 요소를 반환합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;My_Solution&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function getLastElementOfProperty(obj, key) {
  
  // 1. 만약 key의 값에 prop 배열이 아니라면 undefined 출력
  // 2. 배열에 있는 마지막 요소 pop 메소드 이용해서 빼서 변수안에 넣기
  // 3. 변수 리턴 

  if (!Array.isArray(obj[key])) {
    return undefined;
    } else {
      let lastNum = obj[key].pop()
      return lastNum
  } 
}

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;modle_Solution&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
// 1.마지막 배열에 요소 가져오기 위해 length - 1 이라는 방법을 썻다.

function getLastElementOfProperty(obj, key) {
  let prop = obj[key];
  if (!Array.isArray(prop)) {
    return undefined
  }

  return prop[prop.length - 1]
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;06_getSquaredElementsAtProperty&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;getSquaredElementsAtProperty&amp;rdquo;. (&amp;ldquo;getSquaredElementsAtProperty&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given an object and a key, &amp;ldquo;getSquaredElementsAtProperty&amp;rdquo; returns an array containing all the squared elements of the array located at the given key. (객체와 키가 주어졌을때, &amp;ldquo;getSquaredElementsAtProperty&amp;rdquo; 함수는 주어진 키에 위치하는 배열의 요소들의 제곱을 요소로 가지는 배열을 반환합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;My_Soultion&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;

function getSquaredElementsAtProperty(obj, key) {


  
  // 1. 만약 주어진 key 의 값이 배열이 아니라면 빈배열 출력
  // 2. 만약 주어진 key 의 값이 길이가 0 같이 않다면 빈배열
  // 3. 마지막에 출력할 새로운 변수 생성
  // 4. 곱셈할 값을 넣기 위한 새로운 변수 또 생성 
  // 5. 배열안에 있는 요소들 곱하기
  // 6. 곱한값을 arr 이라는배열에 넣는다.    


 if (!Array.isArray(obj[key])) {
    return [];
 } else if (obj[key].length === 0 ){
   return [];
 }
  let arr = [];
  let conut;
  for ( let i = 0; i &amp;lt; obj[key].length; i = i + 1 ) {
    conut = obj[key][i]*obj[key][i];
    arr.push(conut);
  }
 return arr;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;other Soultion&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;


function getSquaredElementsAtProperty(obj, key) {
  var arr = [];
  if(Array.isArray(obj[key])){
    for(var i in obj[key]){
      var squared =obj[key][i]*obj[key][i];
      arr.push(squared);
    }
  }
  return arr;
}

var obj = {
  key: [2, 1, 5]
};
var output = getSquaredElementsAtProperty(obj, &#39;key&#39;);
console.log(output);


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;07_getAllButLastElementOfProperty&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Question&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;getAllButLastElementOfProperty&amp;rdquo;. (&amp;ldquo;getAllButLastElementOfProperty&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given an object and a key, &amp;ldquo;getAllButLastElementOfProperty&amp;rdquo; returns an array containing all but the last element of the array located at the given key. (객체와 키가 주어졌을때, &amp;ldquo;getAllButLastElementOfProperty&amp;rdquo; 함수는 주어진 키에 위치하는 배열의 마지막 요소를 제외한 배열을 반환합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;** My_Solution&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
function getAllButLastElementOfProperty(obj, key) {
  
  
  // 1.마지막에 출력할 arr 빈배열 생성
  // 2.만약 key의 값의 prop 가 배열이 아니라면 빈배열 리턴
  // 3.만약 key의 값의 prop 의 길이가 0 과 같이 않다면 빈배열 리턴
  // 4.선언된 arr 안에 obj[key] 값을 넣는다.
  // 5.pop()메소드 사용해 마지막 요소 제거
  // 6.arr 리턴


  let arr = [];
  if (!Array.isArray(obj[key])) {
    return [];
  } else if ( obj[key].length === 0 ) {
    return [];
  } else {
    arr = obj[key];
    arr.pop()
  }
  return arr;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;08_getProductOfAllElementsAtProperty&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;getProductOfAllElementsAtProperty&amp;rdquo;. (&amp;ldquo;getProductOfAllElementsAtProperty&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given an object and a key, &amp;ldquo;getProductOfAllElementsAtProperty&amp;rdquo; returns the product of all the elements in the array located at the given key. (객체와 키가 주어졌을때, &amp;ldquo;getProductOfAllElementsAtProperty&amp;rdquo; 함수는 주어진 키에 위치한 배열의 요소의 곱을 반환합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;My_soultion&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;It is used by for&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;



function getProductOfAllElementsAtProperty(obj, key) {
  // 1. arr 변수 만들어 key값의 prop 값을 넣는다
  // 2. 곱한값을 담을 sum 이라는 변수 생성 
  // 3. 만약 key의 prop 배열이 아니라면 0을 리턴
  // 4. 만약 key의 prop 길이가 0 과 같다면  0;
  // 5. for 문사용해 arr안에 있는 숫자를 곱한값을 sum 안에 저장
  // 6. sum 출력 
  
  
  let arr = obj[key];
  let sum = 1;
  if ( !Array.isArray(obj[key])) {
    return 0;
  } else if ( obj[key].length === 0 ) {
    return 0;
  }
  for ( let n = 0 ; n &amp;lt; arr.length ; n = n + 1 ) {
    sum = sum * arr[n];
  }
  return sum;
}



&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;It is used by reduce&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;

function getProductOfAllElementsAtProperty(obj, key) {
  if (! Array.isArray(obj[key] )) {
    return 0; 
  } else if ( obj[key].length === 0 ){
    return 0;
  }
  let arr = obj[key];
  return arr.reduce(function(acc,cur) {
    return acc * cur;
  }) 
}

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Crucial_Points</title>
      <link>/tutorial/javascript_q2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/tutorial/javascript_q2/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/tutorial/Javascript_Dictionary_files/javascriptt-light_870x220.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;scope&#34;&gt;Scope&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;객체 지향 프로그래밍&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
function Car(band,name,color) {
    // 인스턴스가 만들어 질때  실행될 코드들... 
}

// new 키워드를 통해 클라스의 인스턴스를 만들어낼 수 있습니다. 


// Car 라는 class 만들어 낼때 class는 2가지를 갖게 된다.

// 1. 속성  : band,name,color , currentFuel,maxSpeed
// 2. 메소드  : refuel() ,setSpeed(), drive()


&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;closure&#34;&gt;Closure&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;1.클로저란?&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;함수는 함수를 리턴할수 있다.그것을 고차함수라고 하는데 그것을 클로저라 부른다. 한마디로 &lt;code&gt;외부함수의 변수에 접근할수 있는 함수&lt;/code&gt;를  &lt;code&gt;클로저&lt;/code&gt;라 부른다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;특징&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;클로저 함수의 장점은 지역변수 외부 함수의 변수 전역 변수 에 접근이 가능하다는 점이다 !&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
function foo() {
  return function() {
        return 2 
    }
}

foo() // f
// 2 가 반환되지 않고 
//f &amp;lt;&amp;lt; 함수 자체가 리턴된다 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;**클로저예제1 : 함수 이용해서 템플릿 함수 만들기 **&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
function htmlMark(tag) {
    let stratTag = &amp;quot;&amp;lt;&amp;quot; + tag + &amp;quot;&amp;gt;&amp;quot; ; 
    let endTag = &amp;quot;&amp;lt;&amp;quot; + tag + &amp;quot;&amp;gt;&amp;quot; ;
      return function(content) {     //  클로저 함수 사용 
        return stratTag + content + endTag;
    }
}

htmlMark(&amp;quot;h1&amp;quot;)(&amp;quot;JJ&amp;quot;); // 커링 사용해서 출력 tag : &amp;quot;h1&amp;quot; content:&amp;quot;JJ&amp;quot;
// &amp;gt;&amp;gt;&amp;gt; &amp;lt;h1&amp;gt;JJ&amp;lt;h1&amp;gt;

let h1Tag = htmlMark(&amp;quot;h1&amp;quot;); // 변수에 tag:&amp;quot;h1&amp;quot;담아서 지정하고 출력 

h1Tag(&amp;quot;JJ&amp;quot;)  //  content : &amp;quot;JJ&amp;quot;
// &amp;gt;&amp;gt;&amp;gt; &amp;lt;h1&amp;gt;JJ&amp;lt;h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;**클로저예제 2 : 클로저 모튤 패턴 **&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
// 두 카운터가 각기 다른 privateCount 를 다루면서, privareCounter 을 밖에 노출시키지 않는 것이 장점이다. 

function makeCounter() {
	let privateCounter = 0; 

	let obj = {
	  plus : function() {
		  privateCounter = privateCounter + 1;
	  },	
	  minus: function() {
		  privateCounter = privateCounter - 1;
	  },
	  getValue: function() {
		  return privateCounter;
	  }
  }
  return obj;
};

let count1 = makeCounter() // 함수를 변수에 지정한다. 
count1.plus() // obj key값을 실행시키면 propo 값인 함수가 실행되면서 기존에 privateCounter 0 이였던 것을 1 증가시킨다. 

coun1.getValue() //  obj key값인 getValue() 함수를 실행시키면 지금까지 plus 하고 minus한 값을 출력 할수 있게 코드가 짜여 있다. 


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;2.클로저란?&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;클로저는 독립적인 (자유) 변수를 가리키는 함수이다. 또는, 클로저 안에 정의된 함수는 만들어진 환경을 ‘기억한다’.&lt;/p&gt;

&lt;p&gt;내부함수는 외부함수의 지역변수에 접근 할 수 있는데 외부함수의 실행이 끝나서 외부함수가 소멸된 이후에도 내부함수가 외부함수의 변수에 접근 할 수 있다. 이러한 메커니즘을 클로저라고 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;일반적인 함수&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
let addTo = function (passed) {

	let inner = 2;
	return passed + inner; 3 + 2 

};

console.log( addTo(3) ) //  5

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;이것이 클로저&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
let passed = 3;  // 함수 밖에 변수를 선언한다 

let addTo = function () { //  parameter 를 외부에서가져온다. 

	let inner = 2;
	return passed + inner; 3 + 2  // 

};

console.log( addTo() ) //  5

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;1.추가설명&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// 클로저(closure)는 내부함수가 외부함수의 맥락(context)에 접근할 수 있는 것을 가르킨다.
// 자바스크립트에서 함수는 일급객체이다. 함수를 호출했을때 리턴되는 함수(클로저)를 참조하고 있는 것이다.
// 즉 반환되는 내부함수가 클로저이다.
 
function outter() {
    
    var title = &#39;난 영혼처럼 살아있다.&#39;;
    
    return function() {
        
        console.log(title); // 클로저로 참조되는 외부변수를 자유변수(Free Variable) 라 부른다.
        
    };
};
 
var inner = outter();  // 생명 주기가 끝난 외부함수의 변수를 참조하는 내부함수를 클로저라 한다.  
inner();  // 결과 : 난 영혼처럼 살아있다. 
 
 
 

// 매번 호출할때 마다 변수값을 유지하고 싶을때 사용한다.
// 클로저가 참조하고 있는 변수를 노출시키지 않는다 (캡슐화)
// 클로저에서는 접근할수 있지만 코드 외부에서는 접근할수 없다.

var a = function() {
    
    var count = 0;
 
    return function() {
         return count++;
    };
};
 
let next = a();
 
console.log(next());  
console.log(next());  
console.log(next());  
console.log(next());  


출처: https://mylife365.tistory.com/108?category=624212 [변화에 적응하기]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;추가설명 &amp;amp; 코드를 작성할때 많이 격는 어려움&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;3. 클로저(Closure)

클로저는 JavaScript의 유효범위 체인을 이용하여 이미 생명 주기가 끝난 외부 함수의 변수를 참조하는 방법입니다. 외부 함수가 종료되더라도 내부함수가 실행되는 상태면 내부함수에서 참조하는 외부함수는 닫히지 못하고 내부함수에 의해서 닫히게 되어 클로저라 불리 웁니다. 따라서 클로저란 외부에서 내부 변수에 접근할 수 있도록 하는 함수입니다.

내부 변수는 하나의 클로저에만 종속될 필요는 없으며 외부 함수가 실행 될 때마다 새로운 유효범위 체인과 새로운 내부 변수를 생성합니다. 또, 클로저가 참조하는 내부 변수는 실제 내부 변수의 복사본이 아닌 그 내부 변수를 직접 참조합니다.

function outerFunc(){  
    var a= 0;
    return {
        innerFunc1 : function(){
            a+=1;
            console.log(&amp;quot;a :&amp;quot;+a);
        },
        innerFunc2 : function(){
            a+=2;
            console.log(&amp;quot;a :&amp;quot;+a);
        }
    };
}
var out = outerFunc();  
out.innerFunc1();  
out.innerFunc2();  
out.innerFunc2();  
out.innerFunc1();

//실행결과
/*
a = 1  
a = 3  
a = 5  
a = 6  
*/
function outerFunc(){  
    var a= 0;
    return {
        innerFunc1 : function(){
            a+=1;
            console.log(&amp;quot;a :&amp;quot;+a);
        },
        innerFunc2 : function(){
            a+=2;
            console.log(&amp;quot;a :&amp;quot;+a);
        }
    };
}
var out = outerFunc();  
var out2 = outerFunc();  
out.innerFunc1();  
out.innerFunc2();  
out2.innerFunc1();  
out2.innerFunc2();  
//실행결과
/*
a = 1  
a = 3  
a = 1  
a = 3  
*/
[예제 8] 클로저의 상호작용, 서로 다른 객체

위의 코드는 클로저의 예제 코드이며 그 중 좌측 코드는 서로 다른 클로저가 같은 내부 변수를 참조하고 있다는 것을 보여주고 있습니다. 서로 다른 클로저 innerFunc1과 innerFunc2가 내부 변수 a를 참조하고 a의 값을 바꿔주고 있습니다. 실행 결과를 보면 내부 변수 a의 메모리를 같이 공유한다는 것을 알 수 있습니다.

우측 코드는 같은 함수를 쓰지만 서로 다른 객체로 내부 변수를 참조하는 모습입니다. 외부 함수가 여러 번 실행되면서 서로 다른 객체가 생성되고 객체가 생성될 때 마다 서로 다른 내부 변수가 생성되어 보기엔 같은 내부 변수 a로 보이지만 서로 다른 내부 변수를 참조합니다.

3.1 클로저의 사용이유
클로저를 사용하게 되면 전역변수의 오,남용이 없는 깔끔한 스크립트를 작성 할 수 있습니다. 같은 변수를 사용하고자 할 때 전역 변수가 아닌 클로저를 통해 같은 내부 변수를 참조하게 되면 전역변수의 오남용을 줄일 수 있습니다. 또한, 클로저는 JavaScript에 적합한 방식의 스크립트를 구성하고 다양한 JavaScript의 디자인 패턴을 적용할 수 있습니다. 그의 대표적인 예로 모듈 패턴을 말 할 수 있는데 모듈 패턴의 자세한 내용은 [Javascript : 함수(function) 다시 보기]을 참고 하시면 될 것 같습니다. 마지막으로 함수 내부의 함수를 이용해 함수 내부변수 또는 함수에 접근 함으로써 JavaScript에 없는 class의 역할을 대신해 비공개 속성/함수, 공개 속성/함수에 접근을 함으로 class를 구현하는 근거 입니다.

3.2 클로저 사용시 주의할 점
클로저를 사용할 때 주의해야 할 점이 여럿 있습니다. 제가 알려드리고 싶은 주의 점은 다음과 같습니다.

for 문 클로저는 상위 함수의 변수를 참조할 때 자신의 생성될 때가 아닌 내부 변수의 최종 값을 참조합니다.

&amp;lt;body&amp;gt;  
    &amp;lt;script&amp;gt;
    window.onload = function(){
        var list = document.getElementsByTagName(&amp;quot;button&amp;quot;);

        for(var i =0, length = list.length; i&amp;lt;length; i++){
            list[i].onclick=function(){
            console.log(this.innerHTML+&amp;quot;은&amp;quot;+(i+1)+&amp;quot;번째 버튼입니다&amp;quot;);
            }
        }
    }
    &amp;lt;/script&amp;gt;
&amp;lt;button&amp;gt;1번째 버튼&amp;lt;/button&amp;gt;  
&amp;lt;button&amp;gt;2번째 버튼&amp;lt;/button&amp;gt;  
&amp;lt;button&amp;gt;3번째 버튼&amp;lt;/button&amp;gt;  
&amp;lt;/body&amp;gt;  
//실행결과
/*
1번째 버튼은 4번째 버튼입니다  
2번째 버튼은 4번째 버튼입니다  
3번째 버튼은 4번째 버튼입니다  
*/
[예제 9] for문안의 클로저

위의 코드는 각각의 버튼에 이벤트를 걸어 클릭된 버튼이 몇 번째 버튼인지를 알기 위한 예제 입니다. 하지만, 실행 결과 값은 바라던 결과가 나오지 않습니다. 위의 클로저인 클릭 이벤트가 참조 하는 변수 i의 값이 버튼이 클릭될 때의 값이 아닌 for 구문을 다 돌고 난후 i의 값 4를 참조하기 때문에 모두 4라는 결과가 나옵니다.

&amp;lt;body&amp;gt;  
    &amp;lt;script&amp;gt;
    window.onload = function(){
        var list = document.getElementsByTagName(&amp;quot;button&amp;quot;);

        var gate = function(i){
            list[i].onclick=function(){
            console.log(this.innerHTML+&amp;quot;은&amp;quot;+(i+1)+&amp;quot;번째 버튼입니다&amp;quot;);
            }
        }
        for(var i =0, length = list.length; i&amp;lt;length; i++){
             gate(i);
        }
    }
    &amp;lt;/script&amp;gt;
&amp;lt;button&amp;gt;1번째 버튼&amp;lt;/button&amp;gt;  
&amp;lt;button&amp;gt;2번째 버튼&amp;lt;/button&amp;gt;  
&amp;lt;button&amp;gt;3번째 버튼&amp;lt;/button&amp;gt;  
&amp;lt;/body&amp;gt;  
//실행결과
/*
1번째 버튼은 1번째 버튼입니다  
2번째 버튼은 2번째 버튼입니다  
3번째 버튼은 3번째 버튼입니다  
*/
[예제 10] 예제9 해결법 : 중첩클로저

위의 예제 코드를 통해 중첩 된 클로저를 사용하는 것 만으로 위와 같은 문제를 피하여 원하는 값이 나옵니다.

성능문제 클로저가 필요하지 않는 부분에서 클로저를 사용하는 것은 처리 속도와 메모리 면에서 좋은 방법이 아닙니다.

function MyObject(inputname) {  
    this.name = inputname;
    this.getName = function() {
        return this.name;
    };
    this.setName = function(rename) {
        this.name = rename;
    };
}
var obj= new MyObject(&amp;quot;서&amp;quot;);  
console.log(obj.getName());  
//실행결과
/*
서
*/
[예제 11] 클로저의 오남용

위의 코드와 같은 함수 내부의 클로저 구현은 함수의 객체가 생성될 때마다 클로저가 생성되는 결과를 가져옵니다. 같은 구동을하는 클로저가 객체마다 생성이 된다면 쓸데없이 메모리를 쓸데없이 차지하게 되는데, 이를 클로저의 오남용이라고 합니다. 클로저의 오남용은 성능 문제 면에서 안 좋은 결과를 가져옵니다.

function MyObject(inputname) {  
    this.name = inputname;
}
MyObject.prototype.getName = function() {  
    return this.name;
};
MyObject.prototype.setName =   function(rename) {  
    this.name = rename;
};
var obj= new MyObject(&amp;quot;서&amp;quot;);  
console.log(obj.getName());  
//실행결과
/*
서
*/
[예제 12] prototype객체를 이용한 클로저 생성

클로저를 위의 코드와 같이 prototype객체에 생성하게 되면 객체가 아무리 생성되어도 클로저를 한 번만 생성하고 여러 객체에서 쓸 수 있게 되어 메모리의 낭비를 줄입니다.

this와 arguments객체 클로저를 통해서는 외부함수의 this객체와 arguments객체를 참조하지 못합니다.

function f1(){  
    function f2(){
        console.log(arguments[0]);
    }
    return f2;
}
var exam = f1(1);  
exam();

//실행결과
/*
undefined  
*/
function f1(){  
    var a= arguments[0];
    function f2(){
        console.log(a);
    }
    return f2;
}
var exam = f1(1);  
exam();  
//실행결과
/*
1  
*/
[예제 13] arguments객체 참조

위의 좌측코드같이 클로저를 통해 arguments객체를 참조하게 되면 undefined라는 실행결과가 나옵니다. 즉, arguments객체는 참조가 불가능하며 굳이 참조하고 싶다면 오른쪽 코드와 같이 새로운 내부 변수에 arguments객체의 값을 넣고 그 변수를 참조 하거나 매개변수를 만들어 매개 변수를 참조하여야 합니다.

Function 생성자

var a= 20;  
function function1(){  
    var a= 10;
    var function2 = new Function(&amp;quot;&amp;quot;,&amp;quot;return a;&amp;quot;);
    return function2;
}
var exam = function1();  
exam();  
//실행결과
/*
20  
*/
[예제 14] Function생성자로 선언된 클로저

위의 코드와 같이 클로저가 Function생성자로 생성된 경우 전역에서 생성된 것으로 인지합니다. 클로저 function2를 통하여 내부 변수 a를 참조하려고 했지만 원했던 결과와 달리 전역 변수 a가 참조 됩니다.

순환참조

function outerFunc(){  
    var outer_val = {};
    function innerFunc(){
        console.log(outer_val);
    }

    outer_val.values = innerFunc;
    return innerFunc;
}
[예제 15] 인위적 순환참조

위의 코드는 의도적으로 클로저의 순환참조를 만든 예제 코드입니다. 내부 객체 outerval의 속성 값 values 에 내부 함수 innerFunc를 참조하게 만들고 내부 함수 innerFunc는 내부 객체 outerval을 호출 하고 있습니다. 위와 같은 순환 참조는 서로를 참조 하면서 영원히 끝나지 않는 호출로 인하여 메모리 누수를 야기합니다.

function outerFunc(){  
    var outer_val = {};
    function innerFunc(){
        console.log(&amp;quot;Hello&amp;quot;);
    }
    outer_val.values = innerFunc;
    return innerFunc;
}
[예제 16] 의도치 않은 순환참조

그렇다면 위 코드같이 서로를 참조를 하지 않게 되면 순환참조가 끊어질까요? 아닙니다. JavaScript의 클로저는 특별한 문법을 쓰지 않고도 암묵적으로 생기는 특성을 가지고 있습니다. 이는 클로저를 쉽게 만들도록 해주지만 클로저가 사용되는 곳을 사용자가 식별하기 어렵게 만들기도 합니다. 그렇게 되면 내부 함수의 innerFunc는 암묵적으로 상위 함수의 내부 객체인 outer_val을 참조하게 되고 이로인해 의도치 않게 순환참조가 만들어집니다. 이런 의도치 않은 순환참조는 메모리 누수를 야기합니다.

이 같은 의도치 않은 순환참조는 객체가 제거될 때 명시적으로 null값으로 초기화 해 주거나 try-catch-finally구문으로 해결합니다. 또는 더 글라스 크락포드가 제시한 purge함수를 쓰게 되면 순환참조를 해결할 수 있습니다. 아래는 purge함수 입니다.

function purge(d) {  
    var a = d.attributes, i, l, n;
    if (a) {
        for (i = a.length - 1; i &amp;gt;= 0; i -= 1) {
            n = a[i].name;
            if (typeof d[n] === &#39;function&#39;) {
                d[n] = null;
            }
        }
    }
    a = d.childNodes;
    if (a) {
        l = a.length;
        for (i = 0; i &amp;lt; l; i += 1) {
            purge(d.childNodes[i]);
        }
    }
}
[더글라스 크락포드의 purge함수]

3.3 캡슐화
캡슐화란 간단하게 말하면 객체의 자료화 행위를 하나로 묶고, 실제 구현 내용을 외부에 감추는 겁니다. 즉, 외부에서 볼 때는 실제 하는 것이 아닌 추상화 되어 보이게 하는 것으로 정보은닉에 쓰입니다. JavaScript는 이와 같은 캡슐화를 클로저를 사용하여 구현합니다.

function Gugudan(dan){  
    this.maxDan=3;
    this.calculate = function(){
        for(var i =1; i&amp;lt;=this.maxDan; i++){
            console.log(dan+&amp;quot;*&amp;quot;+i+&amp;quot;=&amp;quot;+dan*i);
        }
    }
    this.setMaxDan = function(reset){
        this.maxDan = reset;
    }
}
var dan5 = new Gugudan(5);  
dan5.calculate();

dan5.maxDan=2;  
dan5.calculate();

//실행결과
/*
5*1=5  
5*2=10  
5*3=15

5*1=5  
5*2=10  
*/
[예제 17] 캡슐화 전

위의 코드는 JavaScript 캡슐화 하기 전의 코드입니다. 내부 변수를 this객체로 바인딩 하여 선언하게 되면 내부 변수 maxDan에 대하여 외부에서 직접 접근이 가능합니다. 이런식의 소스코드 구현은 사용자가 임의로 바꿔선 안될 값들이 외부에 공개가 되면서 보안문제에 안좋은 결과를 가져옵니다.

function Gugudan(dan){  
    var maxDan=3;
    this.calculate = function(){
        for(var i =1; i&amp;lt;=maxDan; i++){
            console.log(dan+&amp;quot;*&amp;quot;+i+&amp;quot;=&amp;quot;+dan*i);
        }
    }
    this.setMaxDan = function(reset){
        maxDan = reset;
    }
}
var dan5 = new Gugudan(5);  
dan5.calculate();

dan5.maxDan=2;  
dan5.calculate();

dan5.setMaxDan(2)  
dan5.calculate();  
//실행결과
/*
5*1=5  
5*2=10  
5*3=15

5*1=5  
5*2=10  
5*3=15

5*1=5  
5*2=10  
*/
[예제 18] 캡슐화 후

하지만 위의 코드와 같이 var키워드를 통하여 내부 변수를 선언하게 되면 내부 변수 maxDan이 외부에서 직접 접근이 되지 않고 오직 클로저를 통해서만 접근이 가능합니다. 즉, 사용자가 임의로 값을 바꿀수 없고 개발자가 만들어놓은 길(클로저)을 통해서만 값을 바꿔 줄수 있습니다. 아쉬운 점은 캡슐화를 하게되면 클로저를 prototype 맴버로 등록하지 못해 공용 메소드로 사용할 수 있는 이점은 사라집니다. 하지만, 별도의 부모 객체를 정의해서 공용 메소드나 상수 들을 위치시키고 이를 상속받는 방식으로 보완할 수 있습니다.



&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;커링-currying&#34;&gt;커링 (currying)&lt;/h3&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;호출된 함수의 매개변수로 동적으로 새로운 함수를 생성하여 반환하는 패턴을 커링이라 한다.&lt;/p&gt;

&lt;p&gt;호출하는 함수의 인자값이 비슷하다면 커링을 사용하는 것이 효율적이다.&lt;/p&gt;

&lt;p&gt;클로저를 이용해 함수의 인자를 미리 등록해두는 것&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
function func(a) {
    return function(b) { // 내부 함수, 즉 클로저인 익명 함수 반환
        return a + b;
    }
}
var currying = func(5);
var result = currying(5); 
console.log(result);
// 또는 아래처럼 호출
var result2 = func(5)(7); 
console.log(result2);

https://mylife365.tistory.com/320 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;스코프란?&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;자바스크립트에서 스코프란 어떤 변수들에 접근할 수 있는지를 정의합니다.&lt;/p&gt;

&lt;p&gt;스코프엔 두 가지 종류가 있습니다. 전역 스코프와 지역 스코프로 나뉩니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;전역_스코프&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let greeting = &#39;Hello John&#39; // 외부에서 변수가 선언됨

function marcusHello () {
  console.log(greeting)
}

console.log(greeting) // &#39;Hello John!&#39; 

sayHello() // &#39;Hello John!&#39; 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;지역_스코프&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
function marcusHello () {
  
  let greeting = &#39;Hello John!&#39; // 안에서 변수가 선언됨
  console.log(greeting)
}

marcusHello() // &#39;Hello John!!&#39;

console.log(x) // Error, hello is not defined

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
let name = &amp;quot;john&amp;quot;;

function showName() { 
  let name = &amp;quot;jj&amp;quot;; // 2. 지역변수 &amp;lt;&amp;lt; showName함수에서만 접근 가능
  console.log(name); // 2. jj
}

console.log(name); // 1.jj &amp;lt;&amp;lt; 전역변수 가져옴
showname()         // 2.
console.log(name)  // 3. john &amp;lt;&amp;lt; 여전히 전역 변수 john





let name = &amp;quot;john&amp;quot;;

function showName() {
  name = &amp;quot;jj&amp;quot;; // name 이 전역변수로 바뀜 cos let 없기 때문에 외부에서 변수 가져왔다. 
  console.log(name); //   jj 
}

console.log(name); // 1. john &amp;lt;&amp;lt; 전역변수 가져옴
showName()         // 2. 
console.log(name)  // 3. jj 함수가 실행된 뒤에는 함수안에 있는 name = jj 를 가져와서 리턴한다. 왜냐하면 jj 가 전역 변수로 바뀌었기 때문이다. 


&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>JS algorithm</title>
      <link>/tutorial/javascript_algorithm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/tutorial/javascript_algorithm/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/tutorial/Javascript_Dictionary_files/javascriptt-light_870x220.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;question&#34;&gt;Question&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Have the function primeMover(n) return the n-th prime number. The range will be from 1 to 5 * 10^4; (숫자(n)가 주어졌을때, &amp;lsquo;primeMover(n)&amp;rsquo; 함수는 num 번째 소수를 반환합니다. 범위는 1에서 50,000 입니다.)&lt;/p&gt;

&lt;p&gt;For example: if n is 16 the output should be 53 as 53 is the 16th prime number. (예시: 만약 n 이 16이라면, 결과값은 16번째 소수인 53 입니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;my-soultion&#34;&gt;My_Soultion&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;

let primeMover = function(n) {
  // your code here


  let arr = [1];
  for ( let i = 1; i &amp;lt;100; i++) {
    for ( let j = 2; j &amp;lt; 100; j++ ) {
      if (j % i !== 0 ) {
       arr.push(j);
      }
    }
  }
  return arr[n];
}


&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;primeMover&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;question-1&#34;&gt;Question&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;isOddWithoutModulo&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;isOddWithoutModulo&amp;rdquo;. (&amp;ldquo;isOddWithoutModulo&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given a number, &amp;ldquo;isOddWithoutModulo&amp;rdquo; returns whether the passed in number is odd. (숫자가 주어졌을때, &amp;ldquo;isOddWithoutModulo&amp;rdquo; 함수는 주어진 숫자가 홀수인지를 반환합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;my-soultion-1&#34;&gt;My_Soultion&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
// 2. it is used by Math.floor 

function isOddWithoutModulo(num) { // floor 메소드로 참과 거짓을 출력할뿐만 아니라 정수로 만든다. 그것을 2로 나눠서 2로 다시 곱한값이 기존에 값과 일치하지 않는다면 홀수이므로 true 반환
  
  return Math.floor(num / 2) * 2 !== num;  

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;others-soultion&#34;&gt;Others_Soultion&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
function isOddWithoutModulo(num) {
   // 예를 들어, num이 -17이라고 가정합니다. 
   num = Math.abs(num);
// num은 절대값이 되어 17이됩니다. 이를 통해 파라미터에 들어올 모든 음수를 커버할 수 있을 겁니다. 
   if( num === 0 )  // num은 현재 17로 0이 아니기 때문에 그 다음 else if로 넘어가게 됩니다. 
       return false;
   else if(num === 1) // num은 현재 17로 1이 아니기 때문에 그 다음 else로 넘어가게 됩니다. 
       return true;
   else { // 보통 홀수인지 아닌지를 판별하기 위해서 2로 나누었을 대 나머지값을 확인하는 방법을 씁니다. 
// 그 방법을 풀어보면 17 -2 -2 -2 -2 -2 -2...... 하여 0 혹은 1이 될 때까지 뻰다는 것을 의미합니다. 
       return isOddWithoutModulo(num-2); // 이 부분은 바로 위의 설명이 적용되는 부분입니다. 
// 자바스크립트는 재귀함수가 가능하여 함수 안에서 자기 자신을 호출할 수 있습니다.
// 이를테면 num이 17이었다면 위의 구문을 통해 다시  isOddWithoutModulo(17-2)를 호출하는 것입니다. 
// 위의 과정을 다시 반복하게 되면 isOddWithoutModulo(15) --&amp;gt; isOddWithoutModulo(13) --&amp;gt; isOddWithoutModulo(11).... 
// num이 0 혹은 1이 되어 if와 else if 구문에 걸려 return될 때까지 반복됩니다. 
   }
}


&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;question-2&#34;&gt;Question&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;getStringLength&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;getStringLength&amp;rdquo;. (&amp;ldquo;getStringLength&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given a string, &amp;ldquo;getStringLength&amp;rdquo; returns the length of the given string. (문자열이 주어졌을때, &amp;ldquo;getStringLength&amp;rdquo; 함수는 주어진 문자열의 길이를 반환합니다.)&lt;/p&gt;

&lt;p&gt;Do NOT use any native &amp;lsquo;length&amp;rsquo; methods. (- &amp;lsquo;length&amp;rsquo; 메소드를 사용하지 마세요.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;my-soultion-2&#34;&gt;My_Soultion&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
function getStringLength(string) {
  // your code here

  // 1. count 변수를 만들어 초기값을 지정한다. 
  // 2. while loop를 이용해 string[count] 값을 지정해 조건문을 만든다. 
  // 3. 참이면 count 에 1씩 증가시킨다. 그러면 조건문에 인덱스 번호가 넘어가면 조건문이 문자의 길이만큼 값이 count 에 저장된다. 

  let count = 0;

  while (string[count]) {
    count = count + 1;
  };
  return count;
};


&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;question-3&#34;&gt;Question&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;getIndexOf&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;getIndexOf&amp;rdquo;. (&amp;ldquo;getIndexOf&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given a character and a string, &amp;ldquo;getIndexOf&amp;rdquo; returns the first position of the given character in the given string. (문자와 문자열이 주어졌을때, &amp;ldquo;getIndexOf&amp;rdquo; 함수는 주어진 문자열에서 주어진 문자가 나타나는 첫번째 위치를 반환합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;my-soultion-3&#34;&gt;My_Soultion&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function getIndexOf(char, str) {

      for (let i = 0; i &amp;lt; str.length;  i = i + 1 ) {
          if ( str[i] === char ) {  //  만약 str 에 있는 문자들중에 char 같다면 
            return i;  // 리턴 인덱스 번호 
          } 
        }
      return -1; //  아니면 -1  반환
    }



&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;question-4&#34;&gt;Question&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;calculateBillTotal&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;calculateBillTotal&amp;rdquo;. (&amp;ldquo;calculateBillTotal&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given the pre tax and pre tip amount of a meal, &amp;ldquo;calculateBillTotal&amp;rdquo; returns the total amount due after tax and tip. (팁과 세금을 제외한 식사값이 주어졌을때, &amp;ldquo;calculateBillTotal&amp;rdquo; 함수는 팁과 세금이 포함된 총 식사값을 반환합니다.)&lt;/p&gt;

&lt;p&gt;Assume that sales tax is 9.5% and tip is 15%. (- 세금은 9.5% 팁은 15% 로 계산하세요.)
Do NOT tip on the sales tax, only on the pre tip amount. (- 팁을 계산할때 세금을 포함하여 계산하지 마세요.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;my-soultion-4&#34;&gt;My_Soultion&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
function calculateBillTotal(preTaxAndTipAmount) {
  // your code here

  // 1. salesTax 변수를 만들고 주어진 값의 0.095 곱한 값을 대입
  // 2. tip 변수를 만들고 주어진 값의 0.15 를 곱한 값을 대입
  // 3. 모든값을 더한후 리턴  
 

  let salesTax = preTaxAndTipAmount * 0.095;
  let tip = preTaxAndTipAmount * 0.15;

  return preTaxAndTipAmount + salesTax + tip;
}




&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;calculateBillTotal&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;question-5&#34;&gt;Question&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;convertObjectToArray3&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;convertObjectToList&amp;rdquo; which converts an object literal into an array of arrays, like this: (객체를 입력으로 받고 해당 객체를 다음과 같이 2차원 배열로 변형 할 수 있는 함수 &amp;ldquo;convertObjectToList&amp;rdquo;를 작성하세요.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;my-soultion-5&#34;&gt;My_Soultion&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function convertObjectToList(obj) {
  // your code here
  
  // 1. 마지막에 출력할 빈배열을 만든다. 
  // 2. for 문을 사용해서 객체안에 있는 key와 prop 값에 전근한다. 
  // 3. push 사용해 접근한 key값은 0번째 값에 넣고 prop 값은 1번째 값에 넣는다. 
  // 4. arr 리턴한다. 

  let arr = [];
  for ( let key in obj ) {
    arr.push([key,obj[key]]);
  }  
 return arr;
}




&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;isodd&#34;&gt;isOdd&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called isOdd. (&amp;ldquo;isOdd&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given an integer, isOdd returns whether the integer is odd or not. (숫자가 주어졌을때, &amp;ldquo;isOdd&amp;rdquo; 함수는 주어진 숫자가 홀수 인지 아닌지를 반환합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;My_Soultion&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function isOdd(num) {
// your code here
// 파라미터를 2로 나누었을때의 나머지를 판별별
// 나머지가 1인경우, true를 리턴
// 나머지가 0인경우, false를 리턴
if (num % 2 === 1 ) {
return true;
} else {
return false;
}
}

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;sum&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Summation to n: Let&amp;rsquo;s implement the function sum that takes a single parameter n, and computes the sum of all integers up to n starting from 0, e.g.:&lt;/p&gt;

&lt;p&gt;(n까지의 총 합: n을 매개변수로 받아 0 부터 n 까지 모든 수의 총 합을 반환하는 함수를 작성하세요.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;My_Soultion&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function sum(n) {
let result = 0;
//반복문을 이용하여 0부터 n까지의 숫자를 더하여 출력
for (let i = 0; i &amp;lt;= n; i++) {
result = result + i;
}
return result;
  
// your code here
}
sum(3);
sum(4);

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;onlyevenelements&#34;&gt;onlyEvenElements&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Given an array of numbers, onlyEvenElements returns a new array of just the even numbers. (숫자로 이루어진 배열이 주어졌을때, &amp;ldquo;onlyEvenElements&amp;rdquo; 함수는 주어진 배열에 있는 짝수로만으로 이루어진 새로운 배열을 반환해야 합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;My_Soultion&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
function onlyEvenElements(arr) {
//짝수값을 입력받을 빈배열을 선언한다.
let result = [];
//입력받은 배열안에 있는는 값을 판별하기위해 불러온다.
for (let i = 0; i &amp;lt; arr.length; i++) {
//값이 짝수인지를 if 문을 써서 판별한다. 
if (arr[i] % 2 === 0) {
  //값이이 짝수인경우 빈배열에 집어넣는다.
  result.push(arr[i]);
}
}
return result;
// your code here
}


&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;removeoddvalues&#34;&gt;removeOddValues&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function removeOddValues that takes an object as an argument and returns an object with all key/value pairs removed for which the value holds an odd number. (&amp;ldquo;removeOddValues&amp;rdquo; 함수를 작성하세요. 객체가 주어졌을때, &amp;ldquo;removeOddValues&amp;rdquo; 함수는 주어진 객체의 key/value 페어 중 value 가 홀수 숫자인 페어가 제거된 객체를 반환하세요.)&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll need to use the &amp;ldquo;typeof&amp;rdquo; operator to first check that the values are numbers: (value가 숫자인지 확인하기 위하서는 &amp;ldquo;typeof&amp;rdquo; 연산자를 먼저 사용해야 합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;My_Soultion&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;first&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;function removeOddValues(object) {
  // 1.홀수숫자인 페어가가 아닌 값들을 입력받을을 빈 객체를를 만든다.
  let object2 = {};
  // 2. value 값들을 판별하기 위해 키값을 반복시킨다.
  for (let k in object) {
  // 3. value 값이 숫자이고 짝수이면 빈객체에 대입한다. 
    if (typeof(object[k]) === &#39;number&#39; &amp;amp;&amp;amp; object[k] % 2 === 0) {
      object2[k] = object[k];
  //4. value 값이 문자형이면 객체에 대입한다. 
    } else if ( typeof(object[k]) === &amp;quot;string&amp;quot; ) {
      object2[k] = object[k];
    } 
  }
  return object2;
  // your code here
}

&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Sceond&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;
function removeOddValues(input) {
	
// 1. 결과를 담을 객체를 만듭니다. 
	
  	let result = {};

// 2. input 으로 받은 object 안에 key 를 모두 반복합니다. 
  
  for (let key in input) {
	  let value = input[key];
	  let isNumber = typeof value === &#39;number&#39;;

	  if (isNumber ) {
	 
// key의 해당 하는 value가 짝수인지 확인합니다.
	 
    let isEven = value % 2 === 0;
    if (isEven) {
	 
// 만든 객체에 key, value를 추가합니다.
	 
    result[key] = value;
	    }
   }
// 숫자가 아니면
	
    else {
	
//만든 객체에 key, value 를 추가합니다.

  	result[key] = value;	
    }
  }
  return result;
}

removeOddValues({ a: 1, b: 2, c: 3, d: &#39;hello&#39; })


&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;third&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;
function removeOddValues(object) {
  //1. value 값을 판별하기 위해 key 값을 반복한다.
  for (let k in object) {
  //2. value 값이 숫자이고 홀수이면 삭제한다. 
    if (typeof(object[k]) === &#39;number&#39; &amp;amp;&amp;amp; object[k] % 2 === 1) {
    delete object[k];
     }
  }
  return object;
  }

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;firstcharacter&#34;&gt;firstCharacter&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;In this exercise, a string is passed to a method and a new string has to be returned with the first character of each word in the string (문자열이 주어졌을때, &amp;ldquo;firstCharacter&amp;rdquo; 함수는 문자열의 각 단어 첫글자들로 이루어진 문자열을 반환하여야 합니다.)&lt;/p&gt;

&lt;p&gt;Attention! In test case 5 userinput is one space input char as &amp;lsquo; &amp;lsquo;, please do not get confused with &amp;ldquo;, empty string (주의사항! 테스트 케이스 5 에서 주는 입력값은 띄어쓰기 한개(&amp;rsquo; &amp;lsquo;) 입니다. 빈 문자열(&amp;rdquo;) 과 혼동하지 마세요.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;My_Soultion&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
unction firstCharacter (string) {
 // Your code here
 
 
 // for문 이용
 
 let output = [];
 let temp_arr = [];

 // 1. split으로 단어로 나눠서 배열 만들기
 
 temp_arr = string.split(&#39; &#39;);
 // 2. 각 인덱스의 첫번째 문자를 배열 output 에 담기
 for(let i=0;i&amp;lt;temp_arr.length;i++){
   output.push(temp_arr[i][0]);
 }
 
 // 4. 출력
 return output.join(&#39;&#39;);
 
 
 
 ////////////////////////////////////////////////////////////////////////
 
 // 2. Reduce 이용
 return string.split(&#39; &#39;).reduce(function(acc,cur){
   return acc+cur[0];
 
 },&#39;&#39;);
 
 // 3. Reduce이용 2
 return string.split(&#39; &#39;).reduce( (acc,cur)=&amp;gt;acc+cur[0] ,&#39;&#39;);
}




&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;question-6&#34;&gt;Question&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;dashInsert&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Have the function DashInsert insert dashes (&amp;lsquo;-&amp;rsquo;) between each two odd numbers in str. (문자열이 주어졌을때, &amp;lsquo;DashInsert&amp;rsquo; 함수는 문자열에 있는 두 홀수 사이에 대시(&amp;lsquo;-&amp;rsquo;)를 추가하여 반환합니다.)&lt;/p&gt;

&lt;p&gt;For example: if str is 454793 the output should be 4547-9-3. (예시: 주어진 문자열이 454793 이라면 결과값은 4547-9-3 입니다.) Don&amp;rsquo;t count zero as an odd number. (0 을 홀수로 간주하지 마세요.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
// 1/for 문


function DashInsert(string) {
 


 let output = [];
 let tmp=string.split(&#39;&#39;);
 for(let i=0;i&amp;lt;tmp.length;i++){
   //홀수가 연속해서 나올때 =&amp;gt; i번째와 &#39;-&#39;을 넣는다.
   if(tmp[i]%2 &amp;amp;&amp;amp; tmp[i+1]%2){// 1,3
     output.push(tmp[i],&#39;-&#39;);//1,-,3
   }else{
     output.push(tmp[i]);
   }
 }
 return output.join(&#39;&#39;);
 }

///////////////////////////////////////////////////////////////////

reduce 

function DashInsert(string) {
 
 let output = &#39;&#39;;
 let tmp = string.split(&#39;&#39;);
 output = tmp.reduce(function(acc,cur){
   if((acc)%2===1 &amp;amp;&amp;amp; (cur)%2===1) return acc+&#39;-&#39;+cur;
   else return acc+cur;
 });
 return output;

}


////////////////////////////////////////////////////////////////////

// 2.splice

function DashInsert(string) {
  let arr = string.split(&#39;&#39;);
  for (let i = 0; i &amp;lt; arr.length; i++) {
    if ( arr[i] % 2 === 1 &amp;amp;&amp;amp; arr[i + 1] % 2 === 1) {
      arr.splice(i +1,0,&#39;-&#39;);
    }
  }
  return arr.join(&#39;&#39;);
}




&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;longestword&#34;&gt;longestWord&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;sing the JavaScript language, have the function LongestWord take the sen parameter being passed and return the largest word in the string. (문장이 주어졌을때, &amp;lsquo;LongestWord&amp;rsquo; 함수는 주어진 문장에서 가장 긴 단어를 반환합니다.)&lt;/p&gt;

&lt;p&gt;If there are two or more words that are the same length, return the first word from the string with that length. Assume sen will not be empty. (만약 가장 긴 단어가 두개 이상이라면, 첫번째로 등장하는 가장 긴 단어를 반환하세요. 문장은 빈 문자열이 아닙니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;My_Soultion&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
// It&#39;s used by sort() 

function longestWord(string) {

// 1. 주어진 문장을 배열로 만들기(split)
let tmp = string.split(&#39; &#39;);
//let sorted_tmp =[];
// [&#39;I&#39;,&#39;love&#39;,&#39;codestates&#39;];
// 2. sort() 사용 =&amp;gt; 성능 떨어짐
let x = function(a,b){
return b.length-a.length;
};
// 3. 0번째 요소 출력
return tmp.sort(x)[0];
}

////////////////////////////////////////////////////////

// It&#39;s used by reudce(1)

function longestWord(string) {
 
let tmp = string.split(&#39; &#39;);
let max = tmp[0];
for(let i =1;i&amp;lt;tmp.length;i++){
if(tmp[i].length&amp;gt;max.length){
 max = tmp[i];
}
}
return max;
}


/////////////////////////////////////////////////////////

// It&#39;s used by reudce(2) 화살표

function longestWord(string) {

return string.split(&#39; &#39;).reduce((acc,cur)=&amp;gt; acc.length&amp;lt;cur.length? cur:acc);
}

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;convertarraytoobject1&#34;&gt;convertArrayToObject1&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Question&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function &amp;lsquo;transformFirstAndLast&amp;rsquo; that takes in an array, and returns an object with: (배열을 입력으로 받고 다음 조건에 만족하는 객체를 반환하는 함수 &amp;lsquo;transformFirstAndLast&amp;rsquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;the first element of the array as the object&amp;rsquo;s key, and (1. 배열의 첫번째 요소를 객체의 키로 가집니다.)
the last element of the array as that key&amp;rsquo;s value. (2. 배열의 마지막 요소를 해당 키의 값으로 가집니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;My_Soultion&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
function transformFirstAndLast(array) {
  // your code here

  // 1. 마지막으로 출력할 객체를 만든다.
  // 2. 배열의 첫번째 요소를 가져와 변수에 담는다.
  // 3. 배열의 마지막 요소를 가져와 변수에 담는다.
  // 4. 객체안에 첫번째 요소를 키로 설정한다.
  // 5. 객체안에 마지막 요소를 prop 설정한다. 

  let ret = {};
  ret[array[0]] = array[array.length -1 ];
  return ret;
}



&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;convertobjecttoarray1&#34;&gt;convertObjectToArray1&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Question&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;getAllKeys&amp;rdquo; which returns an array of all the input object&amp;rsquo;s keys. (객체를 입력으로 받고 해당 객체의 키들을 배열로 반환하는 &amp;ldquo;getAllKeys&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;My_Soultion&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;

function getAllKeys(obj) {
// your code here

// 1. 마지막에 출력할 새로운 배열을 만든다
// 2. for in key 값을 가져온다. 
// 3. 가져온 값을 새로 만든 배열에 넣는다.
let arr = [];
for ( key in obj ) {
  arr.push(key);
}
return arr;
}


&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;convertarraytoobject2&#34;&gt;convertArrayToObject2&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Question&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function &amp;lsquo;fromListToObject&amp;rsquo; which takes in an array of arrays, and returns an object with each pair of elements in the array as a key-value pair. (2차원 배열을 입력으로 받고 배열안에 있는 배열의 요소 페어를 키-값 페어로 가지는 객체를 반환하는 함수 &amp;lsquo;fromListToObject&amp;rsquo; 함수를 작성하세요.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;My_Soultion&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function fromListToObject(array) {
  // your code here
  
  //  1. output 할 빈객체를 생성한다.  
  //  2. for 문으로 배열 안에 있는 배열을 조사한다.
  //  3. 배열안에 있는 배열의 0번째 를 키값 1번째를 prop 에 넣는다.
 
  
  let obj = {};

  for ( let i = 0; i &amp;lt; array.length; i = i + 1 ) {
    obj[array[i][0]] = array[i][1];
    }
    return obj
}



&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;convertobjecttoarray2&#34;&gt;convertObjectToArray2&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Questoin&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;listAllValues&amp;rdquo; which returns an array of all the input object&amp;rsquo;s values. (객체를 입력으로 받고 해당 객체의 값들을 배열로 반환하는 &amp;ldquo;listAllValues&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;My_Soultion&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function listAllValues(obj) {
  // your code here
  
  // 1. output 할 빈 배열을 생셩
  // 2. for in prop 값을 조사
  // 3. prop 값을 빈배열에 넣는다. 
  // 4. output 출력한다. 
  
  let arr = [];
  for ( prop in obj ) {
    arr.push(obj[prop]);
  } 
  return arr;
}




&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;convertArrayToObject3&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Question&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;transformEmployeeData&amp;rdquo; that transforms some employee data from one format to another. (사원들의 정보를 다른 형태로 변형 할 수 있는 함수 &amp;ldquo;transformEmployeeData&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;The argument will look something like this: (사원들의 정보는 아래와 같은 배열로 주어질 수 있습니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;My_Soultion&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
function transformEmployeeData(array) {

  // 1. 맨 위 배열을 루프 데이터 가져온다.
  // 2. 가지고온 배열을 또 루프 를 돌려서 가져온다.
  // 3. 가지고온 배열을 0번째는 obj key 1번째는 value
  // 4. 만든 obj 를 배열에 푸시 
  
  
  let arr = [];
  
  for ( let i = 0; i &amp;lt; array.length; i = i + 1 ) {
    let data = {};
    for ( let n = 0; n &amp;lt; array[i].length; n = n + 1 ) {
      data[array[i][n][0]] = array[i][n][1];
    }
    arr.push(data);
  }
  return arr;


&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;other_Soultion&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;




function transformEmployeeData(array) {
  // your code here
 // [key] start: firstName - last: role
 // return [{}] index0 key; index1 value;
  
 // 배열 안에 객체가 들어가 있는 것을 반환해야하니까
 // 빈배열 선언하고 빈 객체 선언 해서 빈 객체에 값 넣고
 //그 객체를 빈 배열에 넣어주고
 // 최종적으로 return 그 배열 해 주면 됨

  let result = [];

  for (let i of array){ // 여기서 i 는 [[&#39;firstName&#39;, &#39;Joe&#39;], [&#39;lastName&#39;, &#39;Blow&#39;], [&#39;age&#39;, 42], [&#39;role&#39;, &#39;clerk&#39;]]
    let obj = {};
   for (let j of i){ // 여기서 j는 [&#39;firstName&#39;, &#39;Joe&#39;]
     obj[j[0]] = j[1]; // j의 0번 elemente &#39;firstName&#39; , 1번 element &#39;Joe&#39;
    // obj[array[j][0]] = array[j][1];
   }
   result.push(obj);
  }

return result;
}


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;greetCustomers&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Qutestion&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;greetCustomer&amp;rdquo;. (&amp;ldquo;greetCustomer&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given a name, &amp;ldquo;greetCustomer&amp;rdquo; returns a greeting based on how many times that customer has visited the restaurant. Please refer to the customerData object. (고객들의 방문 횟수를 가지고 있는 객체와 이름이 주어졌을때, &amp;ldquo;greetCustomer&amp;rdquo; 함수는 손님이 몇번 방문했는지에 따라 다른 인삿말을 반환합니다. customerData 객체를 참고해 주세요.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;My_Soultion&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
function greetCustomer(customerData, firstName) {
  let greeting = &#39;&#39;;
  // your code here

  // 1 . 객체의 속성의 객체의 속성값 접근한다.
  // 2.  객체의 속성의 객체의 속성값이 undefinded 이라면 1 greeting 대입
  // 3.  객체의 속성의 객체의 속성값이 1 이라면 2  greeting 대입
  // 4.  객체의 속성의 객체의 속성값이 1 보다 크다면 3 greeting 대입

    if (!customerData[firstName]) {
        greeting = `Welcome! Is this your first time?`;
    } else if (customerData[firstName].visits === 1  ) {;
        greeting = `Welcome back, ${firstName}! We&#39;re glad you liked us the first time!`
    } else if ( customerData[firstName].visits &amp;gt; 1 ) {
        greeting =  `Welcome back, ${firstName}! So glad to see you again!`;
    }
    return greeting;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;convertDoubleSpaceToSingle&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Question&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function called &amp;ldquo;convertDoubleSpaceToSingle&amp;rdquo;. (&amp;ldquo;convertDoubleSpaceToSingle&amp;rdquo; 함수를 작성하세요.)&lt;/p&gt;

&lt;p&gt;Given a string, &amp;ldquo;convertDoubleSpaceToSingle&amp;rdquo; returns the passed in string, with all the double spaces converted to single spaces. (문자열이 주어졌을때, &amp;ldquo;convertDoubleSpaceToSingle&amp;rdquo; 함수는 주어진 문자열에 있는 띄어쓰기 두개(double spaces)를 띄어쓰기 한개(single space)로 변환한 뒤 해당 문자열을 반환합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;My_Soultion&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
function convertDoubleSpaceToSingle(str) {
  
  // 1. 문자열을 split() 를 사용해서 str 변수에 배열로 저장한다.
  // 2. reduce 를 사용해서 배열에 담긴 문자의 single space로 만들어 출력한다. 

  let strArr = str.split(&amp;quot;  &amp;quot;);
  let output = strArr.join(&amp;quot; &amp;quot;);
  return output;
}


// Refactoing

function convertDoubleSpaceToSingle(str) {
  return str.split(&amp;quot;  &amp;quot;).join(&amp;quot; &amp;quot;);

}


&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;other_Soultion&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
function convertDoubleSpaceToSingle(str) {
  return str.replace( /  +/g,&#39; &#39;);
}
잘되긴 하는데.... ㅡ,.ㅡ

/ +/g 부분이 이해가 가지 않습니다...............
/(빈칸 두개)+/g 를 찾아서 &#39; &#39;로 바꿔준다는 것 같습니다.

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;other_Soultion&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
function convertDoubleSpaceToSingle(str) {

var array = str.split(&#39; &#39;); // 문자열 배열 만들기  [ &#39;string&#39;, &#39;&#39;, &#39;with&#39;, &#39;&#39;, &#39;double&#39;, &#39;&#39;, &#39;spaces&#39; ]

for (i = 0; i&amp;lt;=array.length; i++) { // for 문을 이용해 배열 접근 
  if (array[i] === &#39;&#39;) { //만약 각각의 요소가 &#39;&#39; 와 같다면
    array.splice(i,1); // splice 접근해서 삭제 
  }
}

return array.join(&#39; &#39;); // 각각의 문자열을 join &#39; &#39; 를 나눠서 출력 

}


&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
