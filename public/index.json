[{"authors":["admin"],"categories":null,"content":"Nelson Bighetti is a professor of artificial intelligence at the Stanford AI Lab. His research interests include distributed robotics, mobile computing and programmable matter. He leads the Robotic Neurobiology group, which develops self-reconfiguring robots, systems of self-organizing robots, and mobile sensor networks.\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Sed neque elit, tristique placerat feugiat ac, facilisis vitae arcu. Proin eget egestas augue. Praesent ut sem nec arcu pellentesque aliquet. Duis dapibus diam vel metus tempus vulputate.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"598b63dd58b43bce02403646f240cd3c","permalink":"/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"author","summary":"Nelson Bighetti is a professor of artificial intelligence at the Stanford AI Lab. His research interests include distributed robotics, mobile computing and programmable matter. He leads the Robotic Neurobiology group, which develops self-reconfiguring robots, systems of self-organizing robots, and mobile sensor networks.\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Sed neque elit, tristique placerat feugiat ac, facilisis vitae arcu. Proin eget egestas augue. Praesent ut sem nec arcu pellentesque aliquet.","tags":null,"title":"John Jung","type":"author"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Academic\u0026rsquo;s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further talk details can easily be added to this page using Markdown and $\\rm \\LaTeX$ math code.\n","date":1906516800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906516800,"objectID":"96344c08df50a1b693cc40432115cbe3","permalink":"/talk/example/","publishdate":"2017-01-01T00:00:00+09:00","relpermalink":"/talk/example/","section":"talk","summary":"An example talk using Academic's Markdown slides feature.","tags":[],"title":"Example Talk","type":"talk"},{"authors":null,"categories":[],"content":" __\nnew Learning __\nbranch 충돌 방지하기  merge 하는 중 출돌이 존재할수 있다.\nmaster branch 와 develop branch와 내용이 다를경우 master branch 에서 통합을 한다.\nmerge 하는 순간 conflict 가 발생 한다.\ngit은 병합한 코드가 무엇이 다른지 코드안에 표시가 되게 한다. 그리고 그분은에 들어가서 HAED 부분을 선택할지 develop 부분을 선택할지 직접 수동으로 코드를 삭제해서 결정을 하고 저장한다.\ngit add . 하고 다시 git merge develop 한다.\n그럼 병합이 된것이다.\n확인 git merge develop 하면 이미 병합이 되었다 .\n그럼 log 하면 같은 화면에 master와 develop 가 동시에 나온다.\ndevelop 는 필요없기 떄문 git branch -d develop 명령으로 삭제한다.\ngit branch 만 확인하면 master branch 만 남아있다.\ngit push 로 마무리\n git : Branch  Branch : git 은 동시에 여러 개발자들이 프로젝트에서 각기 다른 기능을 개발할 수 있도록 브랜치 (branch) 기능을 제공한다.\n  일반적으로 EX)   Master Branch Develop Branch Bug Fix Branch\n기능들이 수정되면 Master Branch 에 합치기(Merge) 라면 명령어를 사용해서 합치면 된다.\nBranch 에는 두가지 용어\n 통합Branch : Master Branch 를 말한다. 토픽Branch : 특정 기능을 위해 만들어진 Branch 를 말한다.    실습   git branch 명령 하면 현재 몇개의 branch 가 있는지 확일할수 있다.\ngit branch develop 명령 branch 생성\ncheakout develop 명령을 현재 default 값이 master 에서 새로만든 develop branch 로 바꿔준다. (git branch 로 확인할수 있다.);\n이상태에서 기존 master branchs 에 있는 코드에 수정을 하고 git add 하고 git commit 을 하고 log 명렁을 하면 현재 \u0026lsquo;HAED -\u0026gt; develop\u0026rsquo; 바뀐것을 볼수 있다.\n그러면 master branch 에는 적용이 안되있고 새로생성한 branch 에만 해당되어있다. 그러면 develop 에서 작업을 할수 있다.\n이것을 합치기 위해서는 merge 명령을 한다.\ngit cheakout master 명령을 해서 되돌아 간다.\n그리고 git merge develop 명령을 해서 합친다.\n마지막으로 git push 명령을 해서 깃허브에 저장한다.\n필요없는 branch develop 를 삭제는 git branch -d develop 이다.\n git : **기존에 commit한 내용으로 되돌아 가기 **  log 명령을 하고\ngit reset \u0026ndash;hard 9a9sdsa8fsdfsd6a78f6safs 명령을 한다.\n가져온 주소명령으로 돌아가고 그 이후에 있는 commit 내용들을 싹다 지운다.\n주의 commit 내용들이 지워질뿐 아니라 모든 로컬에 저장되어있는 파일들도 제거된다.\n그리고 나서 push 를 해주는데 push -f 를 명령해야 깃허브 저장소에서도 동일하게 적용된다.\n git :log  그동안 commit 한 내용을 볼수 있다.\nenter 키를 치면 밑에 내용을 계속 볼수 있다. log 파일을 나오려면 q 버튼을 누르면 된다.\n git :commit \u0026ndash; amend  commit 명령을 잘못 넣으면 이명령어를 통해 수정할수 있다.\nunix 에디터가 실행된다. 이모드는 수정모두와 관리자 모드로 나뉜다.\n수정 모드로 들어가고자 한다면 a 를 입력하면 된다.\n그리고 내용을 수정하고 ESC 누르고 : 입력하면 wq! 수정되고 밖으로 나오게 된다.\ngit status 하면 수정된 파일을 볼수 있다.\ngit push -f 강제로 명령하면 적용된다.\n git :cheakout\u0026ndash;  add 한다음에 git status 명령을 하면 수정된 파일이 스테이지에 올라가게 된다.\ncheakout\u0026ndash; 이라는 명령을 하면 add 하기전 코드상태로 되돌아 간다.\n git :reset  add 한 파일을 다시 되돌리기\n __\nnew Learning __\nGit : pwd  print working Directory\n Git : ls  print working List\n Git :cd  go back to beginning\n Git :cd -  previous directory (or back)\n Git :init  Create an empty Git repository or reinitialize an existing one\n Git :clone  Clone a repository into a new directory\n Git :add .  Add all file contents to the index\n Git : add  one file add\n git add jung.html  Git :rm  Remove files\n Git :rm -f  Remove files and directory\n Git :mkdir  create directory\n  ex\ngit mkdir jung   Git :touch  create file\n  ex\ngit touch jung.txt   Git :commit -m \u0026ldquo;\u0026rdquo;  write message into github\n Git :remote add origin\u0026rdquo;\u0026rdquo;  link local to github\n Git remote add origin \u0026quot;https://github.com/J-E-Y/test_2.git\u0026quot;  Git : Push git push -u origin master 최종 깇허브에 올리기 git push -u origin master git push -f origin master ( 강제로)  Git : log git log 기록 업데이트한 기록 확인  Git : status git 현재 진행 상태 보기  Git : Add your github email and username to git git config --global user.email \u0026quot;yourGitHub@email.com\u0026quot; git config --global user.name \u0026quot;yourGitHubusername\u0026quot;  Git : branch  `기능 변경을 하고 싶을 때 생성 및 사용` 기능 변경하기 이미 돌아가고 있는 프로그램에서 기능을 바꾸고 싶은 일이 생길 수 있습니다. 그럴 때 어떻게 해야 하나요? 보통 초보 개발자들은 주석을 활용합니다. 돌아가고 있는 부분을 삭제하면 아까우니까 주석 처리하고 개발합니다. 시간이 지나면 코드가 엉망진창으로 짜장짬뽕 믹싱이 되는데 이런 코드를 스파게티 코드라고 하죠. 이런 상황을 막기 위해서 브랜치를 사용할 수 있습니다.  Git : merge 한 브랜치의 내용을 다른 브랜치에 반영 (통합)  Git : checkout 저장소에서 특정 커밋이나 브랜치로 돌아가고 싶을 때 사용  Git : diff   ","date":1573689600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1573689600,"objectID":"af8d092a9f319b71e6ce8059a7538aa3","permalink":"/tutorial/main-git/","publishdate":"2019-11-14T00:00:00Z","relpermalink":"/tutorial/main-git/","section":"tutorial","summary":"write here:rocket:","tags":["Git"],"title":"Git","type":"docs"},{"authors":null,"categories":[],"content":" \u0026lt;strong\u0026gt; /* The HTML \u0026lt;strong\u0026gt; tag gives text a strong emphasis which traditionally means that the text is displayed as bold by the browser. Note what's the difference bewteen strong tag and b tag ? strong tag :시각장애인들 낭독기를 사용할때 조금 더 굵 게 읽는다. b tag :평상시대로 굵게 읽는다. */  \u0026lt;h1\u0026gt; \u0026lt;!-- The HTML \u0026lt;h1\u0026gt; tag defines the highest level or most important heading in the HTML document. This tag is also commonly referred to as the \u0026lt;h1\u0026gt; element. --\u0026gt; \u0026lt;!-- Syntax--\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Heading 1 goes here\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt;  \u0026lt;br\u0026gt; \u0026lt;!-- The HTML \u0026lt;br\u0026gt; tag defines a line break within text in the HTML document. This tag is also commonly referred to as the \u0026lt;br\u0026gt; element.--\u0026gt; \u0026lt;!-- Syntax --\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;The paragraph starts here\u0026lt;br\u0026gt; and ends on the next line.\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt;  \u0026amp;nbsp; (making space) /* HTML will only display one space between words, no matter how many times you press the space bar. To force an extra space to show up, type `\u0026amp;nbsp;` in the area where you want to force the space. */  \u0026lt;p\u0026gt; \u0026lt;!--- The HTML \u0026lt;p\u0026gt; tag defines a paragraph in the HTML document. This tag is also commonly referred to as the \u0026lt;p\u0026gt; element.--\u0026gt; * syntax \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;The paragraph goes here.\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt;  \u0026lt;hr\u0026gt; \u0026lt;!-- The HTML \u0026lt;hr\u0026gt; tag defines a thematic break between paragraphs in HTML5, and a horizontal rule in HTML 4.01. This tag is also commonly referred to as the \u0026lt;hr\u0026gt; element. * Note The HTML \u0026lt;hr\u0026gt; element makes line bewteen two paragraphs. * Syntax --\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;This is the first paragraph.\u0026lt;/p\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;p\u0026gt;This is the second paragraph.\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt;  \u0026lt;div\u0026gt; \u0026lt;!-- The HTML \u0026lt;p\u0026gt; tag defines a generic container in an HTML document that is generally used to group elements. This tag is also commonly referred to as the \u0026lt;p\u0026gt; element. * Note The HTML \u0026lt;p\u0026gt; element is found within the \u0026lt;body\u0026gt; tag. The \u0026lt;div\u0026gt; tag is generally used to group elements together. \u0026lt;p\u0026gt; :element is a block-level element. * Syntax --\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div\u0026gt; \u0026lt;div\u0026gt;this is the type of elemnt \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt;  \u0026lt;span\u0026gt; \u0026lt;!-- `height 와 width 적용이 안된다.` 하지만 Disply 사용해서 적용할수 있다 The HTML \u0026lt;span\u0026gt; tag defines a generic inline container in an HTML document. This tag is also commonly referred to as the \u0026lt;span\u0026gt; element. Note \u0026lt;span\u0026gt; tag is is generally used for styling purposes when there is no other element to use. \u0026lt;span\u0026gt; tag is a inline-level element \u0026lt;span\u0026gt; tag does not inherently represent anything Syntax --\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;\u0026lt;span\u0026gt;Span text goes here\u0026lt;/span\u0026gt; and not here\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;\u0026lt;span class=\u0026quot;red_text\u0026quot;\u0026gt;Span text goes here\u0026lt;/span\u0026gt; and not here\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt;  \u0026lt;nav\u0026gt; \u0026lt;!-- The HTML \u0026lt;nav\u0026gt; tag is an HTML5 element that defines a section with navigation links in the HTML document. This tag is also commonly referred to as the \u0026lt;nav\u0026gt; element. It is used to define a block of navigation links, either within the current document or to other documents * Note The \u0026lt;nav\u0026gt; tag is used to create navigation in the HTML document.For IE browsers older than IE 9, use HTML5shiv which is a javascript workaround to provide support for the new HTML5 elements such as: \u0026lt;header\u0026gt;, \u0026lt;main\u0026gt;, \u0026lt;article\u0026gt;, \u0026lt;section\u0026gt;, \u0026lt;aside\u0026gt;, \u0026lt;nav\u0026gt;, \u0026lt;footer\u0026gt;. * Syntax --\u0026gt; \u0026lt;body\u0026gt; \u0026lt;nav\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;/section1/index.html\u0026quot;\u0026gt;Section1\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;/section2/index.html\u0026quot;\u0026gt;Section2\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;/section3/index.html\u0026quot;\u0026gt;Section3\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; \u0026lt;/body\u0026gt;  \u0026lt;ul\u0026gt; \u0026lt;!-- * Description (부모태그) The HTML \u0026lt;ul\u0026gt; tag defines an unordered list in the HTML document. This tag is also commonly referred to as the \u0026lt;ul\u0026gt; element. * Note The HTML \u0026lt;ul\u0026gt; element is found within the \u0026lt;body\u0026gt; tag. The \u0026lt;ul\u0026gt; tag is made up of \u0026lt;li\u0026gt; tags. Use the \u0026lt;ul\u0026gt; tag when the list items have no numerical ordering. You can nest \u0026lt;ol\u0026gt;, \u0026lt;ul\u0026gt; and \u0026lt;ul\u0026gt;menu lists. * Syntax --\u0026gt; \u0026lt;body\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;First item\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Second item\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Third item\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/body\u0026gt;  \u0026lt;li\u0026gt; \u0026lt;!-- * Description (부모태그) The HTML \u0026lt;li\u0026gt; tag defines a list item in \u0026lt;ol\u0026gt;, \u0026lt;ul\u0026gt; or \u0026lt;menu\u0026gt; in the HTML document. This tag is also commonly referred to as the \u0026lt;li\u0026gt; element. * Syntax --\u0026gt; \u0026lt;body\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;First item\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Second item\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Third item\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;body\u0026gt; \u0026lt;ol\u0026gt; \u0026lt;li\u0026gt;First item\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Second item\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Third item\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; \u0026lt;/body\u0026gt; * Sample Output 2 \u0026lt;body\u0026gt; \u0026lt;menu type=\u0026quot;toolbar\u0026quot;\u0026gt; \u0026lt;li\u0026gt; \u0026lt;menu label=\u0026quot;File\u0026quot;\u0026gt; \u0026lt;button type=\u0026quot;button\u0026quot; onclick=\u0026quot;new()\u0026quot;\u0026gt;New\u0026lt;/button\u0026gt; \u0026lt;button type=\u0026quot;button\u0026quot; onclick=\u0026quot;save()\u0026quot;\u0026gt;Save\u0026lt;/button\u0026gt; \u0026lt;/menu\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;menu label=\u0026quot;Edit\u0026quot;\u0026gt; \u0026lt;button type=\u0026quot;button\u0026quot; onclick=\u0026quot;copy()\u0026quot;\u0026gt;Copy\u0026lt;/button\u0026gt; \u0026lt;button type=\u0026quot;button\u0026quot; onclick=\u0026quot;paste()\u0026quot;\u0026gt;Paste\u0026lt;/button\u0026gt; \u0026lt;/menu\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/menu\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;!-- * Note The \u0026lt;li\u0026gt; tag is used within \u0026lt;ol\u0026gt;, \u0026lt;ul\u0026gt; or \u0026lt;menu\u0026gt;. You can nest \u0026lt;ol, \u0026lt;ul\u0026gt; and \u0026lt;menu\u0026gt; lists. (자식태그) li 태그는 반드시 부모태그를 가지고 있다. --\u0026gt;  \u0026lt;ol\u0026gt; \u0026lt;!-- * Description (자식태그) The HTML \u0026lt;ol\u0026gt; tag defines an ordered list in the HTML document. This tag is also commonly referred to as the \u0026lt;ol\u0026gt; element. * Syntax --\u0026gt; \u0026lt;body\u0026gt; \u0026lt;ol\u0026gt; \u0026lt;li\u0026gt;First item\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Second item\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Third item\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;!-- * Note The \u0026lt;ol\u0026gt; tag is made up of \u0026lt;li\u0026gt; tags. Use the \u0026lt;ol\u0026gt; tag when the list items have numeric, meaningful ordering. You can nest \u0026lt;ol\u0026gt;, \u0026lt;ul\u0026gt; and \u0026lt;menu\u0026gt; lists. --\u0026gt;  \u0026lt;form\u0026gt; \u0026lt;!-- * Description The HTML `\u0026lt;form\u0026gt; tag` is used to create a form on a web page that has interactive controls for user input. This tag is also commonly referred to as the `\u0026lt;form\u0026gt;` element. * Syntax --\u0026gt; \u0026lt;body\u0026gt; \u0026lt;form action=\u0026quot;\u0026quot; method=\u0026quot;get\u0026quot;\u0026gt; Company: \u0026lt;input type=\u0026quot;text\u0026quot; name=\u0026quot;company\u0026quot;\u0026gt;\u0026lt;br\u0026gt; Address: \u0026lt;input type=\u0026quot;text\u0026quot; name=\u0026quot;address\u0026quot;\u0026gt;\u0026lt;br\u0026gt; \u0026lt;input type=\u0026quot;submit\u0026quot; value=\u0026quot;Submit\u0026quot;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/body\u0026gt;  Sample Output\n\u0026lt;container\u0026gt; \u0026lt;!-- * Description In HTML, the container is the area enclosed by the beginning and ending tags. For example \u0026lt; HTML \u0026gt; encloses an entire document while other tags may enclose a single word, paragraph, or other elements. In HTML code, all container must have a start and stop tag to close the container. Without a stop tag the start tag will apply to the entire document. --\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026quot;container\u0026quot;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; \u0026lt;!-- * note The container div, and sometimes content div, are almost always used to allow for more sophisticated CSS styling. The body tag is special in some ways. Browsers don't treat it like a normal div; its position and dimensions are tied to the browser window. But a container div is just a div and you can style it with margins and borders. You can give it a fixed width, and you can center it with margin-left: auto; margin-right: auto. Plus, content, like a copyright notice for example, can go on the outside of the container div, but it can't go on the outside of the body, allowing for content on the outside of a border. --\u0026gt;  cashing \u0026lt;!-- * Description 파일을 따로 만든후 저장해놓는것 * how to use it? \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=“파일이름\u0026quot;\u0026gt; * Sample Output --\u0026gt; \u0026lt;!doctype html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;title\u0026gt;web1 - Son\u0026lt;/title\u0026gt; \u0026lt;meta charset=\u0026quot;ut-8\u0026quot;\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;style.css\u0026quot;\u0026gt;  ","date":1573689600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1573689600,"objectID":"428a35c57122d9972f43509f849a963c","permalink":"/tutorial/html-css/","publishdate":"2019-11-14T00:00:00Z","relpermalink":"/tutorial/html-css/","section":"tutorial","summary":"write here:rocket:","tags":["Html\u0026\u0026Css"],"title":"Html\u0026\u0026Css","type":"docs"},{"authors":null,"categories":[],"content":" this is why I want to 1.data type 자료형이란?  어떤 종류의 데이터를 사용하는 것이지 컴퓨터에게 알려주는 것 자료형마다 사용 가능한 연산자(Operator)를 따로 가지고 있습니다! 자료형이 같아야 연산을 할 수 있습니다!\n 자료형의 종류  Number :숫자 String :문자 Boolean :true and False Null : 값이 비어있다 Undefined :값이 정의되지 않았다 symbol(new in ECMAScript 6) and Object :  1. Number type (숫자)  ex)\nvar firstNum = 10; // 소수점을 사용하지 않은 표현 var secondNum = 10.00; // 소수점을 사용한 표현 var thirdNum = 10e6; // 10000000 var fourthNum = 10e-6; // 0.00001  length\nvar a = \u0026quot;hello\u0026quot; a.length;  slice :자르기\nvar a = \u0026quot;KheLLo\u0026quot; a[0]; a[1] = \u0026quot;H\u0026quot;; //안 됨 a.slice(1,4); a.toUpperCase(); : 대문자로 바뀐 a.toLowerCase(); : 소문자로 바뀐다   2. String (문자열) \u0026quot;I am String\u0026quot;; \u0026quot;Hello \u0026quot; + \u0026quot;world\u0026quot;;  3. Boolean (불리언) true; false; 5 \u0026gt; 3; 5 === 5; 5 \u0026gt; 5;  4. The typeof Operator: 데이터유형을 알려주는 중요한 연산자! typeof 10; // number 타입 typeof \u0026quot;문자열\u0026quot;; // string 타입 typeof true; // boolean 타입 typeof undefined; // undefined 타입 typeof null; // object 타입  5. symbol (심볼)  심볼 타입은 ECMAScript 6부터 새롭게 추가된 타입이다. 심볼은 유일하고 변경할 수 없는 타입으로, 객체의 프로퍼티를 위한 식별자로 사용할 수 있다.\n ex)\nvar sym = Symbol(\u0026quot;javascript\u0026quot;); // symbol 타입 var symObj = Object(sym); // object 타입   6. object (객체)  자바스크립트의 기본 타입은 객체(object)이다. 객체(object)란 실생활에서 우리가 인식할 수 있는 사물로 이해할 수 있다. 객체는 여러 프로퍼티(property)나 메소드(method)를 같은 이름으로 묶어놓은 일종의 집합체이다.\n ex)\nvar dog = { name: \u0026quot;해피\u0026quot;, age: 3 }; // 객체의 생성 // 객체의 프로퍼티 참조 document.getElementById(\u0026quot;result\u0026quot;).innerHTML = \u0026quot;강아지의 이름은 \u0026quot; + dog.name + \u0026quot;이고, 나이는 \u0026quot; + dog.age + \u0026quot;살 이다.\u0026quot;;   2.Variable Using Variables var x = 10; x + 5 ; // =\u0026gt; 15 x ; // =\u0026gt; 10 once we have created our variables, we can use their name as a substitute for their value elsewhere in our program.  Declaring a variable without a Vaue  Creating a variable in JavaScript is called \u0026quot;declaring\u0026quot; a variable. 1.var carName; After the declaration, the variable has no value (technically it has the value of undefined). To assign a value to the variable, use the equal sign: 2. carName = \u0026quot;Volvo\u0026quot;; // carName 를 Volvo 로 변경할때 var 없이 만든다 cos 먼저 선언을 했기 때문이다. 2. var carName = \u0026quot;Volvo\u0026quot;;  Changing a Variable’s value  var pokemon = charmander pokemon = heelo Notice that When you change the value of a variable, \u0026quot;you don’t need to use the var keyword\u0026quot;The var keyword is only needed for creating new variables.  variable scope 변수의 유효 범위  local variable 지역 변수   Variables declared inside a function body are in the Local scope.\n지역 변수(local variable)란 함수 내에서 선언된 변수를 가리킨다. 이러한 지역 변수는 변수가 선언된 함수 내에서만 유효하며, 함수가 종료되면 메모리에서 사라진다.함수의 매개변수 또한 함수 내에서 정의되는 지역 변수처럼 동작한다.\n  ex 1-1\nvar greeting = \u0026quot;Hello\u0026quot;; function greetSomeone() { var firstName = \u0026quot;john\u0026quot; return greeting + \u0026quot; \u0026quot; + firstName; } greetSomeone firstName; // = \u0026gt; Error Function(greetSomeone) is working but \u0026quot;firstName\u0026quot;\u0026quot; is Error Because we declared our name variable inside the scope of our greetSomeone function.  global variable 전역 변수\n   Variables declared outside a function body are in the global scope.\n전역 변수(global variable)란 함수의 외부에서 선언된 변수를 가리킨다. 이러한 전역 변수는 프로그램의 어느 영역에서나 접근할 수 있으며, 웹 페이지가 닫혀야만 메모리에서 사라진다.\n  ex 1-2\n \u0026quot;But!!!!!!! if you do this it works well\u0026quot;!! var greeting = \u0026quot;Hello\u0026quot;; var firstName = \u0026quot;john\u0026quot; function greetSomeone() { firstName = \u0026quot;JJ\u0026quot; return greeting + \u0026quot; \u0026quot;+ firstName; } firstNmae // = \u0026gt; JJ Because you changed a variable the was defined in an outer scope   3.Operator arithmetic operator (산술 연산자) +\t왼쪽 피연산자의 값에 오른쪽 피연산자의 값을 더함. -\t왼쪽 피연산자의 값에서 오른쪽 피연산자의 값을 뺌. *\t왼쪽 피연산자의 값에 오른쪽 피연산자의 값을 곱함. /\t왼쪽 피연산자의 값을 오른쪽 피연산자의 값으로 나눔. %\t왼쪽 피연산자의 값을 오른쪽 피연산자의 값으로 나눈 후, 그 나머지를 반환함   ex\nvar x = 10, y = 4; document.write(x + y + \u0026quot;\u0026lt;br\u0026gt;\u0026quot;); // 14 document.write(x - y + \u0026quot;\u0026lt;br\u0026gt;\u0026quot;); // 6 document.write(x * y + \u0026quot;\u0026lt;br\u0026gt;\u0026quot;); // 40 document.write(x / y + \u0026quot;\u0026lt;br\u0026gt;\u0026quot;); // 2.5 document.write(x % y); // 2   assignment operator (대입 연산자) =\t왼쪽 피연산자에 오른쪽 피연산자의 값을 대입함. +=\t왼쪽 피연산자의 값에 오른쪽 피연산자의 값을 더한 후, 그 결과 값을 왼쪽 피연산자에 대입함. -=\t왼쪽 피연산자의 값에서 오른쪽 피연산자의 값을 뺀 후, 그 결과 값을 왼쪽 피연산자에 대입함. *=\t왼쪽 피연산자의 값에 오른쪽 피연산자의 값을 곱한 후, 그 결과 값을 왼쪽 피연산자에 대입함. /=\t왼쪽 피연산자의 값을 오른쪽 피연산자의 값으로 나눈 후, 그 결과 값을 왼쪽 피연산자에 대입함. %=\t왼쪽 피연산자의 값을 오른쪽 피연산자의 값으로 나눈 후, 그 나머지를 왼쪽 피연산자에 대입함.   ex\nvar x = 10, y = 10, z = 10; x = x - 5; y -= 5; // y = y - 5 와 같은 표현임. z =- 5; // z = -5 와 같은 표현임.   increment and decrement operator ( 증감 연산자 ) ++x\t먼저 피연산자의 값을 1 증가시킨 후에 해당 연산을 진행함. x++\t먼저 해당 연산을 수행하고 나서, 피연산자의 값을 1 증가시킴. --x\t먼저 피연산자의 값을 1 감소시킨 후에 해당 연산을 진행함. x--\t먼저 해당 연산을 수행하고 나서, 피연산자의 값을 1 감소시킴.   ex\nvar x = 10, y = 10; document.write((++x - 3) + \u0026quot;\u0026lt;br\u0026gt;\u0026quot;); // x의 값을 우선 1 증가시킨 후에 3을 뺌. document.write(x + \u0026quot;\u0026lt;br\u0026gt;\u0026quot;); // 11 document.write((y++ - 3) + \u0026quot;\u0026lt;br\u0026gt;\u0026quot;); // 먼저 y에서 3을 뺀 후에 y의 값을 1 증가시킴. document.write(y); // 11   comparison operator (비교 연산자) ==\t왼쪽 피연산자와 오른쪽 피연산자의 값이 같으면 참을 반환함. ===\t왼쪽 피연산자와 오른쪽 피연산자의 값이 같고, 같은 타입이면 참을 반환함. !=\t왼쪽 피연산자와 오른쪽 피연산자의 값이 같지 않으면 참을 반환함. !==\t왼쪽 피연산자와 오른쪽 피연산자의 값이 같지 않거나, 타입이 다르면 참을 반환함. \u0026gt;\t왼쪽 피연산자의 값이 오른쪽 피연산자의 값보다 크면 참을 반환함. \u0026gt;=\t왼쪽 피연산자의 값이 오른쪽 피연산자의 값보다 크거나 같으면 참을 반환함. \u0026lt;\t왼쪽 피연산자의 값이 오른쪽 피연산자의 값보다 작으면 참을 반환함. \u0026lt;=\t왼쪽 피연산자의 값이 오른쪽 피연산자의 값보다 작거나 같으면 참을 반환함.   ex\n var x = 3, y = 5; var a = \u0026quot;abc\u0026quot;, b = \u0026quot;bcd\u0026quot;; document.write((x \u0026gt; y) + \u0026quot;\u0026lt;br\u0026gt;\u0026quot;); // y의 값이 x의 값보다 크므로 false document.write((a \u0026lt;= b) + \u0026quot;\u0026lt;br\u0026gt;\u0026quot;); // 알파벳 순서상 'a'가 'b'보다 먼저 나오므로 'a'가 'b'보다 작음. document.write(x \u0026lt; a); // x의 값은 숫자이고 a의 값은 문자열이므로 비교할 수 없음.   Logical operator (논리연산자) \u0026amp;\u0026amp; 는 and || 는 or ! 는 Not  bitwise operator (비트 연산자)  \u0026amp;\t대응되는 비트가 모두 1이면 1을 반환함. (비트 AND 연산) |\t대응되는 비트 중에서 하나라도 1이면 1을 반환함. (비트 OR 연산) ^\t대응되는 비트가 서로 다르면 1을 반환함. (비트 XOR 연산) ~\t비트를 1이면 0으로, 0이면 1로 반전시킴. (비트 NOT 연산) \u0026lt;\u0026lt;\t지정한 수만큼 비트를 전부 왼쪽으로 이동시킴. (left shift 연산) \u0026gt;\u0026gt;\t부호를 유지하면서 지정한 수만큼 비트를 전부 오른쪽으로 이동시킴. (right shift 연산) \u0026gt;\u0026gt;\u0026gt;\t지정한 수만큼 비트를 전부 오른쪽으로 이동시키며, 새로운 비트는 전부 0이 됨.  increment/decrement operator (증감연산자)  증감 연산자는 피연산자를 1씩 증가 혹은 감소시킬 때 사용하는 연산자이다.이 연산자는 피연산자가 단 하나뿐인 단항 연산자이다.\n ex)\nvar a; a++; a = 0; a++; a--;   comparison operator (비교 연산자) ==\t왼쪽 피연산자와 오른쪽 피연산자의 값이 같으면 참을 반환함. ===\t왼쪽 피연산자와 오른쪽 피연산자의 값이 같고, 같은 타입이면 참을 반환함. !=\t왼쪽 피연산자와 오른쪽 피연산자의 값이 같지 않으면 참을 반환함. !==\t왼쪽 피연산자와 오른쪽 피연산자의 값이 같지 않거나, 타입이 다르면 참을 반환함. \u0026gt;\t왼쪽 피연산자의 값이 오른쪽 피연산자의 값보다 크면 참을 반환함. \u0026gt;=\t왼쪽 피연산자의 값이 오른쪽 피연산자의 값보다 크거나 같으면 참을 반환함. \u0026lt;\t왼쪽 피연산자의 값이 오른쪽 피연산자의 값보다 작으면 참을 반환함. \u0026lt;=\t왼쪽 피연산자의 값이 오른쪽 피연산자의 값보다 작거나 같으면 참을 반환함.  typeof 연산자  typeof 연산자는 피연산자의 타입을 반환한다.\n 숫자, NaN\t\u0026quot;number\u0026quot; 문자열\t\u0026quot;string\u0026quot; true, false\t\u0026quot;boolean\u0026quot; null\t\u0026quot;object\u0026quot; undefined\t\u0026quot;undefined\u0026quot; 함수\t\u0026quot;function\u0026quot; 함수가 아닌 객체\t\u0026quot;object\u0026quot;   ex\ntypeof \u0026quot;문자열\u0026quot; // string typeof 10 // number typeof NaN // number typeof false // boolean typeof undefined // undefined typeof new Date() // object typeof null // object   ternary operator (삼항 연산자)  삼항 연산자는 유일하게 피연산자를 세 개나 가지는 조건 연산자이다.\n  ex\nvar x = 3, y = 5; var result = (x \u0026gt; y) ? x : y // x가 더 크면 x를, 그렇지 않으면 y를 반환함. document.write(\u0026quot;둘 중에 더 큰 수는 \u0026quot; + result + \u0026quot;이다.\u0026quot;); 삼항 연산자는 짧은 if / else 문 대신 사용할 수 있으며, 코드를 간결하게 만들어 준다.   delete 연산자  delete 연산자는 피연산자인 객체, 객체의 프로퍼티(property) 또는 배열의 요소(element) 등을 삭제해 준다.\n 피연산자가 성공적으로 삭제되었을 경우에는 참(true)을 반환하고, 삭제하지 못했을 경우에는 거짓(false)을 반환한다. 이 연산자는 피연산자가 단 하나뿐인 단항 연산자이며, 피연산자의 결합 방향은 오른쪽에서 왼쪽이다.\n쉼표 연산자  쉼표 연산자를 for 문에서 사용하면, 루프마다 여러 변수를 동시에 갱신할 수 있다.\n루프마다 i의 값은 1씩 증가하고, 동시에 j의 값은 1씩 감소함.\n for (var i = 0, j = 9; i \u0026lt;= j; i++, j--) { document.write(\u0026quot;i의 값은 \u0026quot; + i + \u0026quot;이고, j의 값은 \u0026quot; + j + \u0026quot;이다.\u0026lt;br\u0026gt;\u0026quot;); }   ex\n var arr = [1, 2, 3]; // 배열 생성 delete arr[2]; // 배열의 원소 중 인덱스가 2인 요소를 삭제함. document.write(arr + \u0026quot;\u0026lt;br\u0026gt;\u0026quot;); // [1, 2, ] // 배열에 빈자리가 생긴 것으로 undefined 값으로 직접 설정된 것은 아님. document.write(arr[2] + \u0026quot;\u0026lt;br\u0026gt;\u0026quot;); // 배열의 요소를 삭제하는 것이지 배열의 길이까지 줄이는 것은 아님. document.write(arr.length);   instanceof 연산자  instanceof 연산자는 피연산자인 객체가 특정 객체의 인스턴스인지 아닌지를 확인해 준다. 피연산자가 특정 객체의 인스턴스이면 참(true)을 반환하고, 특정 객체의 인스턴스가 아니면 거짓(false)을 반환한다. 이 연산자는 두 개의 피연산자를 가지는 이항 연산자이며, 피연산자들의 결합 방향은 왼쪽에서 오른쪽이다.\n  ex\nvar str = new String(\u0026quot;이것은 문자열이다.\u0026quot;); str instanceof Object; // true str instanceof String; // true str instanceof Array; // false str instanceof Number; // false str instanceof Boolean; // false   void 연산자  void 연산자는 피연산자로 어떤 타입의 값이 오던지 상관없이 언제나 undefined 값만을 반환한다. 이 연산자는 피연산자가 단 하나뿐인 단항 연산자이며, 피연산자의 결합 방향은 오른쪽에서 왼쪽이다.\n  ex\n\u0026lt;a href=\u0026quot;javascript:void(0)\u0026quot;\u0026gt;이 링크는 동작하지 않는다.\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026quot;javascript:void(document.body.style.backgroundColor='yellow')\u0026quot;\u0026gt; 이 링크도 동작하지 않지만, HTML 문서의 배경색을 바꿔준다. \u0026lt;/a\u0026gt;   4.Conditional  if 문 if / else 문 if / else if / else 문 switch 문  if 문 if (표현식) { 표현식의 결과가 참일 때 실행하고자 하는 실행문; }   ex\nvar x = 10, y = 20; if (x == y) { document.write(\u0026quot;x와 y는 같다.\u0026quot;); } if (x \u0026lt; y) { document.write(\u0026quot;x가 y보다 작다.\u0026quot;); } if (x \u0026gt; y) // 실행될 실행문이 한 줄뿐이라면 중괄호({})를 생략할 수 있음. document.write(\u0026quot;x가 y보다 크다.\u0026quot;);   else 문  if (표현식) { 표현식의 결과가 참일 때 실행하고자 하는 실행문; } else { 표현식의 결과가 거짓일 때 실행하고자 하는 실행문; } else 문을 사용하면 앞의 예제를 좀 더 직관적으로 표현할 수 있다.   ex\nvar x = 10, y = 20; if (x == y) { document.write(\u0026quot;x와 y는 같다.\u0026quot;); } else { if (x \u0026lt; y) document.write(\u0026quot;x가 y보다 작다.\u0026quot;); else // 실행될 실행문이 한 줄뿐이라면 중괄호({})를 생략할 수 있음. document.write(\u0026quot;x가 y보다 크다.\u0026quot;); }   else if 문  if (표현식1) { 표현식1의 결과가 참일 때 실행하고자 하는 실행문; } else if (표현식2) { 표현식2의 결과가 참일 때 실행하고자 하는 실행문; } else { 표현식1의 결과도 거짓이고, 표현식2의 결과도 거짓일 때 실행하고자 하는 실행문; }   ex\nvar x = 10, y = 20; if (x == y) { document.write(\u0026quot;x와 y는 같다.\u0026quot;); } else if (x \u0026lt; y) { document.write(\u0026quot;x가 y보다 작다.\u0026quot;); } else { // x \u0026gt; y인 경우 document.write(\u0026quot;x가 y보다 크다.\u0026quot;); }  switch-case\n   if 와 else if를 반복적으로 써야 하는 상황을 피하게 해 줍니다.\n var value; switch(value) { case 값1: //value == 값1일 경우 실행할 코드 break; case 값2: //value == 값2일 경우 실행할 코드 break; //... default: //위쪽에 해당되지 않는 경우 실행할 코드 }   점수가 10점이면 A, 9점이면 B, 그 외에는 C를 출력하는 코드를 작성하세요.\n if로 구현 var score = prompt('점수를 입력하세요'); if (score === 10) { console.log('A'); } else if (score == 9) { console.log('B'); } else { console.log('C'); }   switch-case 로 구현 var score = prompt('점수를 입력하세요'); switch (score) { case 10: console.log('A); break; case 9: console.log('B'); break; default: console.log('C'); }  5.Loops  while 문 do / while 문 for 문 for / in 문 for / of 문  while while (표현식) { 표현식의 결과가 참인 동안 반복적으로 실행하고자 하는 실행문; }   note   while 문 만들때는 변수를 미리 만들어 줘야 한다.\n var n ; var n = 0; var n = 1;   ex 1-1\nvar n = 1; while(n \u0026lt;= 100) { console.log(\u0026quot;Hi \u0026quot; + n); n++; }  ex 1-2\nwhile 문을 사용해서 1에서 100까지의 합을 구해 봅시다. 자주 사용하는 패턴 var i = 0; // 1 변수 초기화 while (i \u0026lt;= 100) { // 2 변수 검사 console.log(i); // 3 코드 다하고나서 i++; // 4 하나씩 증가 } 그래서 for가 등장함 위의 while 코드와 완전히 똑같음 for (var i = 0; i \u0026lt;= 100; i++) { console.log(i); }  ex gugudan with while\n \u0026lt;script\u0026gt; var strN = Number(prompt(\u0026quot;input which gugudan\u0026quot;)); var i = 1; document.write(\u0026quot;gugudan\u0026quot; + strN + \u0026quot;\u0026lt;br\u0026gt;\u0026quot;); while (i \u0026lt; 10) { document.write(strN + \u0026quot; * \u0026quot; + i + \u0026quot; = \u0026quot; + strN * i + \u0026quot; \u0026lt;br\u0026gt; \u0026quot; ); i++; } \u0026lt;/script\u0026gt;   for 문 for (초기식; 표현식; 증감식) { 표현식의 결과가 참인 동안 반복적으로 실행하고자 하는 실행문; }   ex 1-1\n for (var i = 1; i \u0026lt; 10; i++) { document.write(i + \u0026quot;\u0026lt;br\u0026gt;\u0026quot;); }  ex 1-2 gugudan with for\n\u0026lt;script\u0026gt; var strN = Number(prompt(\u0026quot;input which dan?\u0026quot;)); document.write(\u0026quot;gugudan\u0026quot; + strN + \u0026quot;\u0026lt;br\u0026gt;\u0026quot;); for (var i = 1; i \u0026lt; 10; i++) { document.write(strN + \u0026quot; * \u0026quot; + i + \u0026quot; = \u0026quot; + strN * i + \u0026quot;\u0026lt;br\u0026gt;\u0026quot;); } \u0026lt;/script\u0026gt;  ex 1-3 gugudan with button\n \u0026lt;P\u0026gt;사용자가 2 이상, 9 이하가 아닌 값을 입력하는 경우 \u0026quot;2이상, 9이하의 값만 입력할 수 있습니다.\u0026quot;라는 메시지를 출력한다.\u0026lt;/P\u0026gt; \u0026lt;script\u0026gt; var strN; while (true){ strN = Number(prompt(\u0026quot;input which dan from 2 dan to 9 dan\u0026quot;)) if (strN \u0026lt; 2 || strN \u0026gt; 9){ console.log(\u0026quot;this is not available\u0026quot;); } else { document.write(\u0026quot;gugudan\u0026quot; + strN + \u0026quot;\u0026lt;br\u0026gt;\u0026quot;); break; } } for (i = 1; i \u0026lt; 10; i ++){ document.write(strN + \u0026quot; + \u0026quot; + i + \u0026quot; = \u0026quot; + strN + i + \u0026quot;\u0026lt;br\u0026gt;\u0026quot;); } \u0026lt;/script\u0026gt;   6.Array 배열이란?  자바스크립트에서 배열(array)은 이름과 인덱스로 참조되는 정렬된 값의 집합으로 정의된다. 배열을 구성하는 각각의 값을 배열 요소(element)라고 하며, 배열에서의 위치를 가리키는 숫자를 인덱스(index)라고 한다.\n 특징  배열 요소의 타입이 고정되어 있지 않으므로, 같은 배열에 있는 배열 요소끼리의 타입이 서로 다를 수도 있다. 배열 요소의 인덱스가 연속적이지 않아도 되며, 따라서 특정 배열 요소가 비어 있을 수도 있다.자바스크립트에서 배열은 Array 객체로 다뤄진다.\n 배열 만들기 1 var scores = [50, 60, 70]; console.log(scores); console.log(scores.length);  인덱스를 이용해서 배열의 원소 읽기 scores[0]; scores[3];  배열에 값 쓰기 scores[0] = 100; scores[9] = 50;  배열의 타입 알아보기 typeof scores typeof scores[0]  배열 만들기 2 var a = []; a[0] = 2; a[1] = 4;  배열의 길이 구하기 scores.length;  배열의 마지막 원소를 읽어 오려면? scores[scores.length - 1]; 문자열과 배열 •\t문자열과 배열은 비슷한 성질을 많이 가지고 있습니다. •\t문자열: Immutable •\t배열: Mutable •\t배열의 속성과 메소드를 문자열에도 테스트해보세요.  배열의 메소드들 1  push() 뒤어 붙이기\nvar arr = [1,2,3,4,]; arr.push(1); arr; // = \u0026gt; [1,2,3,4,1]  pop() 뒤에 있는거 빼기\nvar arr = [1,2,3,4,]; arr.pop(); arr; // = \u0026gt; [1,2,3]  unshift() 앞에 붙이기\nvar arr = [1,2,3,4]; arr.unshift(1); arr; // = \u0026gt; [1,1,2,3,4,];  shift() 앞에 있는거 빼기\nvar arr = [1,2,3,4]; arr.shift(); arr; // = \u0026gt; [2,3,4,]  concat() 더하기\nvar arr = [1,2,3,4,5]; arr.concat(6); \u0026gt;\u0026gt;arr [1,2,3,4,5,6] 기존에 있는 것은 변하지 않는다. 변하게 하기위해서는 변수를 새로 만들기 ! var arr = [1,2,3,4,5]; arr.concat([6,7,8,9,10]); \u0026gt;\u0026gt;arr [1,2,3,4,5,6,7,8,9,10] 여러게를 더할수 있다.  join() 문자열로 바꾸기\nvar arr = [1,2,3,4,5,6] arr.join() ; \u0026gt;\u0026gt;arr [\u0026quot;1\u0026quot;,\u0026quot;2\u0026quot;,\u0026quot;3\u0026quot;,\u0026quot;4\u0026quot;,\u0026quot;5\u0026quot;,\u0026quot;6\u0026quot;] 문자열로 바꿔준다. arr.join(\u0026quot;\u0026quot;); \u0026gt;\u0026gt;arr [\u0026quot;123456\u0026quot;]; 문자열 다 붙인다.  indaxtOf() ()\u0026lt;\u0026lt;원소를 입력하면부터 앞에서 부터 찾아서 index번호 알려준다.\n lastIndaxtOf() ()\u0026lt;\u0026lt;원소를 입력하면부터 뒤에서 부터 찾아서 index번호 알려준다.\n var arr = [1,2,3,4,5]; arr.indexOf[1]; \u0026gt;\u0026gt;arr 2 arr.indexOf[100]; \u0026gt;\u0026gt;arr -1 없는 경우 -1를 호출한다. EX) var arr = [1,2,3,4,5,6] if (arr.indexOf(100) === -1 ) { 만약 100이라는 원소가 arr 에 없으면 }  slice()\nvar arr = [1, 2, 3, 4, 5]; a.slice(0, 3); \u0026gt;\u0026gt;a; 123 원소는 변하지 않는다  splice()\nvar arr = [1, 2, 3, 4, 5]; a.splice(0, 3); \u0026gt;\u0026gt;a; 123 원소 값이 변한다.  split()\n   문자열을 문자의 배열로 나누고 싶을 때 사용하는 메소드입니다.\n var s = \u0026quot;hello, world this is jj\u0026quot;; s.split(\u0026quot;\u0026quot;); \u0026quot;h\u0026quot;, \u0026quot;e\u0026quot;, \u0026quot;l\u0026quot;, \u0026quot;l\u0026quot;, \u0026quot;o\u0026quot;, \u0026quot;,\u0026quot;, \u0026quot; \u0026quot;, \u0026quot;w\u0026quot;, \u0026quot;o\u0026quot;, \u0026quot;r\u0026quot;, \u0026quot;l\u0026quot;, \u0026quot;d\u0026quot;, \u0026quot; \u0026quot;, \u0026quot;t\u0026quot;, \u0026quot;h\u0026quot;, \u0026quot;i\u0026quot;, \u0026quot;s\u0026quot;, \u0026quot; \u0026quot;, \u0026quot;i\u0026quot;, \u0026quot;s\u0026quot;, \u0026quot; \u0026quot;, \u0026quot;j\u0026quot;, \u0026quot;j\u0026quot;   var s = \u0026quot;hello, world this is jj\u0026quot;; s.split(\u0026quot;,\u0026quot;); \u0026quot;hello\u0026quot;, \u0026quot; world this is jj\u0026quot; 콤마가 생겼다. 콤마의 기준으로 갈라진다.  var s = \u0026quot;hello world t-h-i-s-i-s-j-j\u0026quot; s.split(\u0026quot;-\u0026quot;); \u0026quot;hello world t\u0026quot;, \u0026quot;h\u0026quot;, \u0026quot;i\u0026quot;, \u0026quot;s\u0026quot;, \u0026quot;i\u0026quot;, \u0026quot;s\u0026quot;, \u0026quot;j\u0026quot;, \u0026quot;j\u0026quot; - 기준으로 갈라진다.  7.Function 함수 만들기 function convertHeight(feet, inches) { return (feet * 12 + inches) * 2.54 } convertHeight(5, 10); //= \u0026gt;\u0026gt;177.8 (feet , inches) ==\u0026gt;\u0026gt; parameter ( 매개 변수) (5,10) ==\u0026gt;\u0026gt; argument ( 전달인자\t)  변수에 담아서 함수 사용하기 var ret = function convertHeight(feet, inches) { return (feet * 12 + inches) * 2.54 } ret(5, 10); 177.8  리턴값 없는 변수를 변수에 담으면 “undefind” 출력된다 .  ex 1-1 (console.log)\nvar foo = function () { console.log(“I’m a foo”); } \u0026gt;\u0026gt;undefined  ex 1-2 (return)\nvar foo = function () { return(“I’m a foo”); } \u0026gt;\u0026gt; I’m a foo   return 을 break 로 사용하기 (return 으로 함수를 종료하는데 사용할 수 있다.)  (Option) 2중 루프를 한 번에 빠져 나가기 - break 명령은 한 번에 한 루프만 빠져나갑니다. - 함수의 return 을 이용하면 2중 루프를 한 번에 종료할 수 있습니다.\n  종료하기\nvar test1 = function (text) { if (text === \u0026quot;exit\u0026quot;) { return; } console.log(\u0026quot;실행\u0026quot;); } test1(\u0026quot;exit\u0026quot;) // =\u0026gt; undefined  실행 하기\nvar test1 = function (text) { if (text === \u0026quot;exit\u0026quot;) { return; } console.log(\u0026quot;실행\u0026quot;); } test1(\u0026quot;oh\u0026quot;\u0026quot;); // = \u0026gt; 실행   이중 loop 빠져 나가기  ex (하나만 빠져 나가기 )\nfor (var i = 0; i \u0026lt; 10; i ++) { for (var j = 0; j \u0026lt; 10; j++) { console.log(i , j ); if (j === 3 ) { break; } } }  ex (이중 loop 빠져나간다 with function)\n var foo = function() { for (var i = 0; i \u0026lt; 10; i ++) { for (var j = 0; j \u0026lt; 10; j++) { console.log(i , j ); if (j === 3 ) { return; } } } }; foo();   배열을 이용한 while 문 , for 문 // while loop function sum (nums) { var total = 0; var i = 0; while (i \u0026lt; nums.length) { total = total + nums[i]; i++; } return total; } sum([2,3,5,1]); \u0026gt;\u0026gt; 11  // for loop function sum (nums) { var total = 0 ; for (var i = 0 ; i \u0026lt; nums.length ; i = i + i ) { total = total + nums[i] } return total; } sum([2,3,5,1,]); \u0026gt;\u0026gt;11  8.Objects making objects 1. var dog = {}; dog.name = \u0026quot;jj\u0026quot; dog.color = \u0026quot;red\u0026quot; dog.kind = \u0026quot;똥깨\u0026quot; // \u0026gt;\u0026gt;\u0026gt; dog = {name = \u0026quot;jj\u0026quot;, color =\u0026quot;red\u0026quot; , kind = \u0026quot;똥깨 \u0026quot;} 2. var dog = { name : \u0026quot;jj\u0026quot;, color : \u0026quot;red\u0026quot;, kind : \u0026quot;똥깨\u0026quot; } // \u0026gt;\u0026gt;\u0026gt; dog = {name = \u0026quot;jj\u0026quot;, color =\u0026quot;red\u0026quot; , kind = \u0026quot;똥깨 \u0026quot;}  using objcets in Javascript var dog = { name = \u0026quot;jj\u0026quot; color = \u0026quot;red\u0026quot; }; we have two systems . 1. dog.name; dog[\u0026quot;name\u0026quot;]; 결과갑 똑같다. \u0026gt;\u0026gt;\u0026gt;jj  changing objects 1. it is changed dog.name = \u0026quot;john\u0026quot; 2. it is added dog.food = \u0026quot;Banana\u0026quot;  메소드  객체에 속한 함수\n dog.eat = function(food) { console.log(this.name + \u0026quot; ate delicious \u0026quot; + food +\u0026quot;...\u0026quot;); }; p1.eat(\u0026quot;Beef\u0026quot;); \u0026gt;\u0026gt; jj ate delicious Beef ...   this  메소드 안에서 사용시 함수를 소유한 객체를 가르킨다. var p2 = {}; p2.name = \u0026quot;jj\u0026quot;; p2.weight = 80; p2.say = function(word) { console.log(this.name + \u0026quot; says, \u0026quot; + word); };  ","date":1573689600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1573689600,"objectID":"4a39c526b4864aa8bc4f34442c90fd34","permalink":"/tutorial/javascript/","publishdate":"2019-11-14T00:00:00Z","relpermalink":"/tutorial/javascript/","section":"tutorial","summary":"write here:rocket:","tags":["Javacript"],"title":"Javascript","type":"docs"},{"authors":null,"categories":[],"content":" Python: Operators  Arithmetic operators Assignment operators Comparison operators Logical operators  Arithmetic Operator           + Addition x + y   - Subtraction x - y   * Multiplication x * y   / Division x / y   % Modulus x % y   ** Exponentiation x ** y   // Floor division x // y    Assignment Operators           = x = 5 x = 5   += x += 3 x = x + 3   -= x -= 3 x = x - 3   *= x *= 3 x = x * 3   /= x /= 3 x = x / 3   %= x %= 3 x = x % 3   //= x //= 3 x = x // 3   **= x **= 3 x = x ** 3   \u0026amp;= x \u0026amp;= 3 x = x \u0026amp; 3    = x   ^= x ^= 3 x = x ^ 3   \u0026gt;\u0026gt;= x \u0026gt;\u0026gt;= 3 x = x \u0026gt;\u0026gt; 3   \u0026lt;\u0026lt;= x \u0026lt;\u0026lt;= 3 x = x \u0026lt;\u0026lt; 3    Comparison Operators           == Equal x == y   != Not equal x != y   \u0026gt; Greater than x \u0026gt; y   \u0026lt; Less than x \u0026lt; y   \u0026gt;= Greater than or equal to x \u0026gt;= y   \u0026lt;= Less than or equal to x \u0026lt;= y    Python Logical Operators           and Returns True if both statements are true x \u0026lt; 5 and x \u0026lt; 10   or Returns True if one of the statements is true x \u0026lt; 5 or x \u0026lt; 4   not Reverse the result, returns False if the result is true not(x \u0026lt; 5 and x \u0026lt; 10)     exmple\nPrint(1+1) 더하기 2 Print(1-1) 빼기 0 Print(1*1) 곱하기 1 Print(3**3) 제곱 18 Print(8/2) 나누기 4 Print(3/2*4) 순서대로 곱하기 나누기 우선 그다음에 빼기 더하기 6.0 Print(7//3) 몫구하기 (3이 몇번들어갈수 있는지) 2 Print(3%2) 나머지값구하기(나머지가 1 남는다) 1 # 연산자 우선 순위 # ** # *,/,//,% # +, - # 문자열 연산 # + : 문자열 끼리 붙여주는 역할 \u0026quot;Hi\u0026quot; + \u0026quot;Hello\u0026quot; =\u0026gt; \u0026quot;HiHello\u0026quot; # * : \u0026quot;Hi\u0026quot;*3 =\u0026gt; “HiHiHi\u0026quot; # 문자열을 표현하는 방법, 만드는 방법 \u0026quot;She said \\\u0026quot;Hi\\\u0026quot;\u0026quot; # 'She said \u0026quot;Hi\u0026quot;' 'I\\'m Jake' # 특수문자나 특별한 알파벳 앞에 \\(슬래시)를 붙여서 특수 기능을 # 수행하는 것을 이스케이핑 문자 혹은 이스케이핑 처리   Python: Variables  Description   ariables are containers for storing data values. Unlike other programming languages, Python has no command for declaring a variable. A variable is created the moment you first assign a value to it.\n  Example 1\n x = 5 y = \u0026quot;John\u0026quot; print(x) print(y) \u0026gt;\u0026gt;5 \u0026gt;\u0026gt;John  Example 2\n x = 4 # x is of type int x = \u0026quot;Sally\u0026quot; # x is now of type str print(x) \u0026gt;\u0026gt;Sally  Example\nx = \u0026quot;awesome\u0026quot; print(\u0026quot;Python is \u0026quot; + x) \u0026gt;\u0026gt;Python is awesome  Note\n Variable Names\n   A variable can have a short name (like x and y) or a more descriptive name (age, carname, total_volume). Rules for Python variables: A variable name must start with a letter or the underscore character A variable name cannot start with a number A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ ) Variable names are case-sensitive (age, Age and AGE are three different variables)\n # 변수 이름? # 대소문자 구분 # 알파벳, 숫자, 한글 : 숫자는 맨앞에는 사용 금지 # 특수문자 : _ # 명사나 동사형 # 표기법 # sayHi : 두번째 단어부터 단어의 첫글자는 대문자 # SayHi : 모든 단어의 첫글자는 대문자 # say_hi : 모두 소문자, 단어사이에 _ # strSayHi : 변수명 앞에 변수의 타입을 기록  Python: int float str 1.int: 정수 x = input(\u0026quot;숫자를 입력해주세요.:\u0026quot;) Y = input(\u0026quot;숫자를 입력해주세요.:”) x = 20 y = 30 Print(x+y) \u0026gt;\u0026gt;\u0026gt;2030 x = `int`(input(\u0026quot;숫자를 입력해주세요.:\u0026quot;)) Y = `int`(input(\u0026quot;숫자를 입력해주세요.:\u0026quot;)) x = 20 y = 30 Print(x+y) \u0026gt;\u0026gt;\u0026gt;50  2. float :실수 () 소수점 나타내주는것 x = `float`(input(“숫자를 입력해주세요.:”)) \u0026gt;\u0026gt;20 Y = `float`(input(“숫자를 입력해주세요.:”)) \u0026gt;\u0026gt;30 Print(x+y) 50.0  3. Str :문자 이것을 사용하면 숫자를 문자로 변환시킬수 있다. x = int(input(\u0026quot;숫자를 입력하세요.:\u0026quot;) Y = int(input(\u0026quot;숫자를 입력하세요.:\u0026quot;) sum = x + y print(\u0026quot;두 수의 합은, sum, \u0026quot;입니다.\u0026quot;) \u0026gt;\u0026gt;\u0026gt;두 수의 합은 50 입니다. 50 과 입니다 \u0026lt;\u0026lt;\u0026lt;를 붙이고싶다 또는 문자를 숫자로 바꾸기 위해서 str 필요하다. print(\u0026quot;두 수의 합은\u0026quot;\u0026quot;,`str`(sum),\u0026quot;입니다.\u0026quot;) \u0026gt;\u0026gt;\u0026gt;\u0026gt;두 수의 합은 50입니다. Print(1,2,3,4,end=\u0026quot;,\u0026quot;). \u0026lt;\u0026lt;\u0026lt; 콤마로 띄어쓴다. print(1,2,3,4,sep=\u0026quot;,\u0026quot;) \u0026lt;\u0026lt;\u0026lt;\u0026lt; 중간에 문자 집어넣기  Python:Format_string format 명령 [데이터타입] : s(문자열), c(한글자), d(정수), f(실수)  example exercise 1-1\nforamt_string = \u0026quot;섭씨 35도는 화씨 99도 입니다.\u0026quot; foramt_string = \u0026quot;섭씨 %f도는 화씨 %f도 입니다.\u0026quot; msg = foramt_string % (35.7, 99.23) print(msg) f 는 소수점 처리를 할수 있다. foramt_string = \u0026quot;섭씨 '%0.2f'도는 화씨 '%-.4f'도 입니다.\u0026quot; msg = foramt_string % (35.7, 99.23) print(msg)   Python: Variables  ariables are containers for storing data values.\n  Example\nx = 5 y = \u0026quot;John\u0026quot; print(x) print(y)   Python: conditional  if (a \u0026gt; b): [처리문 실행문] elif [조건문 조건식]: [실행문 처리문] else: [실행문] \u0026quot;\u0026quot;\u0026quot; # 조건식 : 명제 -\u0026gt; 참과 거짓으로 판별할 수 있는 구문 # 참과 거짓 : True False # a \u0026gt; b, a \u0026lt; b, a \u0026gt;= b, a \u0026lt;= b, a == b, a != b # and, or # not # 0, \u0026quot;\u0026quot;, False, [] # 상태 : empty if not empty: 청소를 한다. a = 7 b = 8 c = 9 a \u0026gt; b and a \u0026gt; c a \u0026gt; b or a \u0026gt; c not (a \u0026gt; c) a \u0026lt; b a \u0026gt;= b a \u0026lt;= b a == b a != b   Example\na = int(input(\u0026quot;당신의 출생연도를 입력해주세요.:\u0026quot;)) age = 2019 - a + 1 if age \u0026gt;= 20: print(\u0026quot;당신은 성인입니다.”)  Example\na = int(input(\u0026quot;당신의 출생연도를 입력해주세요.:\u0026quot;)) age = 2019 - a + 1 if age \u0026gt;= 20: print(\u0026quot;당신은 성인입니다.\u0026quot;) else: print(\u0026quot;당신은 성인이 아닙니다.\u0026quot;)  Example exercise 1-1\n# 사용자의 키와 체중을 입력받아서 # bmi 계산하여 출력하세요 # bmi = 체중(kg) / (키(m)의 제곱) height = input(\u0026quot;키를 입력하세요 : \u0026quot;) height = float(height) weight = input(\u0026quot;체중을 입력하세요 : \u0026quot;) weight = float(weight) bmi = weight / ((height/100)**2) # 키와 체중을 입력받고 # bmi 계산하고 # 18.5 미만 = 저체중 # 18.5 이상 23 미만 = 정상체중 # 23 이상 = 과체중 bmi_level = \u0026quot;\u0026quot; if bmi \u0026lt; 18.5: bmi_level = \u0026quot;저체중\u0026quot; elif 18.5 \u0026lt;= bmi \u0026lt; 23: bmi_level = \u0026quot;정상체중\u0026quot; else: bmi_level = \u0026quot;과체중\u0026quot; print(bmi,bmi_level)  Example exercise 1-2\n # 섭씨 -\u0026gt; 화씨로 바꾸는 프로그램 # 화시 -\u0026gt; 섭씨로 바꾸는 기능 # 메뉴 입력 시작 print(\u0026quot;-----MENU-----\u0026quot;) print(\u0026quot;1. 섭씨 -\u0026gt; 화씨 변환\u0026quot;) print(\u0026quot;2. 화씨 -\u0026gt; 섭씨 변환\u0026quot;) print(\u0026quot;3. 프로그램 종료\u0026quot;) menu = input(\u0026quot;메뉴를 선택하세요 : \u0026quot;) # 메뉴 입력 끝 # 온도 계산 시작 if menu == \u0026quot;1\u0026quot;: C = input(\u0026quot;섭씨 온도를 입력하세요 : \u0026quot;) C = float(C) F = C * 1.8 + 32 msg = \u0026quot;섭씨 \u0026quot;+str(C)+\u0026quot;도는 화씨 \u0026quot;+str(F)+\u0026quot;도 입니다.\u0026quot; print(msg) elif menu == \u0026quot;2\u0026quot;: F = input(\u0026quot;화씨 온도를 입력하세요 : \u0026quot;) F = float(F) C = (F - 32) / 1.8 msg = \u0026quot;화씨 \u0026quot;+str(F)+\u0026quot;도는 섭씨 \u0026quot;+str(C)+\u0026quot;도 입니다.\u0026quot; print(msg) elif menu == \u0026quot;3\u0026quot;: print(\u0026quot;프로그램을 종료합니다.\u0026quot;) else: print(\u0026quot;잘못 선택하셨습니다.\u0026quot;)   Python: try, except  try: #[오류가 날지도 모르는 코드] a = int(\u0026quot;a\u0026quot;) print(\u0026quot;in\u0026quot;) except ValueError: #[발생한 오류에 대응할 코드] print(\u0026quot;fired exception\u0026quot;) except ZeroDivisionError: #[발생한 오류에 대응할 코드] print(\u0026quot;fired exception\u0026quot;) except: #[발생한 오류에 대응할 코드] print(\u0026quot;fired exception\u0026quot;) else: #[오류가 없이 지나왔을 경우 코드] print(\u0026quot;no error\u0026quot;) finally: #[어쨋든 실행될 코드] print(\u0026quot;anyway\u0026quot;)   exercise 1-1\n number = input(\u0026quot;정수를 입력하세요 : \u0026quot;) try: number = int(number) except ValueError: print(\u0026quot;정수가 아닙니다. 다시 입력하세요.\u0026quot;) number = input(\u0026quot;정수를 입력하세요 : \u0026quot;) number = int(number) result = number*number print(result) # 입력받은 정수의 제곱 값을 출력하는 프로그램 # 만약 숫자가 아니라면 다시 입력하라는 메시지를 출력한다. # 다시 입력 하라는 메시지는 1회만   Python: While  while [조건식]: [실행문] [실행문] [실행문] [실행문] \u0026quot;\u0026quot;\u0026quot; 1 예) 이런식으로 많이 쓰인다. While True: Try: Break except 2 예) while True: # 정수를 입력받는다. 정수가 입력될 때까지 number = input(\u0026quot;정수를 입력하세요 : \u0026quot;) try: number = int(number) break except: print(\u0026quot;정수가 아닙니다. 다시 입력하세요.\u0026quot;) print(number)   exercise\n # 섭씨 -\u0026gt; 화씨로 바꾸는 프로그램 # 화시 -\u0026gt; 섭씨로 바꾸는 기능 # 메뉴 입력 시작 print(\u0026quot;-----MENU-----\u0026quot;) print(\u0026quot;1. 섭씨 -\u0026gt; 화씨 변환\u0026quot;) print(\u0026quot;2. 화씨 -\u0026gt; 섭씨 변환\u0026quot;) print(\u0026quot;3. 프로그램 종료\u0026quot;) menu = input(\u0026quot;메뉴를 선택하세요 : \u0026quot;) # 메뉴 입력 끝 # 온도 계산 시작 if menu == \u0026quot;1\u0026quot;: while True: try: C = input(\u0026quot;섭씨 온도를 입력하세요 : \u0026quot;) C = float(C) break except: print(\u0026quot;다시 입력하세요.\u0026quot;) F = C * 1.8 + 32 msg = \u0026quot;섭씨 \u0026quot;+str(C)+\u0026quot;도는 화씨 \u0026quot;+str(F)+\u0026quot;도 입니다.\u0026quot; print(msg) elif menu == \u0026quot;2\u0026quot;: while True: try: F = input(\u0026quot;화씨 온도를 입력하세요 : \u0026quot;) F = float(F) break except: print(\u0026quot;다시 입력하세요.\u0026quot;) C = (F - 32) / 1.8 msg = \u0026quot;화씨 \u0026quot;+str(F)+\u0026quot;도는 섭씨 \u0026quot;+str(C)+\u0026quot;도 입니다.\u0026quot; print(msg) elif menu == \u0026quot;3\u0026quot;: print(\u0026quot;프로그램을 종료합니다.\u0026quot;) else: print(\u0026quot;잘못 선택하셨습니다.\u0026quot;)   Python: for  Description\n# for [name] in [bucket]: # [실행문]   for n in range(10): print(n) print(n*n)   for, range 활용해서 1~100까지의 홀수의 합을 구하는 프로그램 total = 0 for x in range(1,101,2): total += x total = total + x print(total)  # \u0026quot;Range는 횟수 용으로 많이 쓰인다.\u0026quot; # range(Y) : 0 ~ Y-1까지 # range(X,Y) : X ~ Y-1까지 # range(X,Y,Z) : X ~ Y-1까지인데, Z씩 증감  for n in range(0,12.2): print(n) 2 4 6 8 10  Python: Module  import datetime 변수 = datetime.datetime.now() Print(변수) Print(변수.strftime(“%y-%m-%d\u0026quot;)) Print(변수.year) Print(변수.hour) Print(변수.corosecond)  윤년 프로그램 # 윤년 프로그램을 짜본다. # 윤년 2월 29일까지 있는 해 # 연도가 400으로 나누어 떨어지면 윤년 # 연도가 100으로 나누어 떨어지면 윤년 x # 연도가 4로 나누어 떨어지면 윤년 # 1. 올해의 윤년여부 출력 # 2. 사용자의 입력을 받아서 윤년 여부 출력 # 3. 프로그램 종료   import datetime while True: print(\u0026quot;----Menu----\u0026quot;) print(\u0026quot;1. 올해 윤년 여부\u0026quot;) print(\u0026quot;2. 입력 받은 연도 윤년 여부\u0026quot;) print(\u0026quot;3. 프로그램 종료\u0026quot;) menu = input(\u0026quot;메뉴를 선택하세요 : \u0026quot;) if menu == \u0026quot;1\u0026quot;: current_time = datetime.datetime.now() year = current_time.year if (year % 4 == 0 and year % 100 !=0) or year % 400 == 0: print(\u0026quot;윤년입니다.\u0026quot;) else: print(\u0026quot;윤년이 아닙니다.\u0026quot;) elif menu == \u0026quot;2\u0026quot;: while True: try: year = input(\u0026quot;판별하고자 하는 연도를 입력하세요 : \u0026quot;) year = int(year) break except: print(\u0026quot;다시 입력하세요.\u0026quot;) if (year % 4 == 0 and year % 100 !=0) or year % 400 == 0: print(\u0026quot;윤년입니다.\u0026quot;) else: print(\u0026quot;윤년이 아닙니다.\u0026quot;) elif menu == \u0026quot;3\u0026quot;: break # exit() else: print(\u0026quot;없는 메뉴 입니다.\u0026quot;)  Python: function # def [함수이름]([매개변수,입력값]): # [실행구문] # [return (반환값, 출력값)]   example 1-1\nA = 1 B = 2 x = 1+2 Print(x) \u0026gt;\u0026gt;\u0026gt;3 함수 이용하기 def x (A,B) : return A+B print (x(1,2)) \u0026gt;\u0026gt;\u0026gt;3  example 1-2\ndef sayHi(): print(\u0026quot;Hello Python\u0026quot;) sayHi()  exercise 1-2\n # 1~9까지의 각각의 제곱을 출력하는 함수를 만드세요. def PrintSquare(): for x in range(1,10): print(x*x) PrintSquare() PrintSquare() PrintSquare() PrintSquare() PrintSquare() def PrintSquare2(endNumber): for x in range(1,endNumber+1): print(x*x) PrintSquare2(10)  exercise 1-3\n# 두개의 숫자를 전달 받아서 # 그 두 숫자의 합을 출력하는 함수 def printSum(number1, number2): print(number1+number2) printSum(10, 22)  exercise 1-4\n# 별줄수 만들기 \u0026quot;\u0026quot;\u0026quot; 사용자에게 줄 수를 입력받아서 해당 줄 수만큼 별을 출력하시오. * *** ***** \u0026quot;\u0026quot;\u0026quot; line_count = input(\u0026quot;출력할 줄 수를 입력하세요 : \u0026quot;) line_count = int(line_count) max_width = line_count*2 - 1 format_string = \u0026quot;{:^\u0026quot;+str(max_width)+\u0026quot;s}\u0026quot; for count in range(line_count): #blank_count = line_count-(count+1) #print(\u0026quot; \u0026quot; * blank_count, end=\u0026quot;\u0026quot;) start_count = 2 * count + 1 msg = format_string.format(\u0026quot;*\u0026quot;*start_count) print(msg) * *** *****   Python: Crawler 1. 변수만들어서 저장하기 data.text 모든 리소스 불러오기  url = \u0026quot;https://www.naver.com/\u0026quot; requests.get(url) data = requests.get(url) print(data.text)  2. 제대로 돌아가고 있는지 확인 print (data.status_code) “”” 200 “”” 200번대 - 정상 300번대 - redirect 400번대 - 리소스 오류 500번대 - 소스코드 오류  3. Test 해보기 만약 이게 맞다면 응답해라  if data.status_code == requests.codes.ok: print(\u0026quot;work out”)  4. From bs4 import BeautifulSoup HTML를 해석해주는 역활 ```\nParsing(파싱) text 파일을 우리가 원하는 것을 불러오기 위해서는 parsing 필요하다.이럴때 BeautifulSoup 이라는 order 필요.\nhtml = BeautifulSoup(data.text,\u0026quot;html.parser\u0026quot;) links = html.select(\u0026quot;.PM_CL_realtimeKeyword_list_base .ah_a”)  나열방식이 틀림\n(1) for index,keyword in enumerate ( links,start=1 ) : print(index,keyword)  1  2  3 \n(2). For keyword in links[:3]: For keyword in links[::3]: Print(keyword) (3) for link in links: rank = link.select_one(\u0026quot;.ah_r\u0026quot;).text keyword = link.select_one(\u0026quot;.ah_k\u0026quot;).text print(rank,keyword,link.attrs[\u0026quot;href\u0026quot;])  1 왕종명 http://search.naver.com/search.naver?where=nexearch\u0026amp;query=%EC%99%95%EC%A2%85%EB%AA%85\u0026amp;sm=top_lve\u0026amp;ie=utf8 2 grn http://search.naver.com/search.naver?where=nexearch\u0026amp;query=grn\u0026amp;sm=top_lve\u0026amp;ie=utf8 3 백예린 http://search.naver.com/search.naver?where=nexearch\u0026amp;query=%EB%B0%B1%EC%98%88%EB%A6%B0\u0026amp;sm=top_lve\u0026amp;ie=utf8 4 붐붐파워 http://search.naver.com/search.naver?where=nexearch\u0026amp;query=%EB%B6%90%EB%B6%90%ED%8C%8C%EC%9B%8C\u0026amp;sm=top_lve\u0026amp;ie=utf8 5 2019 스타벅스 벚꽃 md http://search.naver.com/search.naver?where=nexearch\u0026amp;query=2019+%EC%8A%A4%ED%83%80%EB%B2%85%EC%8A%A4+%EB%B2%9A%EA%BD%83+md\u0026amp;sm=top_lve\u0026amp;ie=utf8 6 나르샤 http://search.naver.com/search.naver?where=nexearch\u0026amp;query=%EB%82%98%EB%A5%B4%EC%83%A4\u0026amp;sm=top_lve\u0026amp;ie=utf8 7 아소방 매트 http://search.naver.com/search.naver?where=nexearch\u0026amp;query=%EC%95%84%EC%86%8C%EB%B0%A9+%EB%A7%A4%ED%8A%B8\u0026amp;sm=top_lve\u0026amp;ie=utf8\n\u0026rdquo;\u0026ldquo;\u0026rdquo;\n","date":1573689600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1573689600,"objectID":"069d4590547a03575515d8bc29311a7f","permalink":"/tutorial/python/","publishdate":"2019-11-14T00:00:00Z","relpermalink":"/tutorial/python/","section":"tutorial","summary":"write here:rocket:","tags":["Python"],"title":"Python","type":"docs"},{"authors":null,"categories":[],"content":"this is what?\n","date":1573689600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1573689600,"objectID":"dec2e3f4a8da3f1d0e8783a961642ff9","permalink":"/tutorial/technical-terms/","publishdate":"2019-11-14T00:00:00Z","relpermalink":"/tutorial/technical-terms/","section":"tutorial","summary":"write here:rocket:","tags":["Technical terms"],"title":"Technical terms","type":"docs"},{"authors":null,"categories":null,"content":" frist  second  ","date":1563934394,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1563934394,"objectID":"527c51a45e161afc35c566d3a7366f5f","permalink":"/post/downre/","publishdate":"2019-07-23T21:13:14-05:00","relpermalink":"/post/downre/","section":"post","summary":" frist  second  ","tags":null,"title":"11111","type":"post"},{"authors":["John Jung"],"categories":null,"content":" Supplementary notes can be added here, including code and math.   ","date":1554562800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1554562800,"objectID":"557dc08fd4b672a0c08e0a8cf0c9ff7d","permalink":"/publication/preprint/","publishdate":"2019-04-07T00:00:00+09:00","relpermalink":"/publication/preprint/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":null,"title":"An example preprint / working paper","type":"publication"},{"authors":null,"categories":null,"content":"","date":1461682800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461682800,"objectID":"d1311ddf745551c9e117aa4bb7e28516","permalink":"/project/external-project/","publishdate":"2016-04-27T00:00:00+09:00","relpermalink":"/project/external-project/","section":"project","summary":"An example of linking directly to an external project website using `external_link`.","tags":null,"title":"External Project","type":"project"},{"authors":null,"categories":null,"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1461682800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461682800,"objectID":"8f66d660a9a2edc2d08e68cc30f701f7","permalink":"/project/internal-project/","publishdate":"2016-04-27T00:00:00+09:00","relpermalink":"/project/internal-project/","section":"project","summary":"An example of using the in-built project page.","tags":null,"title":"Internal Project","type":"project"},{"authors":["John Jung"],"categories":null,"content":" Create a free website with Academic using Markdown, Jupyter, or RStudio. Choose a beautiful color theme and build anything with the Page Builder - over 40 widgets, themes, and language packs included!\nCheck out the latest demo of what you\u0026rsquo;ll get in less than 10 minutes, or view the showcase of personal, project, and business sites.\n Setup Academic Get Started View the documentation Ask a question Request a feature or report a bug Updating? View the Update Guide and Release Notes Support development of Academic:  Donate a coffee Become a backer on Patreon Decorate your laptop or journal with an Academic sticker Wear the T-shirt   \nKey features:\n Page builder - Create anything with widgets and elements Edit any type of content - Blog posts, publications, talks, slides, projects, and more! Create content in Markdown, Jupyter, or RStudio Plugin System - Fully customizable color and font themes Display Code and Math - Code highlighting and LaTeX math supported Integrations - Google Analytics, Disqus commenting, Maps, Contact Forms, and more! Beautiful Site - Simple and refreshing one page design Industry-Leading SEO - Help get your website found on search engines and social media Media Galleries - Display your images and videos with captions in a customizable gallery Mobile Friendly - Look amazing on every screen with a mobile friendly version of your site Multi-language - 15+ language packs including English, 中文, and Português Multi-user - Each author gets their own profile page Privacy Pack - Assists with GDPR Stand Out - Bring your site to life with animation, parallax backgrounds, and scroll effects One-Click Deployment - No servers. No databases. Only files.  Color Themes Academic comes with day (light) and night (dark) mode built-in. Click the sun/moon icon in the top right of the Demo to see it in action!\nChoose a stunning color and font theme for your site. Themes are fully customizable and include:\n         Ecosystem  Academic Admin: An admin tool to import publications from BibTeX or import assets for an offline site Academic Scripts: Scripts to help migrate content to new versions of Academic  Install You can choose from one of the following four methods to install:\n one-click install using your web browser (recommended) install on your computer using Git with the Command Prompt/Terminal app install on your computer by downloading the ZIP files install on your computer with RStudio  Then personalize and deploy your new site.\nUpdating View the Update Guide.\nFeel free to star the project on Github to help keep track of updates.\nLicense Copyright 2016-present George Cushen.\nReleased under the MIT license.\n","date":1461078000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1555426800,"objectID":"279b9966ca9cf3121ce924dca452bb1c","permalink":"/post/getting-started/","publishdate":"2016-04-20T00:00:00+09:00","relpermalink":"/post/getting-started/","section":"post","summary":"Create a beautifully simple website in under 10 minutes.","tags":null,"title":"22","type":"post"},{"authors":["John Jung"],"categories":null,"content":" Supplementary notes can be added here, including code and math.   ","date":1441033200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1441033200,"objectID":"966884cc0d8ac9e31fab966c4534e973","permalink":"/publication/journal-article/","publishdate":"2015-09-01T00:00:00+09:00","relpermalink":"/publication/journal-article/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":null,"title":"An example journal article","type":"publication"},{"authors":null,"categories":["R"],"content":" firstsd This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see \u0026gt; this is link http://rmarkdown.rstudio.com.\nsummary(cars) ## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.:19.0 3rd Qu.: 56.00 ## Max. :25.0 Max. :120.00 fit \u0026lt;- lm(dist ~ speed, data = cars) fit ## ## Call: ## lm(formula = dist ~ speed, data = cars) ## ## Coefficients: ## (Intercept) speed ## -17.579 3.932  second You can also embed plots. See Figure\n ","date":1437703994,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1437703994,"objectID":"10065deaa3098b0da91b78b48d0efc71","permalink":"/post/2015-07-23-r-rmarkdown/","publishdate":"2015-07-23T21:13:14-05:00","relpermalink":"/post/2015-07-23-r-rmarkdown/","section":"post","summary":"firstsd This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see \u0026gt; this is link http://rmarkdown.rstudio.com.\nsummary(cars) ## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.:19.0 3rd Qu.: 56.00 ## Max.","tags":null,"title":"333","type":"post"},{"authors":["John Jung","Robert Ford"],"categories":null,"content":" Supplementary notes can be added here, including code and math.   ","date":1372604400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1372604400,"objectID":"69425fb10d4db090cfbd46854715582c","permalink":"/publication/conference-paper/","publishdate":"2013-07-01T00:00:00+09:00","relpermalink":"/publication/conference-paper/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":null,"title":"An example conference paper","type":"publication"}]