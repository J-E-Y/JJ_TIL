[{"authors":["admin"],"categories":null,"content":"Hello!! I\u0026rsquo;m JohnJung.\nI\u0026rsquo;m a Software Engineer based in the south Korea. I\u0026rsquo;m quite interested in all aspects of software development. My passion lies in the web application development including both the front end and the back end. I fell in love with the modern JavaScript Since I changed my major.\nThank you for visiting my blog. I hope you enjoy looking around :)\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"598b63dd58b43bce02403646f240cd3c","permalink":"/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"author","summary":"Hello!! I\u0026rsquo;m JohnJung.\nI\u0026rsquo;m a Software Engineer based in the south Korea. I\u0026rsquo;m quite interested in all aspects of software development. My passion lies in the web application development including both the front end and the back end. I fell in love with the modern JavaScript Since I changed my major.\nThank you for visiting my blog. I hope you enjoy looking around :)","tags":null,"title":"John Jung","type":"author"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Academic\u0026rsquo;s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further talk details can easily be added to this page using Markdown and $\\rm \\LaTeX$ math code.\n","date":1906516800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906516800,"objectID":"96344c08df50a1b693cc40432115cbe3","permalink":"/talk/example/","publishdate":"2017-01-01T00:00:00+09:00","relpermalink":"/talk/example/","section":"talk","summary":"An example talk using Academic's Markdown slides feature.","tags":[],"title":"Example Talk","type":"talk"},{"authors":null,"categories":[],"content":" 1.Javacript call() // 사용방법 function identify() { return this.name; } function speak() { var greeting = \u0026quot;hello, I am \u0026quot; + identify.call(this); console.log(greet); } var me = { name : \u0026quot;jj\u0026quot;}; var you = {name : \u0026quot;Tim\u0026quot;}; // 호출 identify.call(me) // identify함수를 호출한다. return 값의 있는 this 는 me가 된다 // \u0026quot;jj\u0026quot; speak.call(you) // speak 함수를 호출한다. return 값의 있는 identify 함수가호출된다 마지막으로 this는 you 가 된다. // hello, I am Tim  call() 과 apply() 의 차이 // this 값을 넘겨주는 방식이 틀림 // call() and apply() 사용해서 함수안에있는 parameter 사용하기 var obj = { val : 0 }; var add = function ( x , y ) { this.val = x + y ; // 리턴값이 출력되는 것이 아니라 this값이 obj 가 됨으로 obj.val = 2 +3 // 이것을 해주기 위해 add.call(obj,2,3); or add.apply(obj,[2,3]); add.call(obj,2,3); // 5 동일다. add.apply(obj,[2,3]); // 5 동일하다. // arr 안에 가장 큰수를 가져오는 방법 apply() 메소드 써서 가져올수 있다. let arr = [1,2,3,4,5,6]; Math.max.apply(null,arr); // 6 }  This 객체지향 JavaScript Class  Object Oriented JavaScript   하나의 모델이 되는 청사진(blueprint)를 만들고 =\u0026gt; class, 그 청사진을 바탕으로 한 객체(object)를 만드는 =\u0026gt; instance\n 프로그래밍 패턴\nfunction Car(band,name,color) { // 인스턴스가 만들어 질때 실행될 코드들... } // new 키워드를 통해 클라스의 인스턴스를 만들어낼 수 있습니다. // Car 라는 class 만들어 낼때 class는 2가지를 갖게 된다. // 1. 속성 : band,name,color , currentFuel,maxSpeed // 2. 메소드 : refuel() ,setSpeed(), drive() // ex // 1. 클라스 함수 와 인스턴스 생성 function Car(brand,name,color) { // Car() 는 클라스 this.what_brand = brand; // 여기서 this 는 인자값이 드러갈 변수이름 (avante) this.what_name = name;\tthis.what_color = color; } // 2. 클라스 함수를 변수에 담고 파라미터 들어갈 값들 넣는다. let avante = new Car(\u0026quot;GM\u0026quot;,\u0026quot;avante\u0026quot;,\u0026quot;black\u0026quot;); // 변수를 만든다 (인스턴스값으로 들어갈 ) // 3. 추가로 인스턴스를 생성 Car.prototype.what_drive = function () { // Car() 인스턴스 생성 그리고 function 는 인스턴스 값 console.log(this.name + \u0026quot;가 운전을 합니다. \u0026quot;); } avante.what_name // 인스턴스 값 출력 // \u0026quot;avante\u0026quot; avante.what_brand // \u0026quot;GM\u0026quot; avante.what_color // \u0026quot;black\u0026quot; avante.what_drive // 새로 생성한 what_drive 출력 // jj 가 운전을 합니다. `tip` let arr = [1,2,3,4,5] // 배열 만들기 let arr = new Array(1,2,3,4,5) // 배열 만들기 // Array클라스 안에 (인자값들)  Closure 1 클로저란?  함수는 함수를 리턴할수 있다.그것을 고차함수라고 하는데 그것을 클로저라 부른다. 한마디로 외부함수의 변수에 접근할수 있는 함수를 클로저라 부른다.\n 특징 ?  클로저 함수의 장점은 지역변수 외부 함수의 변수 전역 변수 에 접근이 가능하다는 점이다 !\n function foo() { return function() { return 2 } } foo() // f // 2 가 반환되지 않고 //f \u0026lt;\u0026lt; 함수 자체가 리턴된다   클로저예제1 : 함수 이용해서 템플릿 함수 만들기  function htmlMark(tag) { let stratTag = \u0026quot;\u0026lt;\u0026quot; + tag + \u0026quot;\u0026gt;\u0026quot; ; let endTag = \u0026quot;\u0026lt;\u0026quot; + tag + \u0026quot;\u0026gt;\u0026quot; ; return function(content) { // 클로저 함수 사용 return stratTag + content + endTag; } } htmlMark(\u0026quot;h1\u0026quot;)(\u0026quot;JJ\u0026quot;); // 커링 사용해서 출력 tag : \u0026quot;h1\u0026quot; content:\u0026quot;JJ\u0026quot; // \u0026gt;\u0026gt;\u0026gt; \u0026lt;h1\u0026gt;JJ\u0026lt;h1\u0026gt; let h1Tag = htmlMark(\u0026quot;h1\u0026quot;); // 변수에 tag:\u0026quot;h1\u0026quot;담아서 지정하고 출력 h1Tag(\u0026quot;JJ\u0026quot;) // content : \u0026quot;JJ\u0026quot; // \u0026gt;\u0026gt;\u0026gt; \u0026lt;h1\u0026gt;JJ\u0026lt;h1\u0026gt;   클로저예제 2 : 클로저 모튤 패턴  // 두 카운터가 각기 다른 privateCount 를 다루면서, privareCounter 을 밖에 노출시키지 않는 것이 장점이다. function makeCounter() { let privateCounter = 0; let obj = { plus : function() { privateCounter = privateCounter + 1; },\tminus: function() { privateCounter = privateCounter - 1; }, getValue: function() { return privateCounter; } } return obj; }; let count1 = makeCounter() // 함수를 변수에 지정한다. count1.plus() // obj key값을 실행시키면 propo 값인 함수가 실행되면서 기존에 privateCounter 0 이였던 것을 1 증가시킨다. coun1.getValue() // obj key값인 getValue() 함수를 실행시키면 지금까지 plus 하고 minus한 값을 출력 할수 있게 코드가 짜여 있다.  Closure 2 클로져란?  클로저는 독립적인 (자유) 변수를 가리키는 함수이다. 또는, 클로저 안에 정의된 함수는 만들어진 환경을 ‘기억한다’.\n내부함수는 외부함수의 지역변수에 접근 할 수 있는데 외부함수의 실행이 끝나서 외부함수가 소멸된 이후에도 내부함수가 외부함수의 변수에 접근 할 수 있다. 이러한 메커니즘을 클로저라고 한다.\n // 일반적인 함수 let addTo = function (passed) { let inner = 2; return passed + inner; 3 + 2 }; console.log( addTo(3) ) // 5 //이것이 클로저 let passed = 3; // 함수 밖에 변수를 선언한다 let addTo = function () { // parameter 를 외부에서가져온다. let inner = 2; return passed + inner; 3 + 2 // }; console.log( addTo() ) // 5  Closure 3  클로저(closure)는 내부함수가 외부함수의 맥락(context)에 접근할 수 있는 것을 가르킨다.\n자바스크립트에서 함수는 일급객체이다. 함수를 호출했을때 리턴되는 함수(클로저)를 참조하고 있는 것이다.\n즉 반환되는 내부함수가 클로저이다.\n function outter() { var title = '난 영혼처럼 살아있다.'; return function() { console.log(title); // 클로저로 참조되는 외부변수를 자유변수(Free Variable) 라 부른다. }; }; var inner = outter(); // 생명 주기가 끝난 외부함수의 변수를 참조하는 내부함수를 클로저라 한다. inner(); // 결과 : 난 영혼처럼 살아있다. // 매번 호출할때 마다 변수값을 유지하고 싶을때 사용한다. // 클로저가 참조하고 있는 변수를 노출시키지 않는다 (캡슐화) // 클로저에서는 접근할수 있지만 코드 외부에서는 접근할수 없다. var a = function() { var count = 0; return function() { return count++; }; }; let next = a(); console.log(next()); console.log(next()); console.log(next()); console.log(next());  Closure 4 추가설명 \u0026amp; 코드를 작성할때 많이 격는 어려움  클로저는 JavaScript의 유효범위 체인을 이용하여 이미 생명 주기가 끝난 외부 함수의 변수를 참조하는 방법입니다. 외부 함수가 종료되더라도 내부함수가 실행되는 상태면 내부함수에서 참조하는 외부함수는 닫히지 못하고 내부함수에 의해서 닫히게 되어 클로저라 불리 웁니다. 따라서 클로저란 외부에서 내부 변수에 접근할 수 있도록 하는 함수입니다.\n내부 변수는 하나의 클로저에만 종속될 필요는 없으며 외부 함수가 실행 될 때마다 새로운 유효범위 체인과 새로운 내부 변수를 생성합니다. 또, 클로저가 참조하는 내부 변수는 실제 내부 변수의 복사본이 아닌 그 내부 변수를 직접 참조합니다\n function outerFunc(){ var a= 0; return { innerFunc1 : function(){ a+=1; // a = a + 1; console.log(\u0026quot;a :\u0026quot;+a); }, innerFunc2 : function(){ a+=2; // a = a + 2; console.log(\u0026quot;a :\u0026quot;+a); } }; } var out = outerFunc(); out.innerFunc1(); out.innerFunc2(); out.innerFunc2(); out.innerFunc1(); //실행결과 /* a = 1 a = 3 a = 5 a = 6 */ function outerFunc(){ var a= 0; return { innerFunc1 : function(){ a+=1; console.log(\u0026quot;a :\u0026quot;+a); }, innerFunc2 : function(){ a+=2; console.log(\u0026quot;a :\u0026quot;+a); } }; } var out = outerFunc(); var out2 = outerFunc(); out.innerFunc1(); out.innerFunc2(); out2.innerFunc1(); out2.innerFunc2(); //실행결과 /* a = 1 a = 3 a = 1 a = 3 */   [예제 8] 클로저의 상호작용, 서로 다른 객체   위의 코드는 클로저의 예제 코드이며 그 중 좌측 코드는 서로 다른 클로저가 같은 내부 변수를 참조하고 있다는 것을 보여주고 있습니다. 서로 다른 클로저 innerFunc1과 innerFunc2가 내부 변수 a를 참조하고 a의 값을 바꿔주고 있습니다. 실행 결과를 보면 내부 변수 a의 메모리를 같이 공유한다는 것을 알 수 있습니다.\n우측 코드는 같은 함수를 쓰지만 서로 다른 객체로 내부 변수를 참조하는 모습입니다. 외부 함수가 여러 번 실행되면서 서로 다른 객체가 생성되고 객체가 생성될 때 마다 서로 다른 내부 변수가 생성되어 보기엔 같은 내부 변수 a로 보이지만 서로 다른 내부 변수를 참조합니다.\n 클로저의 사용이유  클로저를 사용하게 되면 전역변수의 오,남용이 없는 깔끔한 스크립트를 작성 할 수 있습니다. 같은 변수를 사용하고자 할 때 전역 변수가 아닌 클로저를 통해 같은 내부 변수를 참조하게 되면 전역변수의 오남용을 줄일 수 있습니다. 또한, 클로저는 JavaScript에 적합한 방식의 스크립트를 구성하고 다양한 JavaScript의 디자인 패턴을 적용할 수 있습니다. 그의 대표적인 예로 모듈 패턴을 말 할 수 있는데 모듈 패턴의 자세한 내용은 [Javascript : 함수(function) 다시 보기]을 참고 하시면 될 것 같습니다. 마지막으로 함수 내부의 함수를 이용해 함수 내부변수 또는 함수에 접근 함으로써 JavaScript에 없는 class의 역할을 대신해 비공개 속성/함수, 공개 속성/함수에 접근을 함으로 class를 구현하는 근거 입니다.\n 3.2 클로저 사용시 주의할 점  클로저를 사용할 때 주의해야 할 점이 여럿 있습니다. 제가 알려드리고 싶은 주의 점은 다음과 같습니다.\nfor 문 클로저는 상위 함수의 변수를 참조할 때 자신의 생성될 때가 아닌 내부 변수의 최종 값을 참조합니다.\n \u0026lt;body\u0026gt; \u0026lt;script\u0026gt; window.onload = function(){ var list = document.getElementsByTagName(\u0026quot;button\u0026quot;); for(var i =0, length = list.length; i\u0026lt;length; i++){ list[i].onclick=function(){ console.log(this.innerHTML+\u0026quot;은\u0026quot;+(i+1)+\u0026quot;번째 버튼입니다\u0026quot;); } } } \u0026lt;/script\u0026gt; \u0026lt;button\u0026gt;1번째 버튼\u0026lt;/button\u0026gt; \u0026lt;button\u0026gt;2번째 버튼\u0026lt;/button\u0026gt; \u0026lt;button\u0026gt;3번째 버튼\u0026lt;/button\u0026gt; \u0026lt;/body\u0026gt; //실행결과 /* 1번째 버튼은 4번째 버튼입니다 2번째 버튼은 4번째 버튼입니다 3번째 버튼은 4번째 버튼입니다 */   [예제 9] for문안의 클로저   위의 코드는 각각의 버튼에 이벤트를 걸어 클릭된 버튼이 몇 번째 버튼인지를 알기 위한 예제 입니다. 하지만, 실행 결과 값은 바라던 결과가 나오지 않습니다. 위의 클로저인 클릭 이벤트가 참조 하는 변수 i의 값이 버튼이 클릭될 때의 값이 아닌 for 구문을 다 돌고 난후 i의 값 4를 참조하기 때문에 모두 4라는 결과가 나옵니다.\n \u0026lt;body\u0026gt; \u0026lt;script\u0026gt; window.onload = function(){ var list = document.getElementsByTagName(\u0026quot;button\u0026quot;); var gate = function(i){ list[i].onclick=function(){ console.log(this.innerHTML+\u0026quot;은\u0026quot;+(i+1)+\u0026quot;번째 버튼입니다\u0026quot;); } } for(var i =0, length = list.length; i\u0026lt;length; i++){ gate(i); } } \u0026lt;/script\u0026gt; \u0026lt;button\u0026gt;1번째 버튼\u0026lt;/button\u0026gt; \u0026lt;button\u0026gt;2번째 버튼\u0026lt;/button\u0026gt; \u0026lt;button\u0026gt;3번째 버튼\u0026lt;/button\u0026gt; \u0026lt;/body\u0026gt; //실행결과 /* 1번째 버튼은 1번째 버튼입니다 2번째 버튼은 2번째 버튼입니다 3번째 버튼은 3번째 버튼입니다 */ ```` * [예제 10] 예제9 해결법 : 중첩클로저 \u0026gt; 위의 예제 코드를 통해 중첩 된 클로저를 사용하는 것 만으로 위와 같은 문제를 피하여 원하는 값이 나옵니다. \u0026gt; 성능문제 클로저가 필요하지 않는 부분에서 클로저를 사용하는 것은 처리 속도와 메모리 면에서 좋은 방법이 아닙니다. ```js function MyObject(inputname) { this.name = inputname; this.getName = function() { return this.name; }; this.setName = function(rename) { this.name = rename; }; } var obj= new MyObject(\u0026quot;서\u0026quot;); console.log(obj.getName()); //실행결과 /* 서 */   [예제 11] 클로저의 오남용   위의 코드와 같은 함수 내부의 클로저 구현은 함수의 객체가 생성될 때마다 클로저가 생성되는 결과를 가져옵니다. 같은 구동을하는 클로저가 객체마다 생성이 된다면 쓸데없이 메모리를 쓸데없이 차지하게 되는데, 이를 클로저의 오남용이라고 합니다. 클로저의 오남용은 성능 문제 면에서 안 좋은 결과를 가져옵니다.\n function MyObject(inputname) { this.name = inputname; } MyObject.prototype.getName = function() { return this.name; }; MyObject.prototype.setName = function(rename) { this.name = rename; }; var obj= new MyObject(\u0026quot;서\u0026quot;); console.log(obj.getName()); //실행결과 /* 서 */   [예제 12] prototype객체를 이용한 클로저 생성   클로저를 위의 코드와 같이 prototype객체에 생성하게 되면 객체가 아무리 생성되어도 클로저를 한 번만 생성하고 여러 객체에서 쓸 수 있게 되어 메모리의 낭비를 줄입니다.\nthis와 arguments객체 클로저를 통해서는 외부함수의 this객체와 arguments객체를 참조하지 못합니다.\n function f1(){ function f2(){ console.log(arguments[0]); } return f2; } var exam = f1(1); exam(); //실행결과 /* undefined */ function f1(){ var a= arguments[0]; function f2(){ console.log(a); } return f2; } var exam = f1(1); exam(); //실행결과 /* 1 */   [예제 13] arguments객체 참조   위의 좌측코드같이 클로저를 통해 arguments객체를 참조하게 되면 undefined라는 실행결과가 나옵니다. 즉, arguments객체는 참조가 불가능하며 굳이 참조하고 싶다면 오른쪽 코드와 같이 새로운 내부 변수에 arguments객체의 값을 넣고 그 변수를 참조 하거나 매개변수를 만들어 매개 변수를 참조하여야 합니다.\n Function 생성자 var a= 20; function function1(){ var a= 10; var function2 = new Function(\u0026quot;\u0026quot;,\u0026quot;return a;\u0026quot;); return function2; } var exam = function1(); exam(); //실행결과 /* 20 */ // [예제 14] Function생성자로 선언된 클로저 // 위의 코드와 같이 클로저가 Function생성자로 생성된 경우 전역에서 생성된 것으로 인지합니다. 클로저 function2를 통하여 내부 변수 a를 참조하려고 했지만 원했던 결과와 달리 전역 변수 a가 참조 됩니다. function outerFunc(){ var outer_val = {}; function innerFunc(){ console.log(outer_val); } outer_val.values = innerFunc; return innerFunc; }   [예제 15] 인위적 순환참조   위의 코드는 의도적으로 클로저의 순환참조를 만든 예제 코드입니다. 내부 객체 outerval의 속성 값 values 에 내부 함수 innerFunc를 참조하게 만들고 내부 함수 innerFunc는 내부 객체 outerval을 호출 하고 있습니다. 위와 같은 순환 참조는 서로를 참조 하면서 영원히 끝나지 않는 호출로 인하여 메모리 누수를 야기합니다.\n function outerFunc(){ var outer_val = {}; function innerFunc(){ console.log(\u0026quot;Hello\u0026quot;); } outer_val.values = innerFunc; return innerFunc; } // [예제 16] 의도치 않은 순환참조 // 그렇다면 위 코드같이 서로를 참조를 하지 않게 되면 순환참조가 끊어질까요? 아닙니다. JavaScript의 클로저는 특별한 문법을 쓰지 않고도 암묵적으로 생기는 특성을 가지고 있습니다. 이는 클로저를 쉽게 만들도록 해주지만 클로저가 사용되는 곳을 사용자가 식별하기 어렵게 만들기도 합니다. 그렇게 되면 내부 함수의 innerFunc는 암묵적으로 상위 함수의 내부 객체인 outer_val을 참조하게 되고 이로인해 의도치 않게 순환참조가 만들어집니다. 이런 의도치 않은 순환참조는 메모리 누수를 야기합니다. // 이 같은 의도치 않은 순환참조는 객체가 제거될 때 명시적으로 null값으로 초기화 해 주거나 try-catch-finally구문으로 해결합니다. 또는 더 글라스 크락포드가 제시한 purge함수를 쓰게 되면 순환참조를 해결할 수 있습니다. 아래는 purge함수 입니다. function purge(d) { var a = d.attributes, i, l, n; if (a) { for (i = a.length - 1; i \u0026gt;= 0; i -= 1) { n = a[i].name; if (typeof d[n] === 'function') { d[n] = null; } } } a = d.childNodes; if (a) { l = a.length; for (i = 0; i \u0026lt; l; i += 1) { purge(d.childNodes[i]); } } }  커링 (currying) 커링이란?  호출된 함수의 매개변수로 동적으로 새로운 함수를 생성하여 반환하는 패턴을 커링이라 한다.\n호출하는 함수의 인자값이 비슷하다면 커링을 사용하는 것이 효율적이다.\n클로저를 이용해 함수의 인자를 미리 등록해두는 것\n function func(a) { return function(b) { // 내부 함수, 즉 클로저인 익명 함수 반환 return a + b; } } var currying = func(5); var result = currying(5); console.log(result); // 또는 아래처럼 호출 var result2 = func(5)(7); console.log(result2); https://mylife365.tistory.com/320  Scope 스코프란?  자바스크립트에서 스코프란 어떤 변수들에 접근할 수 있는지를 정의합니다.\n 스코프엔 두 가지 종류가 있습니다. 전역 스코프와 지역 스코프로 나뉩니다.\n   전역_스코프\n let greeting = 'Hello John' // 외부에서 변수가 선언됨 function marcusHello () { console.log(greeting) } console.log(greeting) // 'Hello John!' sayHello() // 'Hello John!'   지역_스코프\n function marcusHello () { let greeting = 'Hello John!' // 안에서 변수가 선언됨 console.log(greeting) } marcusHello() // 'Hello John!!' console.log(x) // Error, hello is not defined let name = \u0026quot;john\u0026quot;; function showName() { let name = \u0026quot;jj\u0026quot;; // 2. 지역변수 \u0026lt;\u0026lt; showName함수에서만 접근 가능 console.log(name); // 2. jj } console.log(name); // 1.jj \u0026lt;\u0026lt; 전역변수 가져옴 showname() // 2. console.log(name) // 3. john \u0026lt;\u0026lt; 여전히 전역 변수 john let name = \u0026quot;john\u0026quot;; function showName() { name = \u0026quot;jj\u0026quot;; // name 이 전역변수로 바뀜 cos let 없기 때문에 외부에서 변수 가져왔다. console.log(name); // jj } console.log(name); // 1. john \u0026lt;\u0026lt; 전역변수 가져옴 showName() // 2. console.log(name) // 3. jj 함수가 실행된 뒤에는 함수안에 있는 name = jj 를 가져와서 리턴한다. 왜냐하면 jj 가 전역 변수로 바뀌었기 때문이다.  Number Methods 1. Number.isInteger()  숫자가 인지 아닌지 확인\n return : boolean\n  Number.isInteger(1) // ture; number.isInteget(\u0026quot;1\u0026quot;) // false;  2. Number(), parseFloat(), parseInt()  문자열을 숫자로 바꾸는 함수  Number(\u0026quot;12,32\u0026quot;); // Nan 소수점이 있으면 반환 안된다. parseInt(\u0026quot;123.2323\u0026quot;); // 123 소수점뒤에는 버린다. parseFloat( '12.34' ) // 12.34 소수점까지 포함해서 숫자로 반환해준다.  3. toFixed();  소수점이 길면 자르는 역활\n 반환값 : string\n  let num = 123.2342323123231232312323123231232312323 num.toFixed(3) // \u0026quot;123.234\u0026quot; // string 으로 반환\u001f  Math Methods 1. Math.max() / Math.min()  가장 큰수 리턴  Math.max(2,3,2,4,52) // 52   가장 작은수 리턴  Math.min(2,3,2,4,52) // 2  2.floor()  소수점을 가장 가까운 정수로 내림한 값을 리턴\n return : numnber , 정수\n  alert(Math.floor(5.1)); // number, 5 alert(Math.floor(5.9)); // number, 5 alert(Math.floor(5)); // number, 5 alert(Math.floor(-5.1)); // number, -6 alert(Math.floor(-5.9)); // number, -6  3.round()  소수점을 가장 가까운 정수로 리턴한다. return : number;  alert(Math.round(5)); // number, 5 alert(Math.round(5.6)); // number, 6 // 올라간다. alert(Math.round(5.4)); // number, 5  4.random()  0과 1사이의 랜덤한 수를 리턴  *0과 1사이의 수를 리턴함\n Math.random()의 리턴값에 수를 곱하면 0부터 곱한 수 사이의 랜덤한 값을 구할 수 있다\n 랜덤한 수를 발급하거나, 시스템적으로 불규칙한 행위가 필요할 때 사용\n  alert(Math.random()*100); // number, 0~100 사이의 랜덤한 값을 리턴 alert(Math.ceil(Math.random()*100)); // number, 0~100 사이의 랜덤한 값을 올림한 정수를 반환  5. abs()  인자로 전달된 값에 대한 절대값을 리턴함  6. sqrt()  제곱근을 리턴함\n 사용방법 : Math.sqrt([대상 숫자]);\n  ex // 1024의 제곱근을 구하시오. Math.sqrt(1024) : 32  alert(Math.sqrt(25)); // number, 5 alert(Math.sqrt(100)); // number, 10 alert(Math.sqrt(5)); // number, 2.23606797749979 alert(Math.sqrt(-5)); // Nan, 제곱근은 음수일 수 없음  7.pow  거듭제곱을 리턴한다.\n Syntax : Math.pow(a,n)\n 사용방법 : Math.pow([대상 숫자], [거듭제곱 횟수]);\n  ex // 숫자 2를 5번 거듭제곱하여 그 결과를 출력하시오. Math.pow(2, 5) // : 32 // 2* 2* 2 * 2 * 2 // : 32  //절대값이란 실수에서 부호를 제거한 값을 의미한다. // 3과 -3의 절대값은 3이 된다. alert(Math.abs(-3)); // number, 3  salesTeam 안에 있는 data fliter 와 foreach 로 다루기 var salesTeam = [ { \u0026quot;name\u0026quot;: { \u0026quot;first\u0026quot;: \u0026quot;Bruce\u0026quot;, \u0026quot;last\u0026quot;: \u0026quot;Wayne\u0026quot; }, \u0026quot;age\u0026quot;: 10, \u0026quot;sales\u0026quot;: \u0026quot;$2314\u0026quot; }, { \u0026quot;name\u0026quot;: { \u0026quot;first\u0026quot;: \u0026quot;Alvaro\u0026quot;, \u0026quot;last\u0026quot;: \u0026quot;Angelos\u0026quot; }, \u0026quot;age\u0026quot;: 55, \u0026quot;sales\u0026quot;: \u0026quot;$1668\u0026quot; }, { \u0026quot;name\u0026quot;: { \u0026quot;first\u0026quot;: \u0026quot;Alvaro\u0026quot;, \u0026quot;last\u0026quot;: \u0026quot;Angelos\u0026quot; }, \u0026quot;age\u0026quot;: 15, \u0026quot;sales\u0026quot;: \u0026quot;$1668\u0026quot; } ]; // age 가 20 아래인 것만 teenager 에 담기 // filter 사용 let teenager = salesTeam.filter(function(ele){ return ele.age \u0026lt; 20; }); // 뽑은거 안에서 fullNmae 가져오기 // foreach 사용 let result = []; teenager.forEach(function(ele){ result.push(`${ele.name.first} ${ele.name.last}`); // });  reduce() Definiton \u0026amp; Syntax  arr.reduce(callback(accumulator, currentValue[, index[, array]])[, initialValue])\n  accumulator — the accumulator accumulates all of the callbacks returned values.\n val — the current value being processed\n index — the current index of the value being processed\n arr — the original array\n   The reduce() method is used to apply a function to each element in the array to reduce the array to a single value.\n여러게의 값이 담긴 배열이 줄여서(reduce) 최종적으로 하나의 값으로 만드는 과정\n  리턴값이 반듯이 필요\n 누적값 : 배열의 요소를 하나하나 줄여가면서 생기는 중간 과정(결과)\n 현재값 : 리듀서가 배열을 지나갈 떄 만나는 배열의 요소\n 초기값 : 배열의 요소를 줄이기 전 누적값의 초기 상태\n  ex)  Reduce vs. For Loop\n 배열에서 숫자로\n To use for Loop\n  let arr = [1, 2, 3, 4]; let sum = 0; for(var i = 0; i \u0026lt; arr.length; i++) { sum += arr[i]; } // sum = 10   To use the reduce() function 배열에서 숫자로  let arr = [1,2,3,4]; let sum = arr.reduce((acc, val) =\u0026gt; { return acc + val; }); // sum = 10   배열에서 문자열로\n 이름 함쳐서 문자열로 출력 시키기\n  let users = [ {name:\u0026quot;john\u0026quot;,age : 20 }, {name:\u0026quot;tim\u0026quot;,age :40 }, {name:\u0026quot;esther\u0026quot;,age : 60 }, ]; // \u0026quot;john, tim, esther\u0026quot; 이렇게 만들것이다. function sumName(retName , cuur ) { // 1. \u0026quot; \u0026quot; + \u0026quot;john\u0026quot; + \u0026quot;,\u0026quot; // 2. \u0026quot;john,\u0026quot; + \u0026quot;tim\u0026quot; + \u0026quot;,\u0026quot; // 3. \u0026quot;john, time,\u0026quot; + \u0026quot;esther\u0026quot; + \u0026quot;,\u0026quot; retName = retName + cuur.name + \u0026quot;,\u0026quot;; return retName ; // 리턴을 꼭 해줘야 한다. } users.reduce(sumName, \u0026quot;\u0026quot;); // 두번째 인자값에 초기값인 \u0026quot;\u0026quot; 넣어준다. // \u0026quot;john,tim,esther,\u0026quot;   배열에서 객체로\n 첫번째 글자를 따서 전화번호부 만들기\n  // 원본 let users = [ {name:\u0026quot;john\u0026quot;,age : 20 }, {name:\u0026quot;tim\u0026quot;,age :40 }, {name:\u0026quot;esther\u0026quot;,age : 60 }, ]; // 결과 출력 let addressBook = { j : [ {name:\u0026quot;john\u0026quot;,age : 20 } ], t : [ {name:\u0026quot;tim\u0026quot;,age :40 } ], e : [ {name:\u0026quot;esther\u0026quot;,age : 60 } ] }; //1. makeAddressBook \u0026lt; callback 함수를 미리 만든다. function makeAddressBook (addressBook, user) { // 첫번째 글자를 먼저 변수에 저장한다. let firstLetter = user.name[0]; // addressBook { }; if (firstLetter in addressBook) { // 만약 키가 있으면 해당 배열에 사람을 추가한다. addressBook[firstLetter].push(user); } else { // 만약 키가 없다면 해당 배열을 만들고 addressBook[firstLetter] = []; // 사람을 추가한다. addressBook[firstLetter].push(user); } return addressBook; // 객체를 리턴한다. } users.reduce(makeAddressBook, {} ); // {j: Array(1), t: Array(1), e: Array(1)} /* 결과값 { j : [ {name:\u0026quot;john\u0026quot;,age : 20 } ], t : [ {name:\u0026quot;tim\u0026quot;,age :40 } ], e : [ {name:\u0026quot;esther\u0026quot;,age : 60 } ] }; */   Using the reduce() method, how would you sum up the population of every country\n data\n  let data = [ { country: 'China', pop: 1409517397, }, { country: 'India', pop: 1339180127, }, { country: 'USA', pop: 324459463, }, { country: 'Indonesia', pop: 263991379, } ]   Soultion  let sum = data.reduce(function(acc,val){ return acc + val.pop; },0); //1409517397 +1339180127 + 324459463 + 263991379 = 3337148366 // sum // 3337148366   except China?  let sum = data.reduce((acc, val) =\u0026gt; { return val.country === 'China' ? acc : acc + val.pop; }, 0); //sum = 1927630969  How to convert a str of nums to an arr of nums? Qeustion  str = \u0026ldquo;1,2,3,4\u0026rdquo; =\u0026gt; [1, 2, 3, 4]  var a = \u0026quot;1,2,3,4\u0026quot;; var b = a.split(','); /// [\u0026quot;1\u0026quot;, \u0026quot;2\u0026quot;, \u0026quot;3\u0026quot;, \u0026quot;4\u0026quot;] // how to make this : [1, 2, 3, 4]  Soultion  useing Array.map to convert each element into a number.  var a = \u0026quot;1,2,3,4\u0026quot;; var b = a.split(',').map(function(item) { return parseInt(item, 10); }); // b = [1, 2, 3, 4]   useing Map and Number  var b = a.split(',').map(Number); // b = [1, 2, 3, 4]   useing from()  var b = Array.from(a.split(','),Number); // b = [1, 2, 3, 4]  forEach(), map(), fliter() 1. forEach()  array.forEach (callback(callbackFunction(element, index, array)\n  배열 혹은 함수를 반복할때 사용\n 리턴값 없다\n  ex)  forEach 로 배열의 합 구하기  function test(){ var testArray = [1,2,3,4,5]; var sum = 0; function getSum(value){ sum = sum + value; } testArray.forEach(getSum); // forEach(getSum) that's all console.log(sum); } test() // 15  2.map()  array.map(callbackFunction(element, index, array)\n  immutable\n 새로운 배열을 만들때 사용\n 리턴값 있다.\n  ex)  for 문으로 name 값 가져오기  let users = [ {name:\u0026quot;john\u0026quot;,age : 20 }, {name:\u0026quot;tim\u0026quot;,age :40 }, {name:\u0026quot;esther\u0026quot;,age : 60 }, ]; let userName = []; for (let i = 0; i \u0026lt; users.length; i ++ ) { userName.push(users[i].name); } userName // [\u0026quot;john\u0026quot;, \u0026quot;tim\u0026quot;, \u0026quot;esther\u0026quot;]   map() 으로 name 값 가져오기  let users = [ {name:\u0026quot;john\u0026quot;,age : 20 }, {name:\u0026quot;tim\u0026quot;,age :40 }, {name:\u0026quot;esther\u0026quot;,age : 60 }, ]; function getName (user){ return user.name; // 리턴값 필요하다. } users.map(getName); // [\u0026quot;john\u0026quot;, \u0026quot;tim\u0026quot;, \u0026quot;esther\u0026quot;]  3.fliter()  array.fliter(callbackFunction(element, index, array)\n  조건에 해당한 것을 새로운 배열의 형태로 출력 한다.\n 리턴값 있다.\n map 함수는 filter함수와 같이 오브젝트도 컨트롤 할 수도 있습니다.\n  예제  filter 로 30 살 보다 많은 사람 사람을 찾는다  let users = [ {name:\u0026quot;john\u0026quot;,age : 20 }, {name:\u0026quot;tim\u0026quot;,age :40 }, {name:\u0026quot;esther\u0026quot;,age : 60 }, ]; function getOldName(user){ return user.age \u0026gt; 30; // 리턴 필요하다. } // 그리고 filter 에 함수를 넣는다. users.filter(getOldName) // [{name:\u0026quot;tim\u0026quot;,age :40 },{name:\u0026quot;esther\u0026quot;,age : 60 }];   filter 로 이름에 s 가 있는 사람을 가져오고 싶다.?  let users = [ {name:\u0026quot;john\u0026quot;,age : 20 }, {name:\u0026quot;tim\u0026quot;,age :40 }, {name:\u0026quot;esther\u0026quot;,age : 60 }, ]; function userIncludeS (user){ return user.name.indexOf(\u0026quot;s\u0026quot;) !== -1; // 조건문 } users.filter(userIncludeS) // [{name:\u0026quot;esther\u0026quot;,age : 60 }];  sort() arr.sort(sortfunc)\n mutable\n1.배열을 정렬한다.\n2.알파벳 순서로 정렬한다.\n3.숫자의 경우 암시적으로 문자열로 형변환 하기 때문에 숫자 1이 숫자 10보다 먼저 나온다.\n4.sortfunc 로 비교 대상인 두개의 인자를 전달하는데, 리턴 값에 따라서 선후를 판단한다.\n strArr = [\u0026quot;all\u0026quot;, \u0026quot;before\u0026quot;, \u0026quot;hello\u0026quot;, \u0026quot;world\u0026quot;] // a 가 크면 리턴 1 작은수부터 정렬 strArr.sort(function(a,b){ if (a \u0026gt; b) { return 1; } else if (a === b){ return 0; } else { return -1; } }) // a 가 작으면 리턴 큰수부터 정렬 strArr.sort(function(a,b){ if (a \u0026gt; b) { return -1; } else if (a === b){ return 0; } else { return 1; } })   Example 1\n  var numbers = [9,8,7,6,5,4,3,2,1]; alert(numbers.sort()); // array, [1,2,3,4,5,6,7,8,9] alert(numbers); // array, [1,2,3,4,5,6,7,8,9], 원본을 변경한다. alert(numbers.sort() === numbers); // boolean, true, 원본과 반환값이 같다. var numbers = [20, 10, 9,8,7,6,5,4,3,2,1]; //array, [1,10,2,20,3,4,5,6,7,8,9], 암시적으로 원소를 문자로 형변환 하기 때문에 10이 1뒤에 온다. alert(numbers.sort());   Example 2\n var numbers = [20, 10, 9,8,7,6,5,4,3,2,1]; var x = function(a,b){ return a-b; } console.log(numbers.sort(x)); [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20] 순서반대 로 할려면 return a+b; [20, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]   Example 3\n  function sortNumber(a,b){ // 비교 대상인 a와 b가 인자로 전달된다. //alert('a :'+a+', b:'+b); // a에서 b를 뺀 결과가 음수면 a가 b보다 작고, 0이면 같다. // sort메소드는 return 값이 음수,양수,0인지에 따라서 순서를 정한다. return a-b; } var numbers = [20, 10, 9,8,7,6,5,4,3,2,1]; alert(numbers.sort(sortNumber)); // array, [1,2,3,4,5,6,7,8,9,10,20]   Description from others\n  위의 sort함수를 보면 parameter로 function이 올수 있다은건 이 문서를 보고 알수 있습니다. 그런데 sort함수 parameter인 function의 parameter와 retrun에 대한 설명(?)은 어떻게 알수 있나요?? 예를들어서 var numbers = [20, 10, 9,8,7,6,5,4,3,2,1]; function sortNumber(a,b){ return a - b; } 이럴때, sortNumber함수(내가 만들려는 함수 )의 파라미터가 2개 (a,b)인건 어찌 알수있고, return함수가 어떻게 동작하는지는 어떻게 알수 있을까요?   Description from others\n 우선 [20, 10, 9,8,7,6,5,4,3,2,1]의 배열에서 a-b라는 연산을 모두 한 다음 그 결과값으로 정렬하는 것이 결코 아닙니다. 뭐하러 굳이 뺄셈을 하고 그 값으로 또 정렬하겠습니까? 자바스크립트의 정확한 알고리즘은 아니지만 쉽게 정렬 알고리즘을 설명하면 이렇습니다. (a,b) 형식으로 지정한 두 인자를 차례로 비교합니다. 우선 배열 numbers[0]과 numbers[1] 즉, 20과 10을 비교해 볼까요? 20-10 = 10 결과값이 10 즉, 양수입니다. sort함수에 sortNumber(a,b)의 return 값으로 양수 10을 전달합니다. 그럼 sort함수가 양수값을 전달받고 배열의 순서를 바꾸어 버립니다. (정확하게 말하면 두 배열 안에 든 값을 교체) 그럼 배열이 [10, 20, 9,8,7,6,5,4,3,2,1] 이렇게 바뀝니다. 그 다음 numbers[0]과 numbers[2] 즉 10과 9를 비교합니다. 10 - 9 = 1 \u0026gt;0, 양수입니다. 결과값이 양수이므로 또 10과 9의 순서를 바꿉니다. 이런 식으로 계속 두 인자를 비교해서 결과값이 양수가 나오면 순서를 바꾸고, 음수가 나오면 순서를 그대로 유지하는 겁니다. 배열이 바뀌어가는 순서를 보면 이해하기 쉽습니다. [(20), (10), 9,8,7,6,5,4,3,2,1] 20-10 = 10, 즉 양수이므로 순서바뀜! ()는 비교되는 인자값. [(10), 20, (9),8,7,6,5,4,3,2,1] 10 - 9 = 1 또 양수, 순서 바뀜. [(9), 20, 10, (8),7,6,5,4,3,2,1] 반복... [(8), 20, 10, 9,(7)...] ... [(2). 20, 10...3, (1)] [(1), 20, 10...] 그럼 배열 내에서 가장 작은 값 1이 찾아지겠죠. [1, 20, 10, 9,8,7,6,5,4,3,2] 1의 순서는 바뀌지 않습니다. 1-2 = -1 즉 결과값이 음수이기 때문이죠. 그 다음은 두번째 배열 차례입니다. 20 - 10 = 10 \u0026gt; 0 이므로 순서를 또 바꿉니다. [1, (20), (10), 9,8,7,6,5,4,3,2] [1, (10), 20, (9), 8...] [1, (9), 20, 10, (8)...] 이런 식으로 반복하다 보면 두번째로 작은 값 2도 찾게 됩니다. .... [1, 2, 20, 10, 9,8,7,6,5,4,3] 그럼 다음은 세번째... 이렇게 지루하게 반복하면 결국 정렬이 됩니다. 물론 실제 자바스크립트에서는 비교하는 순서가 다릅니다. 다른 알고리즘을 쓰기 때문이죠. 이렇게 차례차례 비교해 나가면 인간이 이해하기는 쉽지만 연산량이 기하급수적으로 늘어나기 때문에 다른 정렬 알고리즘을 쓰는 것이죠. 실제로는 [20, 10, 9,8,7,6,5,4,3,2,1] 배열의 양쪽 끝부터 비교하고 (20, 1), 그 다음 배열의 가운데 값을 차례로 비교해 나갑니다. (1,6) 디버깅해 보시면 쉽게 아실 수 있을 겁니다   Description from others\n ar numbers = [20, 10, 9,8,7,6,5,4,3,2,1]; function sortNumber(a,b){ return a - b; } 를 하게 되면 모든 값들끼리 a - b를 하게 됩니다. 그렇게 나온 값들을 sort()에 넣으면, (a - b)의 순서가 숫자가 낮은 것부터 높은 순서대로 정렬이 되겠죠. -19(1 - 20), -9(1-10), -8(1-9), -7(1-8), -6(1-7), -5(1-6), -4(1-5), -3(1-4), -2(1-3), -1(1-2) -18(2-20), -8(2-10), -7(2-9), -6(2-8), -5(2-7), -4(2-6), -3(2-5), -2(2-4), -1(2-3), 0(2-2), 1(2-1) -17(3-20), -7(3-10), -6(3-9), -5(3-8), -4(3-7), -3(3-6), -2(3-5), -1(3-4), 0(3-3), 1(3-2), 2(3-1) ... 10(20-10), 11(20-9), 12(20-8), 13(20-7), 14(20-6), 15(20-5), 16(20-4), 17(20-3), 18(20-2), 19(20-1) 그럼 계산된 숫자의 크기에 따라서 a와 b의 순서가 sort()에 의해 재배열 되어 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20 가 나옵니다.  every() 와 some() 1.every()  array.every(callbackFunction(currentValue, index, array), thisArg)\n  every 함수는 배열의 모든 요소가 callbackFunction 에서 true를 리턴해야 true를 리턴, 하나라도 false가 떨어지면 false를 리턴합니다.\n every나 some 함수의 경우 배열내 값이 존재하는지 확인할때나 조건에 맞는(혹은 맞지 않는) 값이 있는지 확인 할 때 등 활용이 가능합니다.\n  2.some()  array.some(callbackFunction(currentValue, index, array), thisArg)\n  some 함수는 배열의 요소 중 하나라도 callbackFunction에서 true를 리턴하면 true를 리턴 합니다.\n every나 some 함수의 경우 배열내 값이 존재하는지 확인할때나 조건에 맞는(혹은 맞지 않는) 값이 있는지 확인 할 때 등 활용이 가능합니다.\n every 와 some 의 차이점\n   every 와 some 메서드는 배열을 순회하면서 특정 조건을 배열의 값들이 만족시키는지 검사하는 메서드로서 호출한 배열이 결론적으로 조건을 만족시키는지(true), 만족시키지 못하는지(false)를 알려준다. every 와 some 의 차이는 every 가 배열의 모든 값이 조건을 만족해야, some 은 일부만 만족해도 true 를 return 한다\n \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;- 2. Dom Dom 이란 ? // Dom을 이용해서 HTML문서를 제어할수 있다 // DOM 객체의 값 바꾸기 // ex1-1 document.getElementsByTagName() document.getElementsByTagName() \u0026gt;\u0026gt;html에 있는 tag name 을 가져오는 명령이다. var list = document.getElementsByTagName('h2') \u0026gt;\u0026gt;모든 h2를 list 라는 변수에 담아오겠다. 태그 이름을 바꾸기 위해서는 a \u0026gt;\u0026gt; [h2,h2] a[0] \u0026gt;\u0026gt; \u0026lt;h2\u0026gt;hello 1\u0026lt;/h2\u0026gt; a[1] \u0026gt;\u0026gt; \u0026lt;h2\u0026gt;hello 2\u0026lt;/h2\u0026gt; 이렇게 배열안에 들어가 있다. a[1].innerHTML = \u0026quot;good morning\u0026quot; heelo 2 \u0026gt;\u0026gt; good morning 으로 바뀐다. 이것이 dom 의 역활 이다. // ex1-2 document.getElementsById() var a = document.getElementsById(\u0026quot;main\u0026quot;) \u0026gt;\u0026gt; main 아이디 값의 tag를 가져와서 a 변수에 담는다 a \u0026gt;\u0026gt; \u0026lt;p id = main\u0026gt;hello jj \u0026lt;/p\u0026gt; a.innerHTML = \u0026quot;hello John jung\u0026quot; a \u0026gt;\u0026gt;\u0026lt;p id = main\u0026gt;hello john jung\u0026lt;/p\u0026gt;  버튼 만들기 \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;함수를 이용해 버튼 만들기\u0026lt;/h1\u0026gt; // 1.value 를 지정하기 in HTML \u0026lt;input id = \u0026quot;input1\u0026quot; type =\u0026quot;text\u0026quot;\u0026gt; \u0026lt;button id =\u0026quot;button1\u0026quot;\u0026gt;cilck\u0026lt;/button\u0026gt; \u0026lt;script\u0026gt; // 2. 함수\u0026amp;변수를 만들어서 준비한다 var ret = function(){ document.getElementById(\u0026quot;input1\u0026quot;); console.log(input1.value); } var button = document.getElementById(\u0026quot;button1\u0026quot;); // 3 .입력받을 ID 값을 받는 함수를 연결해준다. button1.onclick = ret; /script\u0026gt; \u0026lt;/body\u0026gt;  e.target 이란 ?  event.target 와 event.target.parentNode 차이점  * e.target === 클릭된애 * e.target.parentNode === 클릭된애 부모태그 * e.target.parentNode.parentNode === 클릭된애 부모의 부모태그   event.target 과 currentTarget 의 차이점  * event.target 은 마우스 클릭할때 발생되는 이벤트가 일어나는 곳을 말하고 * event.currentTarget 은 addEventListener 를발생시키는 대상  How to check if element has any children ? if (element.firstChild) { // It has at least one } if (element.hasChildNodes()) { // It has at least one } if (element.childNodes.length \u0026gt; 0) { // Or just `if (element.childNodes.length)` // It has at least one } if (element.children.length \u0026gt; 0) { // Or just `if (element.children.length)` // It has at least one element as a child } if (element.firstElementChild) { // It has at least one element as a child } var hasChildElements, child; hasChildElements = false; for (child = element.firstChild; child; child = child.nextSibling) { if (child.nodeType == 1) { // 1 == Element hasChildElements = true; break; } } function hasChildElement(elm) { var child, rv; if (elm.children) { // Supports `children` rv = elm.children.length !== 0; } else { // The hard way... rv = false; for (child = element.firstChild; !rv \u0026amp;\u0026amp; child; child = child.nextSibling) { if (child.nodeType == 1) { // 1 == Element rv = true; } } } return rv; }  checkbox 안에 있는 value 값 얻기  html  \u0026lt;div class = \u0026quot;container\u0026quot;\u0026gt; \u0026lt;input type=\u0026quot;checkbox\u0026quot; class =\u0026quot;checks\u0026quot; value =\u0026quot;뜨거워\u0026quot;\u0026gt; hot \u0026lt;input type=\u0026quot;checkbox\u0026quot; class =\u0026quot;checks\u0026quot; value =\u0026quot;추워\u0026quot;\u0026gt; clod \u0026lt;a href=\u0026quot;#\u0026quot; onclick=\u0026quot;submitFun();return false;\u0026quot;\u0026gt;ok \u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt;   js  function submitFun() { var checks = document.getElementsByClassName('checks') var str = \u0026quot;\u0026quot;; for (let i = 0; i \u0026lt; checks.length; i++ ){ if (checks[i].checked === true ) { str += checks[i].value + \u0026quot;\u0026quot;; } } alert(str); }  \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;- 3. My_post underBar (function() { 'use strict'; window._ = {}; // argument로 무엇이 전달되든간에, 있는 그대로 리턴하세요. // 이 함수가 쓸데없어 보일지 모르겠지만, 기억하세요! - 만약 함수에 iterator가 필요하고, // 뭐라도 넘겨줘야 하는 상황에는 이 함수가 유용할 것입니다. _.identity = function(val) { return val; }; /** * COLLECTIONS * =========== * * 이 섹션에서는 우리는 collection이라고 불리는 값들의 집합을 이용하는 함수에 집중할겁니다. * JavaScript에서는 collection은 값들을 포함하며, 배열 혹은 객체가 될 수 있습니다. * * * IMPORTANT NOTE! * =========== * * .first 함수가 이미 구현되어 있습니다. 이 함수를 가이드 삼아, 앞으로 나올 함수들을 구현해보세요. * 사전에 이미 완료된 과제의 일부분을 만나게 될 경우, 반드시 코드를 잘 읽어보고 이해하고 넘어가십시오. * 이러한 과정을 지나친다면, 앞으로 구현하게 될 함수가 훨씬 더 어렵게 느껴질겁니다. */ // 배열의 처음 n개의 element를 담은 배열을 리턴하세요. // 만일 n이 undefined일 경우, 단순히 첫번째 element를 리턴하세요. _.first = function(array, n) { return n === undefined ? array[0] : array.slice(0, n); }; // first와 비슷하게, 마지막 n개의 element를 담은 배열을 리턴하세요. // 만일 n이 undefined일 경우, 단순히 마지막 element를 리턴하세요. _.last = function(array, n) { if ( n===0 ) { return []; } return n === undefined ? array.slice(-1).pop() : array.slice(-n); }; // iterator(value, key, collection)를 collection의 각각의 key-value pair에 대해 호출하세요. // iterator는 함수로 전달되며, 쉽게 말해 반복해서 실행하는 함수입니다. // collection으로 배열과 객체를 다 받을 수 있어야 합니다. // 참고로 배열의 value는 element이며, key는 index입니다. // // Note: _.each 는 아무런 값도 리턴하지 않습니다. // 다만 단순히 iterator 함수를 전달되는 collection의 각 항목에 대해 실행할 뿐입니다. // // Note 2: 이 문제를 풀기 위해서는 여러분이 spec 디렉토리에 있는 테스트 케이스의 요구사항을 잘 살펴볼 필요가 있습니다. // 실제로 어떻게 사용되는지 각 테스트 케이스 항목에 잘 나와 있습니다. _.each = function(collection, iterator) { if (Array.isArray(collection)) { for (let i = 0; i \u0026lt; collection.length; i++) { // iterator(value, key, collection) iterator(collection[i], i, collection); } } else { for (let key in collection) { iterator(collection[key], key, collection); } } }; // target으로 전달되는 값이 array에서 발견되면, 그 index를 리턴하세요. // 만일 array에서 발견할 수 없다면 -1을 리턴하세요. _.indexOf = function(array, target) { // TIP: Here's an example of a function that needs to iterate, which we've // implemented for you. Instead of using a standard `for` loop, though, // it uses the iteration helper `each`, which you will need to write. var result = -1; _.each(array, function(item, index) { if (item === target \u0026amp;\u0026amp; result === -1) { result = index; } }); return result; }; // 테스트 함수를 통과하는 모든 element를 담은 배열을 리턴하세요. _.filter = function(collection, test) { let result = []; for (let i = 0; i \u0026lt; collection.length; i ++ ) { if (test(collection[i])) { result.push(collection[i]); } } return result; } // 테스트 함수를 통과하지 않는 모든 element를 담은 배열을 리턴하세요. _.reject = function(collection, test) { // TIP: see if you can re-use _.filter() here, without simply // copying code in and modifying it let result = []; for (let i = 0; i \u0026lt; collection.length; i ++ ) { if (!test(collection[i])) { result.push(collection[i]); } } return result; }; // element가 중복되지 않는 새로운 array를 만드세요. _.uniq = function(array) { // 1. Array new Set // let newArr = array.slice(); // 복제 하고 // let result = new Set(newArr); // obj 로 바뀐다. 바뀌는 이유는? // return [...result]; // } // // return [result] // 실행되지 않는다. 이유는 obj으로 출력되기 때문. // 2 Array.from() return Array.from(new Set(array)); } // 3.reduce() xxx 값은 출력되는데 데스트 통과는 못함 // array.reduce(function(unique, item){ // if (unique.includes(item)){ // return unique; // } else { // return [...unique,item]; // } // },[]); // } // const array = ['0', 1, 2, '0', '0', 3]; // array.reduce((unique, item) =\u0026gt; { // console.log( // // a. Item // item, // // b. Final Array (Accumulator) // unique, // // c. 조건(이 조건이 false여야만 값이 푸시된다 // unique.includes(item), // // d. Reduce Function Result // unique.includes(item) ? unique : [...unique, item], // ); // return unique.includes(item) ? unique : [...unique, item] // }, []); // 초기 Accumulator 는 빈 array 이다 // } // iterator를 각 element에 적용한 결과를 담은 새로운 array를 리턴하세요. _.map = function(collection, iterator) { // map() is a useful primitive iteration function that works a lot // like each(), but in addition to running the operation on all // the members, it also maintains an array of results. // collection.map(iterator(value, key, collection)){ let newArr = []; for (let i = 0; i \u0026lt; collection.length; i ++ ){ newArr.push(iterator(collection[i])); } return newArr; } // 객체의 배열을 가져와서, 그 안에 있는 특정 속성의 값의 배열을 리턴하세요. // 예를 들어, people이라는 객체가 담긴 배열을 가져와서, 그들의 나이만 리턴할 수 있어야 합니다. _.pluck = function(collection, key) { // TIP: map is really handy when you want to transform an array of // values into a new array of values. _.pluck() is solved for you // as an example of this. // return collection.map(function(item){ // return item[key] // }) return _.map(collection, function(item) { return item[key]; }); }; // 각 항목에 대해 iterator(accumulator, item)를 반복적으로 호출하여, Reduces an array to a single value by repetitively calling // 하나의 값으로 줄입니다. accumulator는 누적값으로, 이전 iterator 호출의 반환값이어야 합니다. // // reduce에 대한 세번째 argument로 초기값을 전달 할 수 있습니다. // 만일 초기값이 전달되지 않으면, 첫번재 element가 accumulator로 사용되며, iterator에 전달되지 않습니다. // 즉, 초기값이 전달되지 않은 경우, iterator는 두번째 element로부터 시작합니다. // // 예제: // const numbers = [1,2,3]; // const sum = _.reduce(numbers, function(total, number){ // return total + number; // }, 0); // 6이 리턴됩니다 // // const identity = _.reduce([5], function(total, number){ // return total + number * number; // }); // 5가 리턴됩니다, 전달한 iterator와 관계없이, 첫번째 element가 즉시 사용됩니다. _.reduce = function(collection, iterator, accumulator) { // 1. 내가 생각 방법 let i=0; if (accumulator === undefined) { accumulator = collection[0]; i++; } for(i; i\u0026lt;collection.length; i++) { accumulator = iterator(accumulator, collection[i]); } return accumulator; } // accumulator가 undefined면 : accumulator에게 첫 번째 collection값을 넣고, // 그 후 i++를 통해 collection[0]이 아닌 collection[1]부터 iterator가 돌아감 // // 2. 지훈씨 생각한 방법 // for(let i=0; i\u0026lt;collection.length; i++) { // if (accumulator === undefined) { // accumulator = collection[0]; // } else { // accumulator = iterator(accumulator, collection[i]); // } // } // accumulator가 undefined면 : accumulator에게 첫 번째 collection값을 넣고, // if문에 걸리지 않은 iterator(accumulator, collection[0])은 pass함 // 그 후 정상적으로 collection[1]부터 iterator가 돌아감 // 마지막 // return accumulator; // } // 배열 또는 객체가 주어진 값을 포함하는지 체크합니다. (`===` 연산자를 사용해서 판단합니다.) _.contains = function(collection, target) { for (let i in collection ) { if (collection[i] === target ){ return true } } return false; } // 다른 깔끔한 방법 // each 방법을 써서.. // if (Array.isArray(collection)) { // for (let i = 0; i \u0026lt; collection.length; i ++ ) { // if (collection[i] === target) { // return true; // } else { // return false; // } // } // } else { // for (let prop in collection) { // if (collection[prop] === target) { // return true; // } else { // return false; // } // } // } // 모든 element가 iterator에 의해 truthy한지 체크합니다. _.every = function(collection, iterator) { // function every(collection,iterator) // collection.every(terator(value, key, collection)) ??? if(iterator === undefined) { // 이것을 왜하는지 ? for(let i = 0 ; i \u0026lt; collection.length ; i++) { if(Boolean(collection[i]) === false) { return false; } } } else if (iterator) { // 이것은 왜? for (let j = 0 ; j \u0026lt; collection.length ; j++) { if (Boolean(iterator(collection[j])) === false) { return false; } } } return true; }; // ?? // if(collection.length !== 0){ // if(iterator !== undefined){ // arr = _.map(collection, function(ele){ // return Boolean(iterator(ele)); // }); // arr = _.filter(arr, function(ele){ // return ele === false; // }); // return !(_.contains(arr, false)); // } else { // arr = _.filter(collection, function(ele){ // return ele === false; // }); // return !(_.contains(arr, false)); // } // } else { // return true; // } // }; // element가 하나라도 iterator에 의해 truthy한지 체크합니다. // iterator가 없다면, element 그 자체가 truthy한지 체크하세요. _.some = function(collection, iterator) { if(iterator === undefined) { // 이것을 왜하는지 ? for(let i = 0 ; i \u0026lt; collection.length ; i++) { if(Boolean(collection[i]) === true) { return true; } } } else if (iterator) { // 이것은 왜? for (let j = 0 ; j \u0026lt; collection.length ; j++) { if (Boolean(iterator(collection[j])) === true) { return true; } } } return false; }; /** * OBJECTS * ======= * * 이 섹션에서는, 객체를 서로 합쳐주는 몇개의 도우미 함수를 만들겁니다. */ // 주어진 객체를 전달된 모든 속성으로 확장합니다. // // 예제: // var obj1 = {key1: \u0026quot;something\u0026quot;}; // _.extend(obj1, { // key2: \u0026quot;something new\u0026quot;, // key3: \u0026quot;something else new\u0026quot; // }, { // bla: \u0026quot;even more stuff\u0026quot; // }); // obj1은 이제 다음 키를 포함합니다. key1, key2, key3, bla _.extend = function(obj, ...objs) { //객체를 합쳐주는 함수를 만들어보자 for (let i = 0; i \u0026lt; objs.length; i ++ ) { for (let prop in objs[i] ) { obj[prop] = objs[i][prop]; } } return obj; } // for(let i = 0; i \u0026lt; arguments.length; i++) { // for(let key in arguments[i]) { // obj[key] = arguments[i][key] // } // } return obj; // }; // extend와 비슷하지만, 이번엔 이미 존재하는 key에 대해 값을 덮어쓰기 하지 않습니다. _.defaults = function(obj,...objs) { for (let i = 0; i \u0026lt; objs.length; i ++ ) { for (let prop in objs[i]){ // 만약 기존에있는 obj 의 키값이 새로 더해진 obj 에 없다면 if (!(prop in obj)) { // 기존에 있는 obj 의 push 해준다. obj[prop] = objs[i][prop]; } } } return obj; } /** * FUNCTIONS * ========= * * 이번엔 함수 데코레이터(decorator)를 사용합니다. 함수 데코레이터는 쉽게 말해, 어떤 함수를 받아들이고 * 다소 다르게 작동하는 새로운 버전의 함수를 리턴하는 함수를 의미합니다. */ // 최대 한번만 호출할 수 있는 함수를 리턴합니다. 이후의 호출은 이전에 한번 리턴된 값만을 리턴해야 합니다. // 질문 _.once = function(func) { // ... agrgs 사용한 함수 var alreadyCalled = false; let result; return function(...args) { if (!alreadyCalled) { alreadyCalled = true; result = func(...args); } return result; }; }; // this 와 arguments 와 apply 를 사용한 함수 // let alreadyCalled = false; // let result; // return function() { // if(alreadyCalled) { // return result // } else { // alreadyCalled = true // return result = func.apply(this, arguments); // } // } // }; // 주어진 시간 (밀리초) 동안 함수를 지연한 다음 제공된 argument로 함수를 호출합니다. // // 원래 함수에 대한 argument는 wait parameter 뒤에 전달됩니다. // 예를 들어, 다음을 호출할 경우 // _.delay(someFunction, 500, 'a', 'b'); // someFunction('a', 'b') 은 500ms 이후에 호출됩니다. _.delay = function(func, wait, ...args) { setTimeout(function(){ return func(...args); } ,wait); }; /** * ADVANCED COLLECTION OPERATIONS * ============================== */ // 다차원 배열을 가져와서, 1차원 배열로 변환합니다. // 새 배열에는 다차원 배열의 모든 요소가 포함되어야 합니다\u0008. // // Hint: Array.isArray 를 사용해 배열인지 아닌지를 체크하세요. _.flatten = function(nestedArray, result) { // 재귀를 이용한것 result = []; function flatarr(nestedArray) { for(let i = 0; i \u0026lt; nestedArray.length; i++) { if(!Array.isArray(nestedArray[i])) { result = result.concat(nestedArray[i]) } else { flatarr(nestedArray[i]); } } } flatarr(nestedArray); return result; }; // for 문을이용한 것 _.flatten = function(nestedArray) { //[1, [2], [3, [[[4]]]]] //oneflat([1, [2], [3, [[[4]]]]]) // result = [1, 2, 3, [[[4]]]] // result = [1, 2, 3, 4] let oneflat = function(array) { let resultArr = [] for (let i in array) { if (Array.isArray(array[i])) { resultArr = resultArr.concat(array[i]); } else { resultArr.push(array[i]); } } return resultArr; } let isinArr = function(array) { for (let i in array) { if (Array.isArray(array[i])) { return true; } } return false; } while(isinArr(nestedArray)) { nestedArray = oneflat(nestedArray); } return nestedArray; }; // let arr = []; // let arr2 = []; // if(Array.isArray(nestedArray)) { // arr = nestedArray.join().split(','); // } // for(let i=0; i \u0026lt; arr.length; i++) { // arr2.push(Number(arr[i])); // } // return arr2; // }; // 배열 내용의 순서를 랜덤하게 변경합니다. // // TIP: 이 함수는 immutable해야 합니다. // 통과가 안됨 _.shuffle = function(array) { let newArr = []; let indexArr = []; let randomNum; let randomElement; for(let j = 0; j\u0026lt; array.length; j++) { indexArr.push(j); } let randomNumber = function(){ return Math.floor(Math.random() * (array.length)) } while(indexArr.length \u0026gt; 1) { randomNum = randomNumber(); if (indexArr.includes(randomNum)) { randomElement = array[randomNum]; newArr.push(randomElement); indexArr = _.filter(indexArr, function(el) { return el !== randomNum; }); } } newArr.push(array[indexArr[0]]); return newArr; }; /** * ADVANCED * ================= * * Note: This is the end of the pre-course curriculum. Feel free to continue, * but nothing beyond here is required. */ // Calls the method named by functionOrKey on each value in the list. // Note: You will need to learn a bit about .apply to complete this. _.invoke = function(collection, functionOrKey, args) { }; // Sort the object's values by a criterion produced by an iterator. // If iterator is a string, sort objects by that property with the name // of that string. For example, _.sortBy(people, 'name') should sort // an array of people by their name. _.sortBy = function(collection, iterator) { }; // Zip together two or more arrays with elements of the same index // going together. // // Example: // _.zip(['a','b','c','d'], [1,2,3]) returns [['a',1], ['b',2], ['c',3], ['d',undefined]] _.zip = function() { }; // Takes an arbitrary number of arrays and produces an array that contains // every item shared between all the passed-in arrays. _.intersection = function() { }; // Take the difference between one array and a number of other arrays. // Only the elements present in just the first array will remain. _.difference = function(array) { }; // Memorize an expensive function's results by storing them. You may assume // that the function only takes primitives as arguments. // memoize could be renamed to oncePerUniqueArgumentList; memoize does the // same thing as once, but based on many sets of unique arguments. // // _.memoize should return a function that, when called, will check if it has // already computed the result for the given argument and return that value // instead if possible. _.memoize = function(func) { }; // Returns a function, that, when invoked, will only be triggered at most once // during a given window of time. See the Underbar readme for extra details // on this function. // // Note: This is difficult! It may take a while to implement. _.throttle = function(func, wait) { }; }());  Array 중복 제거하는 방법 const array = ['a' , 1, 2, 'a' , 'a', 3]; // 3가지 방법 from() + set , filter , reduce // 1: 'Set' Array.from(new Set(array)); // 2: 'Filter' array.filter((item, index) =\u0026gt; array.indexOf(item) === index); // 3: 'Reduce' array.reduce((unique, item) =\u0026gt; unique.includes(item) ? unique : [...unique, item], []); // RESULT: // ['a', 1, 2, 3]  string 안에 알파벳 뽑기 str = \u0026quot;Hello6 9World 2, Nic8e D7ay!\u0026quot;; var sum = str.match(/\\d/g).map(Number).reduce(function(a,c){ return a + c; }) str.replace(/[^a-z]/gi, ''); // \u0026quot;HelloWorldNiceDay\u0026quot;  string 안에 숫자뽑기  imutable\n 숫자를 뽑는 역활\n \\d 는 모든 숫자를 각각 배열로 나눠서 출력한다.\n  let str = \u0026quot;123f456f78910\u0026quot;; str.match(/\\d+/g); // [\u0026quot;1\u0026quot;, \u0026quot;2\u0026quot;, \u0026quot;3\u0026quot;, \u0026quot;4\u0026quot;, \u0026quot;5\u0026quot;, \u0026quot;6\u0026quot;, \u0026quot;7\u0026quot;, \u0026quot;8\u0026quot;, \u0026quot;9\u0026quot;, \u0026quot;1\u0026quot;, \u0026quot;0\u0026quot;] ```js * \\d+ 숫자가 나란히 붙어있는 것으로 나뉜다. * `imutable` ```js let str = \u0026quot;123f456f78910\u0026quot;; str.match(/\\d/g); // [\u0026quot;123\u0026quot;, \u0026quot;456\u0026quot;, \u0026quot;789\u0026quot;, \u0026quot;10\u0026quot;]  Extract numbers from a string-Javascript var string = \u0026quot;border-radius:10px 20px 30px 40px\u0026quot;; var numbers = string.match(/\\d+/g).map(Number); console.log(numbers); // [10, 20, 30, 40]  피보나치 수열 이란?  n 번째의 피보나치 수열에 숫자출력하는 fib(n) 함수만들기\n // 0 1 1 2 3 5 8 13 21 34 ...... // 점화식표현은 ==\u0026gt; f(n) = f(n-1) + f(n-2) // 5번째 숫자는? = f(n-1) + f(n-2) // n = 5 // 5-1 = 4 네번째 피보나치 수열에 있는 3은 숫자와 5-2 = 3 세번째 피보나치 에 있는 숫자 2 를 더한값이 된다. function fib(n) { // n = 10 if (n \u0026lt;= 1) { // 만약 n 이 0 과 1 이라면 return n; // 그것을 그냥 바로 출력해라 } else { // 만약 그게 아니라면 return fib(n-2) + fib(n-1); // 피보나치 수열에 8번째수와 + 9번째 수의 합을 리턴한다. 그럼 8번째 있는 수는 21 이고 9번째 있는 수는 34 이기 때문에 더한 값은 55가 된다. } } fib(10) // ==\u0026gt; 55 function fib(n) { if (n === 0 ) { // n 이 0 이면 0을 출력하고 그만 return 0; } if (n === 1 ) { // n 이 1 이면 1을 출력하고 그만 return 1; } return fib(n-1) + fib(n-2) }   20번째 까지 피보나치 수열을 출력하는 fib(n) 함수 만들기\n function fib(n) { if ( n \u0026lt;= 1 ) { return n; } else { return fib(n - 1) + fib(n - 2); } } let tmp = ''; for(let i = 0; i \u0026lt; 20; i++){ // 20번째 까지 tmp += fib(i) + \u0026quot; \u0026quot; }   함수사용해서 피보나치 수열 만들기\n function fibonacci(num){ var a = 1 var b = 0 var temp; for(var i = num; i \u0026gt;= 1; i--){ temp = a; a = a + b; b = temp; if(i === 1) { console.log(b); }\telse { console.log(b); } } }   for 문을 사용해서 피보나치 수열 만들기\n var num = 15; // 몇번째까지 var a = 1, b = 0, temp; document.write(b + \u0026quot;, \u0026quot;); for(var i = num; i \u0026gt;= 1; i--){ temp = a; a = a + b; b = temp; if(i == 1) { document.write(b); } else { document.write(b + \u0026quot;, \u0026quot;); } }  forEach, for of, for in 의 차이  basic for문과 for in은 반복변수에 index를 리턴하지만\nforEach 와 for of 는 해당 값을 리턴하기 때문이죠.\n const array = ['가','나','다','라']; // for for(let i=0; i\u0026lt;array.length; i++){ console.log(array[i]); } // 가 나 다 라 //forEach array.forEach(function(j){ console.log(array[j]); }); // console.log(array[j]) // undefined // console.log(j) // 가 나 다 라 // for of for (let k of array){ console.log(array[k]); } // console.log(array[k]) // undefined // console.log(k) // 가 나 다 라 // for in for (let z in array){ console.log(array[z]); } // 가 나 다 라  Falsy 와 Fruthy 구별 undefined, false, null, 0, NaN, “ 는 false 로 취급(falsy) (NaN : Not a Number) /위에 적힌 데이터가 아닌 모든 데이터는 trye로 취급(truthy)  null 과 undefined 는 등록, 저장 여부이다. null 은 값은 값이지만 값으로써 의미없는 특별한 값이 등록되어 있는 것이고, undefined 는 등록이 되어있지 않기 때문에 초기화도 정의되지도 않은 것입니다.\nundefined 는 미리 선언된 전역변수(전역 객체의 프로퍼티)이며, null 은 선언,등록을 하는 키워드인 것입니다.\n\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;- 4. post from others Rest파라미터와 Spread연산자 or 함수의 가독성을 높이는 방법 Rest 파라미터 (Rest Parameter) Rest 파라미터는 Spread 연산자(...)를 사용하여 함수의 파라미터를 작성한 형태를 말한다. 즉, Rest 파라미터를 사용하면 함수의 파라미터로 오는 값들을 \u0026quot;배열\u0026quot;로 전달받을 수 있다. (Java에서 public static void func(String... strs){...} 이런식의 가변인자와 유사) 사용 방법은 파라미터 앞에 (...)을 붙인다. function foo(...rest) { console.log(Array.isArray(rest)); // true console.log(rest); // [ 1, 2, 3, 4, 5 ] } foo(1, 2, 3, 4, 5); * function foo(param1, param2, ...rest){~~} 처럼 앞에 파라미터는 일반적인 파라미터로 받을 수 있고 그 뒤부터는 Rest 파라미터로 받을 수 있다. - 단, Rest파라미터는 항상 제일 마지막 파라미터로 있어야 한다. 예를들어 function foo(...rest, param1, param2){~}는 사용 불가능하다. arguments VS rest 파라미터 ES5에서도 가변 인자 함수의 경우 arguments 객체를 통해 인자값을 확인할 수 있었다. var foo = function () { console.log(arguments); }; foo(1, 2); // { '0': 1, '1': 2 } 그렇다면 arguments와 rest파라미터의 차이점은 무엇일까? 답부터 말하면 arguments는 유사 배열 객체고 rest는 배열이다. 유사 배열 객체(array-like object)는 간단하게 순회가능한(iterable) 특징이 있고 length 값을 알 수 있는 특징이 있는 것이다. 즉, 배열처럼 사용할 수 있는 객체를 말한다. 무슨 말이냐면 arguments는 유사배열객체이기 때문에 Array 오브젝트의 메서드를 사용할 수 없다. 따라서 ES6에서는 arrow function에 arguments는 사용할 수 없을 뿐더러 Rest 파라미터를 사용하면 더 유연한 코드를 작성할 수 있는 것이기 때문에 Rest 파라미터 사용을 권장한다.  Spread 연산자 (Spread Operator) Spread 연산자는 연산자의 대상 배열 또는 이터러블(iterable)을 \u0026quot;개별\u0026quot; 요소로 분리한다. // 배열 console.log(...[1, 2, 3]); // -\u0026gt; 1, 2, 3 // 문자열 console.log(...'Helllo'); // H e l l l o // Map과 Set console.log(...new Map([['a', '1'], ['b', '2']])); // [ 'a', '1' ] [ 'b', '2' ] console.log(...new Set([1, 2, 3])); // 1 2 3 Colored by Color Scripter 이터러블(iterable)은 Array, String, Map, Set, DOM구조다. iterator를 생성해서 next()로 순회할 수 있는 자료구조가 이터러블이라고 생각하면 된다. * 함수의 파라미터로 사용하는 방법 // ES6 function foo(x, y, z) { console.log(x); // 1 console.log(y); // 2 console.log(z); // 3 } const arr = [1, 2, 3]; foo(...arr);// Array를 받아서 각 매개변수로 전달되었다. Rest와 헷갈리지 않기! Rest는 함수 선언문의 파라미터에 Spread(...)연산자를 이용해서 받으면 가변인자를 받아 배열로 만들어서 사용하는 것이고, 함수 호출문의 파라미터에 Spread(...)연산자를 이용해서 호출하면 배열이 해당 매개변수로 각각 매핑되는 것은 다르다. //Rest function foo(param, ...rest) { console.log(param); // 1 console.log(rest); // [ 2, 3 ] } foo(1, 2, 3); //Spread호출 function bar(x, y, z) { console.log(x); // 1 console.log(y); // 2 console.log(z); // 3 } bar(...[1, 2, 3]); - 또한 Rest에서는 선언에서 Spread연산자를 제일 뒤에만 써야하지만, Spread호출에서는 중간중간 사용해도 상관없다. * 배열에서 사용하는 방법 (가독성UP) //ES5 var arr = [1, 2, 3]; console.log(arr.concat([4, 5, 6])); // [ 1, 2, 3, 4, 5, 6 ] // ES6 const arr = [1, 2, 3]; // ...arr은 [1, 2, 3]을 개별 요소로 분리한다 console.log([...arr, 4, 5, 6]); // [ 1, 2, 3, 4, 5, 6 ] - concat() 대신 가독성이 더 좋아졌다. // ES5 var arr1 = [1, 2, 3]; var arr2 = [4, 5, 6]; // apply 메소드의 2번째 인자는 배열. 이것은 개별 인자로 push 메소드에 전달된다. //Array.prototype.push.apply(arr1, arr2); //arr1.push(arr2); =\u0026gt; [1,2,3,[4,5,6]] console.log(arr1); // [ 1, 2, 3, 4, 5, 6 ] // ES6 const arr1 = [1, 2, 3]; const arr2 = [4, 5, 6]; // ...arr2는 [4, 5, 6]을 개별 요소로 분리한다 arr1.push(...arr2); // == arr1.push(4, 5, 6); console.log(arr1); // [ 1, 2, 3, 4, 5, 6 ] - push를 개별 요소로 전달할 수 있으니 훨씬 간결하고 가독성 또한 좋아졌다. * 객체에서 사용하기 const o1 = { x: 1, y: 2 }; const o2 = { ...o1, z: 3 }; console.log(o2); // { x: 1, y: 2, z: 3 } const target = { x: 1, y: 2 }; const source = { z: 3 }; // Object.assign를 사용하여도 동일한 작업을 할 수 있다. // Object.assign은 타깃 객체를 반환한다 console.log(Object.assign(target, source)); // { x: 1, y: 2, z: 3 }  ","date":1574726400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1574726400,"objectID":"36ab7c139f560ead9f090a8734d92987","permalink":"/tutorial/js-post/","publishdate":"2019-11-26T00:00:00Z","relpermalink":"/tutorial/js-post/","section":"tutorial","summary":"write here:rocket:","tags":["Javascript"],"title":"JS_Study_Notes","type":"docs"},{"authors":null,"categories":[],"content":" BS_image: img-fluid  Description   Create responsive images by adding an .img-fluid class to the \u0026lt;img\u0026gt; tag. The image will then scale nicely to the parent element.\n  Syntax  \u0026lt;img class=\u0026quot;img-fluid\u0026quot; src=\u0026quot;img_chania.jpg\u0026quot; alt=\u0026quot;Chania\u0026quot;\u0026gt;  BS_Spacing: my  Description   Assign responsive-friendly margin or padding values to an element or a subset of its sides with shorthand classes\n  Syntax  \u0026lt;div class=\u0026quot;my\u0026quot;\u0026gt; Centered element \u0026lt;/div\u0026gt;  ","date":1573689600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1573689600,"objectID":"914210d3f15b2a1eb9d2abed41c8a0b4","permalink":"/tutorial/bootstrap/","publishdate":"2019-11-14T00:00:00Z","relpermalink":"/tutorial/bootstrap/","section":"tutorial","summary":"write here:rocket:","tags":["Bootstrap"],"title":"Bootstrap","type":"docs"},{"authors":null,"categories":[],"content":" \u0026lt;style\u0026gt; /*syntax*/ \u0026lt;style\u0026gt; a { color:red } \u0026lt;/style\u0026gt; \u0026lt;dd\u0026gt;a : selector(선택자)\u0026lt;/dd\u0026gt; \u0026lt;dd\u0026gt;{Color:red}; : declaration (선언)\u0026lt;/dd\u0026gt; \u0026lt;dd\u0026gt;{Color} : property (속성)\u0026lt;/dd\u0026gt; \u0026lt;dd\u0026gt;{Color:red} : property value (속성값)\u0026lt;/dd\u0026gt;  hover 버튼 클릭시 마우스 손가락 변형 button.hover { cursor: pointer; }  스크롤 만들기 \u0026lt;!--Vertical scroll bar in div which is a child of css grid column --\u0026gt; \u0026lt;div class=\u0026quot;A\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;B\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;C\u0026quot;\u0026gt;search\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;D\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;E\u0026quot;\u0026gt;1\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;E\u0026quot;\u0026gt;2\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;E\u0026quot;\u0026gt;3\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;E\u0026quot;\u0026gt;4\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;E\u0026quot;\u0026gt;5\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;E\u0026quot;\u0026gt;6\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;E\u0026quot;\u0026gt;7\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;E\u0026quot;\u0026gt;8\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;E\u0026quot;\u0026gt;9\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;E\u0026quot;\u0026gt;10\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;E\u0026quot;\u0026gt;11\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;E\u0026quot;\u0026gt;12\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;E\u0026quot;\u0026gt;10\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;E\u0026quot;\u0026gt;11\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;E\u0026quot;\u0026gt;12\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;E\u0026quot;\u0026gt;10\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;E\u0026quot;\u0026gt;11\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;E\u0026quot;\u0026gt;12\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;  // 먼제 부모 tag 에 grid 명령과 max-hight 을 준다. .A { max-height: 300px; /* matters */ display: grid; /* matters */ overflow: hidden; /* matters */ }  html, body, .A { height: 100%; /* matters */ width: 100%; margin: 0; padding: 0; } .A { max-height: 300px; /* matters */ display: grid; /* matters */ overflow: hidden; /* matters */ } .B { display: grid; /* matters */ overflow-y: auto; /* matters */ } .D { overflow-y: scroll; /* matters */ } .C { padding: 10px; background-color: #07f; } .E { padding: 10px; background-color: #eee; }  BoxModel { font-size:20px; text-align:center; text-decoration:none; : 밑줄없애기 text-decoration:underline; : 언더라인 만들어라 Border-bottom:red 20px solid; Border-right: lightblue 20px solid; Border-right:none; (오른쪽에 있는 선 없애기) Margin:20px; 가장자리 Padding:20px; width:20px; : 폭 Display:none; Display:block; : 전체화면을 이용해라 (block level element) Display:inline; : 부분화면을 이용해라 (inline element) }  wrapper /* Most basic example */ #wrapper { width: 500px; margin: 0 auto; }  \u0026lt;body\u0026gt; \u0026lt;div id=\u0026quot;wrapper\u0026quot;\u0026gt; Piece of text inside a 500px width div centered on the page \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;!-- * How the principle works Create your wrapper and assign it a certain width. Then apply an automatic horizontal margin to it by using `margin: 0 auto;` or `margin-left: auto;` `margin-right: auto;.` The automatic margins make sure your element is centered. --\u0026gt;  media queries /* @media(max-width:800px) : screen width \u0026lt; 800px 스크린이 800px 보다 작을때 명령을 내린다. @media(min-width:800px) : screen width \u0026gt; 800px스크린이 800px 보다 클때 명령을 내린다. */ @media(max-width:800px) { p { font-size: 1px font-weight font-height Display:block; } }  Grid \u0026lt;div class = \u0026quot;container\u0026quot;\u0026gt; \u0026lt;div calss = \u0026quot;child1\u0026quot;\u0026gt;1\u0026lt;/div\u0026gt; \u0026lt;div calss = \u0026quot;child2\u0026quot;\u0026gt;2\u0026lt;/div\u0026gt; \u0026lt;div calss = \u0026quot;child3\u0026quot;\u0026gt;3\u0026lt;/div\u0026gt; \u0026lt;div calss = \u0026quot;child4\u0026quot;\u0026gt;4\u0026lt;/div\u0026gt; \u0026lt;div calss = \u0026quot;child5\u0026quot;\u0026gt;5\u0026lt;/div\u0026gt; \u0026lt;div calss = \u0026quot;child6\u0026quot;\u0026gt;6\u0026lt;/div\u0026gt; \u0026lt;div calss = \u0026quot;child7\u0026quot;\u0026gt;7\u0026lt;/div\u0026gt; \u0026lt;div calss = \u0026quot;child8\u0026quot;\u0026gt;8\u0026lt;/div\u0026gt; \u0026lt;div calss = \u0026quot;child9\u0026quot;\u0026gt;9\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;   HTML  .container { display: grid; // 처음 시작을 지정해준다. grid-template-columns: 40% 60%; // 위에 있는 그림이 4대 6으로 나뉜다. grid-template-columns: 4fr 6fr; // 4대 6으로 나뉜다. grid-gap:1rem; // 사이마다 공간을 줄때 4fr 6fr 로 쓰는것을 권장한다. % 로 사용하면 여백이 뒤에 생기기 때문.. grid-template-columns: repeat(3, 1fr); // 이것은 1fr 이 세번 반복 grid-template-columns: 1fr 1fr 1fr; // 이것과 동일하다. grid-template-columns: 200px 1fr; // 200 픽셀로 왼쪽 것을 고정하고 오른쪽 것을 늘리는 것이다. grid-auto-rows: 200px; // 200 픽셀 씩 모두 통일 grid-auto-rows: minmax(200px,auto); // 이것은 동일한데 content 늘어나면 같이 같이 늘어난다. }   Css  // 1번칸 늘리기 .child1 { grid-column: 1/4 // 열에서 1부터 4까지 차지한다. }  // 4번칸 밑으로 늘리기 gird-column:3; // 3번 열부터 시작해라 gird-row :2/4; // 2번부터 4버까지 차지하라  // 9번칸을 4번안에 집어넣는다. gird-colum:3; gird-row:3/5;  ","date":1573689600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1573689600,"objectID":"add446d9fc63dc1d3f5d5222082d41c9","permalink":"/tutorial/css/","publishdate":"2019-11-14T00:00:00Z","relpermalink":"/tutorial/css/","section":"tutorial","summary":"write here:rocket:","tags":["Css"],"title":"Css","type":"docs"},{"authors":null,"categories":[],"content":" Question longestWord  Using the JavaScript language, have the function LongestWord take the sen parameter being passed and return the largest word in the string. (문장이 주어졌을때, \u0026lsquo;LongestWord\u0026rsquo; 함수는 주어진 문장에서 가장 긴 단어를 반환합니다.)\nIf there are two or more words that are the same length, return the first word from the string with that length. Assume sen will not be empty. (만약 가장 긴 단어가 두개 이상이라면, 첫번째로 등장하는 가장 긴 단어를 반환하세요. 문장은 빈 문자열이 아닙니다.)\n My_Soultion // It's used by sort() function longestWord(string) { // 1. 주어진 문장을 배열로 만들기(split) let tmp = string.split(' '); //let sorted_tmp =[]; // ['I','love','codestates']; // 2. sort() 사용 =\u0026gt; 성능 떨어짐 let x = function(a,b){ return b.length-a.length; }; // 3. 0번째 요소 출력 return tmp.sort(x)[0]; } //////////////////////////////////////////////////////// // It's used by reudce(1) function longestWord(string) { let tmp = string.split(' '); let max = tmp[0]; for(let i =1;i\u0026lt;tmp.length;i++){ if(tmp[i].length\u0026gt;max.length){ max = tmp[i]; } } return max; } ///////////////////////////////////////////////////////// // It's used by reudce(2) 화살표 function longestWord(string) { return string.split(' ').reduce((acc,cur)=\u0026gt; acc.length\u0026lt;cur.length? cur:acc); }  Question firstCharacter  In this exercise, a string is passed to a method and a new string has to be returned with the first character of each word in the string (문자열이 주어졌을때, \u0026ldquo;firstCharacter\u0026rdquo; 함수는 문자열의 각 단어 첫글자들로 이루어진 문자열을 반환하여야 합니다.)\n My_Soultion function firstCharacter (string) { // Your code here // 1. for문 이용 let output = []; let temp_arr = []; // 1. split으로 단어로 나눠서 배열 만들기 temp_arr = string.split(' '); // 2. 각 인덱스의 첫번째 문자를 배열 output 에 담기 for(let i=0;i\u0026lt;temp_arr.length;i++){ output.push(temp_arr[i][0]); } // 4. 출력 return output.join(''); //////////////////////////////////////////////////////////////////////// // 2. Reduce 이용 return string.split(' ').reduce(function(acc,cur){ return acc+cur[0]; },''); // 3. Reduce이용 2 return string.split(' ').reduce( (acc,cur)=\u0026gt;acc+cur[0] ,''); }  Question isOldEnoughToDrink  어떤 숫자, 이 경우에는 연령이 하나 주어졌을 때, isOldEnoughToDrink 함수는 주어진 연령의 사람이 미국에서 합법적으로 술을 마실 수 있는지의 여부를 반환해야 합니다.\n My_Soultion function isOldEnoughToDrink(age) { // 여기에 코드를 작성하세요 if (age \u0026lt; 21 ) { return false; } else { return true; } }  Question checkAge  이름과 나이를 파라미터로 받는 checkAge라는 함수는 두개 중 하나의 메시지를 리턴합니다.\n만일 21살보다 적으면, Go home, {전달받은_이름}! 만일 21살이거나 더 나이가 많으면, Welcome, {전달받은_이름}! 을 리턴하세요. 쉼표와 공백, 느낌표까지 정확히 리턴해야 합니다.\n My_Soultion  function checkAge(name, age) { // 여기에 코드를 작성하세요 if (age \u0026gt;= 21){ return 'Welcome, ' + name+ '!'; } else { return 'Go home, ' + name+ '!'; } };  Question equalsTen  Write a function called \u0026ldquo;equalsTen\u0026rdquo;. (\u0026ldquo;equalsTen\u0026rdquo; 함수를 작성하세요.)\nGiven a number, \u0026ldquo;equalsTen\u0026rdquo; returns whether or not the given number is 10. (\u0026ldquo;숫자가 주어졌을때, \u0026ldquo;equalsTen\u0026rdquo; 함수는 숫자가 10과 같은지 반환합니다.)\n My_Soultion function equalsTen(num) { // 여기에 코드를 작성하세요 if ( num !== 10){ return false; }else if (num === 10 ){ return true; } } equalsTen(10);  Question isGreaterThan  Write a function called \u0026ldquo;isGreaterThan\u0026rdquo;. (\u0026ldquo;isGreaterThan\u0026rdquo; 함수를 작성하세요.)\nGiven 2 numbers, \u0026ldquo;isGreaterThan\u0026rdquo; returns whether num2 is greater than num1. (두 숫자가 주어졌을때, \u0026ldquo;isGreaterThan\u0026rdquo; 함수는 두번째 숫자(num2)가 첫번째 숫자(num1)보다 큰지 반환해야 합니다.)\n My_Soultion  function isGreaterThan(num1, num2) { // 여기에 코드를 작성하세요 if ( num1 === num2 ){ return false; } else if ( num1 \u0026lt; num2) { return true; } else { return false; } } isGreaterThan(20,30)  Question isEven  Write a function called \u0026ldquo;isEven\u0026rdquo;. (\u0026ldquo;isEven\u0026rdquo; 함수를 작성하세요.)\nGiven a number, \u0026ldquo;isEven\u0026rdquo; returns whether it is even. (\u0026ldquo;숫자가 주어졌을때, \u0026ldquo;isEven\u0026rdquo; 함수는 주어진 숫자가 짝수인지 반환합니다.)\n My_Soultion function isEven(num) { // 여기에 코드를 작성하세요 if ( num % 2 === 0 ) { return true; } else { return false; } } isEven(21)  Question isEvenAndGreaterThanTen  Write a function called \u0026ldquo;isEvenAndGreaterThanTen\u0026rdquo;. (\u0026ldquo;isEvenAndGreaterThanTen\u0026rdquo; 함수를 작성하세요.)\nGiven a number, \u0026ldquo;isEvenAndGreaterThanTen\u0026rdquo; returns whether it is both even and greater than 10. (숫자가 주어졌을때, \u0026ldquo;isEvenAndGreaterThanTen\u0026rdquo; 함수는 주어진 숫자가 10보다 크고 짝수인지 반환해야 합니다.)\n My_Soultion function isEvenAndGreaterThanTen(num) { // 여기에 코드를 작성하세요 if ( num % 2 === 0 \u0026amp;\u0026amp; num \u0026gt; 10 ){ return true; } else { return false; } } isEvenAndGreaterThanTen(13);  Question convertScoreToGrade  Write a function called \u0026ldquo;convertScoreToGrade\u0026rdquo;. (\u0026ldquo;convertScoreToGrade\u0026rdquo; 함수를 작성하세요.)\nGiven a score, \u0026ldquo;convertScoreToGrade\u0026rdquo; returns a string representing the letter grade corresponding to the given score. (점수가 주어졌을때, \u0026ldquo;convertScoreToGrade\u0026rdquo; 함수는 주어진 점수와 대응하는 등급을 문자열로 반환합니다.)\n My_Soultion function convertScoreToGrade(score) { // 여기에 코드를 작성하세요 if ( score \u0026gt; 100 || score \u0026lt; 0) { return \u0026quot;INVALID SCORE\u0026quot;; } else if ( score \u0026gt;= 90 ) { return \u0026quot;A\u0026quot;; } else if ( score \u0026gt;= 80 ) { return \u0026quot;B\u0026quot;; } else if ( score \u0026gt;= 70 ) { return \u0026quot;C\u0026quot;; } else if ( score \u0026gt;= 60 ) { return \u0026quot;D\u0026quot;; } else { return 'F'; } } convertScoreToGrade(0);  Question Or  Write a function called \u0026ldquo;or\u0026rdquo;. (\u0026ldquo;or\u0026rdquo; 함수를 작성하세요.)\nGiven 2 boolean expressions, \u0026ldquo;or\u0026rdquo; returns true or false, corresponding to the || operator. (boolean 두개가 주어졌을때, \u0026ldquo;or\u0026rdquo; 함수는 || 연산자에 대응하는 true 나 false 를 반환합니다.)\n My_Soultion function or(expression1, expression2) { // 여기에 코드를 작성하세요 if ( expression1 !== false ) { return true; } else if ( expression2 !== false ) { return true; } else { return false; } }  Question isEitherEvenAndLessThan9  Write a function called \u0026ldquo;isEitherEvenAndLessThan9\u0026rdquo;. (\u0026ldquo;isEitherEvenAndLessThan9\u0026rdquo; 함수를 작성하세요.)\nGiven two numbers, \u0026lsquo;isEitherEvenAndLessThan9\u0026rsquo; returns whether at least one of them is even, and, both of them are less than 9. (숫자 두개가 주어졌을때, \u0026lsquo;isEitherEvenAndLessThan9\u0026rsquo; 함수는 2가지 조건을 검사합니다. 우선 두 숫자 중 적어도 하나가 짝수인지, 그리고 두 숫자 모두 9보다 작은지를 확인합니다. 두 조건을 모두 만족 했을 때만 true를 반환합니다.)\n My_Soultion  function isEitherEvenAndLessThan9(num1, num2) { if ((num1 % 2 === 0 || num2 % 2 === 0) \u0026amp;\u0026amp; (num1 \u0026lt; 9 \u0026amp;\u0026amp; num2 \u0026lt; 9)) { return true; } else { return false; } }  Question : getFullName  Write a function called \u0026ldquo;getFullName\u0026rdquo;. (\u0026ldquo;getFullName\u0026rdquo; 함수를 작성하세요.)\nGiven a first and a last name, \u0026ldquo;getFullName\u0026rdquo; returns a single string with the given first and last names separated by a single space. (이름과 성이 주어졌을때, \u0026ldquo;getFullName\u0026rdquo; 함수는 이름과 성이 띄어쓰기 하나를 사이에 둔 단일 문자열을 반환해야 합니다.)\n My_Soultion  function getFullName(firstName, lastName) { // 여기에 코드를 작성하세요 let output = firstName + lastName; return firstName + \u0026quot; \u0026quot; + lastName; } getFullName('john','jung')  Question getLengthOfWord  Write a function called \u0026ldquo;getLengthOfWord\u0026rdquo;. (\u0026ldquo;getLengthOfWord\u0026rdquo; 함수를 작성하세요.)\nGiven a word, \u0026ldquo;getLengthOfWord\u0026rdquo; returns the length of the given word. (단어가 주어졌을때, \u0026ldquo;getLengthOfWord\u0026rdquo; 함수는 단어의 길이를 반환해야 합니다.)\n My_Soultion  function getLengthOfWord(word) { // 여기에 코드를 작성하세요 let count = word.length; return count; } getLengthOfWord(\u0026quot;hello\u0026quot;)  Question computeAverageLengthOfWords  Write a function called \u0026ldquo;computeAverageLengthOfWords\u0026rdquo;. (\u0026ldquo;computeAverageLengthOfWords\u0026rdquo; 함수를 작성하세요.)\nGiven two words, \u0026ldquo;computeAverageLengthOfWords\u0026rdquo; returns the average of their lengths. (두 단어가 주어졌을때, \u0026ldquo;computeAverageLengthOfWords\u0026rdquo; 함수는 두 단어 길이의 평균값을 반환합니다.)\n My_Soultion function computeAverageLengthOfWords(word1, word2) { // your code here // count var firstNum = word1.length; var sceondNum = word2.length; var ret = (firstNum + sceondNum) / 2; return ret; } computeAverageLengthOfWords(\u0026quot;whatIYouDoing?\u0026quot;,\u0026quot;this is JJ\u0026quot;)  Question isOddLength  Write a function called \u0026ldquo;isOddLength\u0026rdquo;. (\u0026ldquo;isOddLength\u0026rdquo; 함수를 작성하세요.)\nGiven a word, \u0026ldquo;isOddLength\u0026rdquo; returns whether the length of the given word is odd. (단어가 주어졌을때, \u0026ldquo;isOddLength\u0026rdquo; 함수는 주어진 단어의 길이가 홀수인지 반환해야 합니다.)\n My_Soultion function isOddLength(word) { // your code here let countNum = word.length; if ( countNum % 2 !== 0) { return true; } else { return false; } } isOddLength(\u0026quot;heeeee\u0026quot;)  Question isEvenLength  Write a function called \u0026ldquo;isEvenLength\u0026rdquo;. (\u0026ldquo;isEvenLength\u0026rdquo; 함수를 작성하세요.)\nGiven a word, \u0026ldquo;isEvenLength\u0026rdquo; returns whether the length of the word is even. (단어가 주어졌을때, \u0026ldquo;isEvenLength\u0026rdquo; 함수는 주어진 단어의 길이가 짝수인지 반환해야 합니다.)\n My_Soultion  function isEvenLength(word) { // your code here var countNum = word.length; if ( countNum % 2 === 0 ) { return true; } else { return false; } } isEvenLength(\u0026quot;hee\u0026quot;)  Question repeatString  Write a function called \u0026ldquo;repeatString\u0026rdquo;. (\u0026ldquo;repeatString\u0026rdquo; 함수를 작성하세요.)\nGiven a string and a number, \u0026ldquo;repeatString\u0026rdquo; returns the given string repeated the given number of times. (문자열과 숫자가 주어졌을때, \u0026ldquo;repeatString\u0026rdquo; 함수는 주어진 문자열을 주어진 숫자만큼 반복하여 반환해야 합니다.)\n My_Soultion  function repeatString(string, num) { // your code here var repeatation = string.repeat(num) return repeatation; } repeatString(\u0026quot;thewordofGod is the way\u0026quot;,50)  Question findShortestOfThreeWords  Write a function called \u0026ldquo;findShortestOfThreeWords\u0026rdquo;. (\u0026ldquo;findShortestOfThreeWords\u0026rdquo; 함수를 작성하세요.)\nGiven 3 strings, \u0026ldquo;findShortestOfThreeWords\u0026rdquo; returns the shortest of the given strings. (문자열 3개가 주어졌을때, \u0026ldquo;findShortestOfThreeWords\u0026rdquo; 함수는 주어진 문자열 중 가장 짧은 문자열을 반환해야 합니다.)\nIf there are ties, it should return the first word in the parameters list. (만약 동률이 있다면, 그 중 앞에 있는 문자열을 반환해야 합니다.)\n My_Soultion function findShortestOfThreeWords(word1, word2, word3) { // your code here if ( word1.length \u0026lt; word2.length \u0026amp;\u0026amp; word3.length ) { return word1; } else if (word1.length === word2.length \u0026amp;\u0026amp; word3.length){ return word1; } else if ( word2.length \u0026lt; word1.length \u0026amp;\u0026amp; word3.length ){ return word2; } else if ( word3.length \u0026lt; word2.length \u0026amp;\u0026amp; word1.length ) { return word3; } } findShortestOfThreeWords(\u0026quot;111\u0026quot;,\u0026quot;222\u0026quot;,\u0026quot;333333333\u0026quot;)  Question countCharacter  Write a function called \u0026ldquo;countCharacter\u0026rdquo;. (\u0026ldquo;countCharacter\u0026rdquo; 함수를 작성하세요.)\nGiven a string input and a character, \u0026ldquo;countCharacter\u0026rdquo; returns the number of occurences of a given character in the given string. (문자열과 문자가 주어졌을때, \u0026ldquo;countCharacter\u0026rdquo; 함수는 주어진 문자열에서 주어진 문자가 몇개가 있는지를 반환해야 합니다.)\n My_Soultion function countCharacter(str, char) { // your code here let countRet = 0; for ( let i = 0; i \u0026lt; str.length; i = i + 1 ) { if ( str.charAt(i) === char ) { countRet = countRet + 1 ; } } return countRet; } countCharacter(\u0026quot;hello\u0026quot;, \u0026quot;l\u0026quot; );  Question areValidCredentials  Write a function called \u0026ldquo;areValidCredentials\u0026rdquo;. (\u0026ldquo;areValidCredentials\u0026rdquo; 함수를 작성하세요.)\nGiven a name and a password, \u0026ldquo;areValidCredentials\u0026rdquo;, returns true if the name is longer than 3 characters, AND, the password is at least 8 characters long. Otherwise it returns false. (이름과 비밀번호가 주어졌을때, \u0026ldquo;areValidCredentials\u0026rdquo; 함수는 이름이 3글자이상 그리고 비밀번호가 8글자 이상이면 true를 반환합니다.)\n My_Soultion  ex1  function findMinLengthOfThreeWords(word1, word2, word3) { // your code here if (word1.length === (word2.length \u0026amp;\u0026amp; word3.length)){ return word1.length } else if (word1.length \u0026lt; (word2.length \u0026amp;\u0026amp; word3.length)){ return word1.length; } else if (word2.length \u0026lt; (word1.length \u0026amp;\u0026amp; word3.length) ){ return word2.length; } else if (word3.length \u0026lt; (word1.length \u0026amp;\u0026amp; word2.length) ){ return word3.length; } } findMinLengthOfThreeWords(\u0026quot;111\u0026quot;,\u0026quot;2222\u0026quot;,\u0026quot;33333\u0026quot;)   ex2  function findMinLengthOfThreeWords(word1, word2, word3) { var arr = []; arr.push(word1, word2, word3); arr.sort(); return arr[0].length; } findMinLengthOfThreeWords(\u0026quot;dwdsdsdsdsdsdsdwd\u0026quot;,\u0026quot;ddwwd\u0026quot;,\u0026quot;wdwdwdsdsdwdwwd\u0026quot;)   ex3  function findMinLengthOfThreeWords(word1, word2, word3) { // your code here /* START SOLUTION */ words = [word1, word2, word3]; return words.sort()[0].length; /* END SOLUTION */ }   ex4  function findMinLengthOfThreeWords(word1, word2, word3) { return Math.min(word1.length, word2.length, word3.length) }  Question computeAreaOfATriangle  Given the base and height of a triangle, \u0026ldquo;computeAreaOfATriangle\u0026rdquo; returns its area. (삼각형의 밑변과 높이가 주어졌을때, \u0026ldquo;computeAreaOfATriangle\u0026rdquo; 함수는 삼각형의 넓이를 반환합니다.)\n My_Soultion function computeAreaOfATriangle(base, height) { // your code here let ret = base * height / 2; return ret; }  Question computePerimeterOfACircle  Write a function called \u0026ldquo;computePerimeterOfACircle\u0026rdquo;. (\u0026ldquo;computePerimeterOfACircle\u0026rdquo; 함수를 작성하세요.)\nGiven the radius of a circle, \u0026ldquo;computePerimeterOfACircle\u0026rdquo; returns its perimeter. (원의 반지름이 주어졌을때, \u0026ldquo;computePerimeterOfACircle\u0026rdquo; 함수는 원의 둘레를 반환하세요.\n My_Soultion  function computePerimeterOfACircle(radius) { // your code here\\ //원의 둘레 = 2 X 반지름 X 원주율 = 지름 X 원주율 let ret = radius * 2 * Math.PI; return ret; } computePerimeterOfACircle(200);  Question computeAverageOfNumbers  Write a function called \u0026ldquo;computeAverageOfNumbers\u0026rdquo;. (\u0026ldquo;computeAverageOfNumbers\u0026rdquo; 함수를 작성하세요.)\nGiven an array of numbers, \u0026ldquo;computeAverageOfNumbers\u0026rdquo; returns their average. (숫자이 배열이 주어졌을때, \u0026ldquo;computeAverageOfNumbers\u0026rdquo; 함수는 그들의 평균을 반환합니다.)\n My_Soultion function computeAverageOfNumbers(nums) { // your code here let sum = 0; if ( nums.length === 0 ) { return 0; } for (let i = 0; i \u0026lt; nums.length; i = i + 1 ){ sum = sum + nums[i] } return sum / nums.length; } computeAverageOfNumbers[1,2,3,4,5,6];  Question convertToString  convertToString함수가 있습니다. 이 함수는 주어진 파라미터를 문자열의 형태로 변환합니다.\n My_Soultion function convertToString(anything) { // 여기에 코드를 작성하세요 return anything.toString(); // return \u0026quot;\u0026quot; + anything; // return String(anything); } convertToString('hello')  Question convertToNumber  convertToNumber함수가 있습니다. 이 함수는 주어진 파라미터를 숫자의 형태로 변환합니다.\n숫자로 변환할 수 없는 경우, NaN (Not a number) 이라는 결과가 나올것입니다. NaN은 숫자가 아님을 나타내는 특수한 값으로, 문자열이 아닙니다.\n My_Soution function convertToNumber(anything) { anything = Number(anything); if(!anything){ return NaN; }else{ return anything; } } convertToNumber('hello')  Question isFalsy  isFalsy함수가 있습니다. falsy 값은, 거짓으로 취급되는 값을 의미합니다. 이 함수는 주어진 파라미터가 falsy값인지 아닌지를 평가합니다.\n My_Soultion function isFalsy(anything) { // 여기에 코드를 작성하세요 if ( typeof anything === 'undefined' ) { return true; } else if (!anything) { return true; } else if ( anything === null ) { return true; } else if ( anything === 0 ) { return true; } else if (anything === NaN ) { return true; } else if ( anything === '' ) { return true; } else { return false; } } isFalsy('hello');  Question getType  getType함수가 있습니다. 이 함수는 주어진 파라미터의 타입을 리턴합니다.\nNote: 배열을 넘길 경우, \u0026lsquo;object\u0026rsquo;라고 나올 수 있습니다. 배열과 객체는 어떻게 구분할 수 있을까요? 배열과 객체를 구분하려면 Array.isArray 메소드를 사용하면 됩니다.\n My_Soultion  function getType(anything) { // 여기에 코드를 작성하세요 // if 문을 사용해서 문자,숫자, boolean , arry, object 을 구분하는 것을 사용한다. if (Array.isArray(anything) === true ) { return 'array' } else return typeof anything; } getType([1,2,3,4])  Question getProperty  파라미터로 객체와 키를 받는 getProperty함수가 있습니다. 이 함수는 주어진 객체와 키를 이용하여 속성값을 찾아 리턴합니다. 만일 주어진 키가 객체의 속성에 없다면, undefined를 리턴하면 됩니다.\n My_Soultion  function getProperty(obj, propertyName) { return obj[propertyName]; } let person = { name: 'Steve', age: 16 }; getProperty(person,\u0026quot;name\u0026quot;);  Question addProperty  파라미터로 객체와 키를 받는 addProperty 함수가 있습니다. 이 함수는 주어진 객체에, 키 이름으로 속성을 만들고 값을 true로 설정합니다.\n My_Soultion function addProperty(obj, propertyName) { // 여기에 코드를 작성하세요 return obj[propertyName] = true; // return obj.propertyNmae = true; \u0026lt;\u0026lt;\u0026lt;is not working at all } let john = {}; addProperty(john,'isprogrammer'); // Questoin /* obj[propertyName]를 이용했을 때는 테스트가 통과가 되고, obj.propertyName를 이용했을 때는 통과가 되지 않습니다. 객체에 프로퍼티를 추가할 때 dot노테이션을 사용할 수 있는 걸로 알고있는데..이유가 뭘까요? answer 으로 했을때는 바로 객체의 키로 접근하고 [ ] 으로 하면 변수로 접근합니다. addProperty(steve, 'isProgrammer'); 이라는 함수 호출 구문이 있다고 가정하면 obj[propertyName] = true; 는 steve.isProgrammer = true; 이고 obj.propertyName = true; 는 steve.propertyName = true; 입니다. 완전히 다른값이 나오죠? */  Question addObjectProperty  파라미터로 두 개의 객체와 키를 받는 addObjectProperty 함수가 있습니다. 이 함수는 주어진 첫번째 객체에, 키 이름으로 속성을 만드는데, 그 값은 두번째 객체로 설정합니다. 객체의 키 값은 또다른 객체가 될 수 있음을 기억하세요.\n My_Soultion function addObjectProperty(obj1, propertyName, obj2) { // 여기에 코드를 작성합니다. obj1[propertyName] = obj2; return obj1; } let person1 = { name: 'Joe', role: 'Team Member' }; let person2 = { name: 'Steve', role: 'CEO' }; addObjectProperty(person1, 'manager', person2);  Question removeProperty  Write a function called \u0026ldquo;removeProperty\u0026rdquo;. (\u0026ldquo;removeProperty\u0026rdquo; 함수를 작성하세요.)\nGiven an object and a key, \u0026ldquo;removeProperty\u0026rdquo; removes the given key from the given object. (객체와 키가 주어졌을때, \u0026ldquo;removeProperty\u0026rdquo; 함수는 주어진 키에 해당하는 객체의 속성값을 제거해야 합니다.)\n My_Soultion function removeProperty(obj, propertyName) { // 여기에 코드를 작성하세요 delete obj[propertyName]; }  Question isPersonOldEnoughToVote  Write a function called \u0026ldquo;isPersonOldEnoughToVote\u0026rdquo;. (\u0026ldquo;isPersonOldEnoughToVote\u0026rdquo; 함수를 작성하세요.)\nGiven a \u0026ldquo;person\u0026rdquo; object, that contains an \u0026ldquo;age\u0026rdquo; property, \u0026ldquo;isPersonOldEnoughToVote\u0026rdquo; returns whether the given person is old enough to vote. (\u0026ldquo;age\u0026rdquo; 속성을 가지고 있는 \u0026ldquo;person\u0026rdquo; 객체가 주어졌을때, \u0026ldquo;isPersonOldEnoughToVote\u0026rdquo; 함수는 그 사람이 미국에서 합법적으로 투표를 할 수 있는 나이인지를 반환해야 합니다.)\n function isPersonOldEnoughToVote(person) { // your code here // 1. if 사용해서 18세 이상일 경우 리턴 참 // 2. 아닐경우 거짓 if ( person.age \u0026gt;= 18 ) { return true; } else { return false; } }  Question removeNumbersLargerThan  Write a function called \u0026ldquo;removeNumbersLargerThan\u0026rdquo;. (\u0026ldquo;removeNumbersLargerThan\u0026rdquo; 함수를 작성하세요.)\nGiven a number and an object, \u0026ldquo;removeNumbersLargerThan\u0026rdquo; removes any properties whose values are numbers greater than the given number. (숫자와 객체가 주어졌을때, \u0026ldquo;removeNumbersLargerThan\u0026rdquo; 함수는 주어진 객체에서 주어진 숫자보다 큰 모든 숫자 속성을 제거합니다.)\n My_Soultion let obj = { a: 8, b: 2, c: 'montana', d: 10, e: 4, f: 5 } function removeNumbersLargerThan(num, obj) { // your code here for (let key in obj){ if ( obj[key] \u0026gt; num ) { delete obj[key]; } } return obj; } removeNumbersLargerThan(3,obj)  Question removeOddValues  Write a function called \u0026ldquo;removeOddValues\u0026rdquo;. (\u0026ldquo;removeOddValues\u0026rdquo; 함수를 작성하세요.)\nGiven an object, \u0026ldquo;removeOddValues\u0026rdquo; removes any properties whose values are odd numbers. (객체가 주어졌을때, \u0026ldquo;removeOddValues\u0026rdquo; 함수는 주어진 객체의 속성값이 홀수인 속성을 모두 제거합니다.)\n My_Soultion let obj = { a: 2, b: 3, c: 4, d: 7 }; function removeOddValues(obj) { // your code here // 1. value 을 불러온다 // 2. value 홀수 있지 짝수 인지 구분한다. // 3. value 가 홀수 일때 삭제한다. for ( let key in obj ) { if ( obj[key] % 2 === 1 ) { delete obj[key]; } } return obj; } removeOddValues(obj)  Question countNumberOfKeys  Write a function called \u0026ldquo;countNumberOfKeys\u0026rdquo;. (\u0026ldquo;countNumberOfKeus\u0026rdquo; 함수를 작성하세요.)\nGiven an object, \u0026ldquo;countNumberOfKeys\u0026rdquo; returns how many properties the given object has. (객체가 주어졌을때, \u0026ldquo;countNumberOfKeys\u0026rdquo; 함수는 객체안에 있는 속성들의 갯수를 반환합니다.)\n My_Soultion function countNumberOfKeys(obj) { // 여기에 코드를 작성하세요 // 1.숫자출력할 변수를 0으로 초기화한다. // 2.for 문을 이용해 객체를 나열한다. // 3. 나열한 객체를 변수안에 넣는다. let count = 0; for ( let key in obj ) { count = count + 1 ; } return count; } let obj = { a: 1, b: 2, c: 3, d: 4 }; countNumberOfKeys(obj) // * Model Solutions function countNumberOfKeys(obj) { return Object.keys(obj).length; }  Question printObject  객체를 파라미터로 받는 printObject 함수는 객체 안에 정의된 키와 값 쌍을 조합한 문자열을 리턴합니다. 문자열은 한 줄에 하나의 키/값 쌍을 콜론(:) 및 공백문자와 함께 표시하며, 또다른 키/값 쌍 사이에는 줄바꿈 문자가 포함되어 있습니다.\n My_Soultion  let obj = { name: 'Steve', age: 13, sex: 'Male' }; function printObject(obj) { let ret = \u0026quot;\u0026quot; for ( let key in obj ) { ret = ret + key +\u0026quot;: \u0026quot; + obj[key]+ \u0026quot;\\n\u0026quot;; } return ret; }; printObject(obj);  Question extends  Write a function called \u0026ldquo;extend\u0026rdquo;. (\u0026ldquo;extend\u0026rdquo; 함수를 작성하세요.)\nGiven two objects, \u0026ldquo;extend\u0026rdquo; adds properties from the 2nd object to the 1st object. (객체 두개가 주어졌을때, \u0026ldquo;extend\u0026rdquo; 함수는 두번째 객체의 속성을 첫번째 객체에 추가해야 합니다.)\nAdd any keys that are not in the 1st object. (첫번째 객체에 없는 모든 키를 추가하세요.)\nIf the 1st object already has a given key, ignore it (do not overwrite the property value). (만약 첫번째 객체에 이미 있는 키라면, 값을 덮어쓰지 말고 무시하세요.)\nDo not modify the 2nd object at all. (두번째 객체는 수정하지 마세요.)\n My_Soultion et obj1 = { a: 1, b: 2 }; let obj2 = { b: 4, c: 3 }; function extend(obj1, obj2) { // 여기에 코드를 작성하세요 // 1. obj2 의 key들을 반복합니다. // 2. obj2 안에 있는 key 가 obj1 key 안에에 포함 되어있는지 if 문을 써서 확인한다. // 4. 포함되어있지 않으면 ob1에 추가한다. for ( let key in obj2 ) { if (!( key in obj1 )) { obj1[key] = obj2[key]; } } }  Question countAllCharacters  Write a function called \u0026ldquo;countAllCharacters\u0026rdquo;. (\u0026ldquo;countAllCharacters\u0026rdquo; 함수를 작성하세요\u0026rdquo;)\nGiven a string, \u0026ldquo;countAllCharacters\u0026rdquo; returns an object where each key is a character in the given string. The value of each key should be how many times each character appeared in the given string. (문자열이 주어졌을때, \u0026ldquo;countAllCharacters\u0026rdquo; 함수는 주어진 문자열의 각각의 문자를 키로 가지는 객체를 반환합니다. 각 키의 값은 해당 문자가 주어진 문자열에서 몇번 나오는지를 나타냅니다.)\n function countAllCharacters(str) { let obj = {}; for (let i = 0; i \u0026lt; str.length; i++) { // input으로 받은 문자열에서 하나의 character씩 loop를 돕니다. if (obj[str[i]] === undefined) { // 그런데 obj란 객체에 character가 들어 있지 않다면 새로운 문자열이기 때문에 객체에 char를 추가하고 0으로 만들어 줍니다. obj[str[i]] = 0; } obj[str[i]]++; // 그 이후 이 곳에서 char key의 value 값을 1 더해줍니다. } return obj; } let output = countAllCharacters('banana'); console.log(output); // --\u0026gt; {b: 1, a: 3, n: 2}  Question removeStringValues  Write a function called \u0026ldquo;removeStringValues\u0026rdquo;. (\u0026ldquo;removeStringValues\u0026rdquo; 함수를 작성하세요.)\nGiven an object, \u0026ldquo;removeStringValues\u0026rdquo; removes any properties on the given object whose values are strings. (객체가 주어졌을때, \u0026ldquo;removeStringValues\u0026rdquo; 함수는 속성값이 문자열인 모든 속성을 제거합니다.)\n My_Soultion function removeStringValues(obj) { // 여기에 코드를 작성하세요. // 객체안에 있는 속성값이 문자열인지 판별한다. // 문자열이라면 삭제한다. for ( let prop in obj ) { if ( typeof obj[prop] === \u0026quot;string\u0026quot; ) { delete obj[prop] } } }  Question removeNumberValues  Write a function called \u0026ldquo;removeNumberValues\u0026rdquo;. (\u0026ldquo;removeNumberValues\u0026rdquo; 함수를 작성하세요.)\nGiven an object, \u0026ldquo;removeNumberValues\u0026rdquo; removes any properties whose values are numbers. (객체가 주어졌을때, \u0026ldquo;removeNumberValues\u0026rdquo; 함수는 속성값이 숫자인 모든 속성을 제거합니다.)\n My_Soultion let obj = { a: 2, b: 'remaining', c: 4 }; function removeNumberValues(obj) { // 여기에 코드를 작성하세요. // prop 을 불러온다. // 불러온 prop 값을 숫자인지 판별한다/ // 숫자이면 제거한다 for ( let prop in obj ) { if ( typeof obj[prop] === \u0026quot;number\u0026quot; ) { delete obj[prop] } } return obj; } removeNumberValues(obj);  Question removeArrayValues  Write a function called \u0026ldquo;removeArrayValues\u0026rdquo;. (\u0026ldquo;removeArrayValues\u0026rdquo; 함수를 작성하세요.)\nGiven an object, \u0026ldquo;removeArrayValues\u0026rdquo; removes any properties whose values are arrays. (객체가 주어졌을때, \u0026ldquo;removeArrayValues\u0026rdquo; 함수는 속성값이 배열인 모든 속성을 제거합니다.)\n My_Soultion let obj = { a: [1, 3, 4], b: 2, c: ['hi', 'there'] } function removeArrayValues(obj) { // 여기에 코드를 작성하세요 // prop 값을 불러온다 // prop 값이 배열에 속하는지 판별한다 // 배열에 속하면 제거한다. for ( let prop in obj ) { if (Array.isArray(obj[prop])) { delete obj[prop]; } } return obj } removeArrayValues(obj)  Question getFirstElement  Write a function called \u0026ldquo;getFirstElement\u0026rdquo;. (\u0026ldquo;getFirstElement\u0026rdquo; 함수를 작성하세요.)\nGiven an array, \u0026ldquo;getFirstElement\u0026rdquo; returns the first element of the given array. (배열이 주어졌을때, \u0026ldquo;getFirstElement\u0026rdquo; 함수는 주어진 배열의 첫번째 요소를 반환해야 합니다.)\n My_Soultion function getFirstElement(array) { // 여기에 코드를 작성하세요. // 배열을 0번째 숫자를 불러온다. if ( array.length === 0 ) { return undefined; } else return array[0]; }  Question getLastElement  Write a function called \u0026ldquo;getLastElement\u0026rdquo;. (\u0026ldquo;getLastElement\u0026rdquo; 함수를 작성하세요.)\nGiven an array, \u0026ldquo;getLastElement\u0026rdquo; returns the last element of the given array. (배열이 주어졌을때, \u0026ldquo;getLastElemeent\u0026rdquo; 함수는 주어진 배열의 마지막 요소를 반환해야 합니다.)\n My_Soultion function getLastElement(array) { // 여기에 코드를 작성하세요 // 만약 배열의 길이가 0 이라면 undefinded 출력 // 아니라면 return 마지막 배열숫자 출력 if ( array.length === 0 ) { return undefined; } else { let lastNum = array[array.length -1] return lastNum; } }  Question getNthElement  Write a function called \u0026ldquo;getNthElement\u0026rdquo;. (\u0026ldquo;getNthElement\u0026rdquo; 함수를 작성하세요.)\nGiven an array and an integer, \u0026ldquo;getNthElement\u0026rdquo; returns the element at the given integer, within the given array. (배열과 숫자가 주어졌을때, \u0026ldquo;getNthElement\u0026rdquo; 함수는 주어진 배열에서 n번 인덱스의 요소를 반환해야 합니다.)\n My_Soultion function getNthElement(array, n) { // 여기에 코드를 작성하세요 // 만약 배열에 길이가 0보다 크면 코드 진행실행 아니면 undefinded // 배열에 n번째 있는 숫자를 변수에 저장 // 배열안에 있는 n 번째의 숫자 출력 if ( array.length \u0026gt; 0 ) { let ret = array[n]; return ret; } else { return undefined; } }  Question addToFront  Write a function called \u0026ldquo;addToFront\u0026rdquo;. (\u0026ldquo;addToFront\u0026rdquo; 함수를 작성하세요.)\nGiven an array and an element, \u0026ldquo;addToFront\u0026rdquo; adds the given element to the front of the given array, and returns the given array. (배열과 요소가 주어졌을때, \u0026ldquo;addToFront\u0026rdquo; 함수는 주어진 요소를 배열의 맨앞에 추가하고 주어진 배열을 반환해야 합니다.)\n My_Soultion function addToFront(arr, element) { arr.unshift(element); return arr; }  Question addToBack  Write a function called \u0026ldquo;addToBack\u0026rdquo;. (\u0026ldquo;addToBack\u0026rdquo; 함수를 작성하세요.)\nGiven an array and an element, \u0026ldquo;addToBack\u0026rdquo; returns the given array with the given element added to the end. (배열과 요소가 주어졌을때, \u0026ldquo;addToBack\u0026rdquo; 함수는 주어진 요소를 배열의 맨뒤에 추가하고 주어진 배열을 반환해야 합니다.)\n My_Soultion function addToBack(arr, element) { // 여기에 코드를 작성하세요. // push 사용해 element 값을 뒤에 추가한다. arr.push(element); return arr; }  Question joinArrays  Write a function called \u0026ldquo;joinArrays\u0026rdquo;. (\u0026ldquo;joinArrays\u0026rdquo; 함수를 작성하세요.)\nGiven two arrays, \u0026ldquo;joinArrays\u0026rdquo; returns an array with the elements of \u0026ldquo;arr1\u0026rdquo; in order, followed by the elementsin \u0026ldquo;arr2\u0026rdquo;. (두 배열이 주어졌을때, \u0026ldquo;joinArrays\u0026rdquo; 함수는 첫번째 배열(arr1)과 두번째 배열(arr2) 순서로 합쳐진 배열을 반환해야 합니다.)\n My_soultion function joinArrays(arr1, arr2) { // your code here // 변수를 만들어 배열1에 배열2를 집어넣는다. // 출력한다. let arrRet = arr1.concat(arr2); return arrRet }  Question getElementsAfter  Write a function called \u0026ldquo;getElementsAfter\u0026rdquo;. (\u0026ldquo;getElementsAfter\u0026rdquo; 함수를 작성하세요.)\nGiven an array and an index, \u0026ldquo;getElementsAfter\u0026rdquo; returns a new array with all the elements after (but not including) the given index. (배열과 인덱스가 주어졌을때, \u0026ldquo;getElementsAfter\u0026rdquo; 함수는 주어진 배열의 인덱스 이후 요소들을 (자신은 포함하지 않고) 새로운 배열로 반환해야 합니다.)\n My_Soultion function getElementsAfter(array, n) { // your code here // 새로운 빈배열을 만든다. // 초기값을 n+1을 한 for 문을 이용해 배열인덱스를 불러온다. // 불러온 값을 새로운 배열에 push를 사용해 담는다. // 출력한다. let newArr = []; for (let i = n + 1; i \u0026lt; array.length; i = i + 1 ) { newArr.push(array[i]); } return newArr; } getElementsAfter(['a', 'b', 'c', 'd', 'e'], 1);  Question getElementsUpTo  Write a function called \u0026ldquo;getElementsUpTo\u0026rdquo;. (\u0026ldquo;getElementsUpTo\u0026rdquo; 함수를 작성하세요.)\nGiven an array and a index, \u0026ldquo;getElementsUpTo\u0026rdquo;, returns an array with all the elements up until, but not including, the element at the given index. (배열과 인덱스가 주어졌을때, \u0026ldquo;getElementsUpTo\u0026rdquo; 함수는 주어진 배열의 인덱스 이전 요소들을 (자신은 포함하지 않고) 새로운 배열로 반환해야 합니다.)\n My_Soultion function getElementsUpTo(array, n) { let newArr = array.slice(0,n); return newArr } getElementsUpTo(['a', 'b', 'c', 'd', 'e'], 3);  Question getAllElementsButFirst  Write a function called \u0026ldquo;getAllElementsButFirst\u0026rdquo;. (\u0026ldquo;getAllElementsButFirst\u0026rdquo; 함수를 작성하세요.)\nGiven an array, \u0026ldquo;getAllElementsButFirst\u0026rdquo; returns an array with all the elements but the first. (배열이 주어졌을때, \u0026ldquo;getAllElementsButFirst\u0026rdquo; 함수는 첫번째 요소를 제외한 배열을 반환해야 합니다.)\n My_Soultion function getAllElementsButFirst(array) { // your code here // shift 를 이용해서 앞에 있는 요소를 뺀다. // 그리고 기존에 배열을 출력한다. array.shift(); return array; } getAllElementsButFirst([1,2,3,4])  model solution function getAllElementsButFirst(array) { return array.slice(1, array.length); }  Question getAllElementsButLast  Write a function called \u0026ldquo;getAllElementsButLast\u0026rdquo;. (\u0026ldquo;getAllElementsButLast\u0026rdquo; 함수를 작성하세요.)\nGiven an array, \u0026ldquo;getAllElementsButLast\u0026rdquo; returns an array with all the elements but the last. (배열이 주어졌을때, \u0026ldquo;getAllElementsButLast\u0026rdquo; 함수는 마지막 요소를 제외한 배열을 반환해야 합니다.)\n My_Soultion function getAllElementsButLast(array) { // your code here // slice 를 이용해서 마지막 숫자를 삭제한다. // 출력한다. array.pop() return array }  Question removeFromFront  Write a function called \u0026ldquo;removeFromFront\u0026rdquo;. (\u0026ldquo;removeFromFront\u0026rdquo; 함수를 작성하세요.)\nGiven an array, \u0026ldquo;removeFromFront\u0026rdquo; returns the given array with its first element removed. (배열이 주어졌을때, \u0026ldquo;removeFromFront\u0026rdquo; 함수는 첫번째 요소를 삭제한 주어진 배열을 반환해야 합니다.)\n My_Soultion function removeFromFront(arr) { // your code here // 메소드 사용해서 첫번째요소 자르기 arr.shift(); return arr; }  Question removeFromBack  Write a function called \u0026ldquo;removeFromBack\u0026rdquo;. (\u0026ldquo;removeFromBack\u0026rdquo; 함수를 작성하세요.)\nGiven an array, \u0026ldquo;removeFromBack\u0026rdquo; returns the given array with its last element removed. (배열이 주어졌을때, \u0026ldquo;removeFromBack\u0026rdquo; 함수는 마지막 요소를 삭제한 주어진 배열을 반환해야 합니다.)\n My_Soultion function removeFromBack(arr) { // your code here //배열 메소드 이용해서 뒤에 있는거 자르기 arr.pop(); return arr; }  Question removeFromBackOfNew  Write a function called \u0026ldquo;removeFromBackOfNew\u0026rdquo;. (\u0026ldquo;removeFromBackOfNew\u0026rdquo; 함수를 작성하세요.)\nGiven an array, \u0026ldquo;removeFromBackOfNew\u0026rdquo; returns a new array containing all but the last element of the given array. (배열이 주어졌을때, \u0026ldquo;removeFromBackOfNew\u0026rdquo; 함수는 마지막 요소를 제외한 모든 요소를 가지고 있는 새로운 배열을 반환해야 합니다.)\n My_Soultion function removeFromBackOfNew(arr) { // your code here // 빈 배열을 만든다. // 배열을 가져오는데 length를 이용해 마지막숫자를 뺀수를 가져온다 // 가져온 숫자를 새로운 배열에 넣는다. // arrNew 를 출력한다. let arrNew = []; for (let i = 0; i \u0026lt; arr.length -1; i = i + 1 ) { arrNew.push(arr[i]); } return arrNew }  model solution function removeFromBackOfNew(arr) { // your code here // 마지막 숫자를 뺀 배열값을 변수에 담는다. // 담은 변수를 출력한다. let sliced = arr.slice(0,arr.length-1) return sliced; }  Question addToBackOfNew  Write a function called \u0026ldquo;addToBackNew\u0026rdquo;. (\u0026ldquo;addToBackNew\u0026rdquo; 함수를 작성하세요.)\nGiven an array and an element, \u0026ldquo;addToBackNew\u0026rdquo; returns a clone of the given array, with the given element added to the end. (배열과 요소가 주어졌을때, \u0026ldquo;addToBackNew\u0026rdquo; 함수는 주어진 배열의 복사본 끝에 주어진 요소가 추가된 배열을 반환합니다.)\n My_Soultion function addToBackOfNew(arr, element) { // your code here arr = arr.concat(element); return arr; }  model soultion function addToBackOfNew(arr, element) { const newArr = arr.slice(); newArr.push(element); return newArr; }  Question joinArrayOfArrays  Write a function called \u0026ldquo;joinArrayOfArrays\u0026rdquo;. (\u0026ldquo;joinArrayOfArrays\u0026rdquo; 함수를 작성하세요.)\nGiven an array of arrays, \u0026ldquo;joinArrayOfArrays\u0026rdquo; returns a single array containing the elements of the nested arrays. (배열들의 배열이 주어졌을때, \u0026ldquo;joinArrayOfArrays\u0026rdquo; 함수는 배열들의 요소를 모두 담고 있는 단일 배열을 반환합니다.)\nit is used by reduce and concat\n My_Soultion function joinArrayOfArrays(arr) { output = arr.reduce(function(acc,cur) { return acc.concat(cur); }) return output; }  Question getAllLetters  Write a function called \u0026ldquo;getAllLetters\u0026rdquo;. (\u0026ldquo;getAllLetters\u0026rdquo; 함수를 작성하세요.)\nGiven a word, \u0026ldquo;getAllLetters\u0026rdquo; returns an array containing every character in the word. (단어가 주어졌을때, \u0026ldquo;getAllLetters\u0026rdquo; 함수는 주어진 단어에 포함된 모든 문자를 담고 있는 배열을 반환합니다.)\n My_Soultion function getAllLetters(str) { // your code here // 만약 빈문자 열이라면 빈 배열을 리턴한다. // 만약 빈배열이 아니라면 문자를 split method 사용한다. if ( str === \u0026quot;\u0026quot; ) { return str = []; } else { return str.split(\u0026quot;\u0026quot;) } }  Question getAllWords  Write a function called \u0026ldquo;getAllWords\u0026rdquo;. (\u0026ldquo;getAllWords\u0026rdquo; 함수를 작성하세요.)\nGiven a sentence, \u0026ldquo;getAllWords\u0026rdquo; returns an array containing every word in the sentence. (문장이 주어졌을때, \u0026ldquo;getAllWords\u0026rdquo; 함수는 주어진 문장에 포함된 모든 단어를 담고 있는 배열을 반환합니다.)\n My_Soultion function getAllWords(str) { if (str === '') { return []; } else { return str.split(' '); } }  Question removeElement  Write a function called \u0026ldquo;removeElement\u0026rdquo;. (\u0026ldquo;removeElement\u0026rdquo; 함수를 작성하세요.)\nGiven an array of elements, and a \u0026ldquo;discarder\u0026rdquo; parameter, \u0026ldquo;removeElement\u0026rdquo; returns an array containing the items in the given array that do not match the \u0026ldquo;discarder\u0026rdquo; parameter. (배열과 \u0026ldquo;discarder\u0026rdquo; 매개변수가 주어졌을때, \u0026ldquo;removeElement\u0026rdquo; 함수는 주어진 배열에서 \u0026ldquo;discarder\u0026rdquo; 매개변수와 일치하지 않는 모든 요소를 포함하는 배열을 반환합니다.)\n My_Soultion unction removeElement(array, discarder) { // your code here /* 1. 빈배열이면 빈배열을 반환 2. 새로운 빈배열을 만든다. newArr 3. 모든 element를 조사한다. 4. element가 discarder와 다르다면 newArr에 push로 넣는다. 5. 위에경우가 아니라면 newArr을 반환 */ if ( array === [] ) { return []; } let newArr = []; for (let i = 0; i \u0026lt; array.length; i = i + 1 ) { if ( discarder !== array[i] ) { newArr.push(array[i]) } } return newArr; }  Question keep  Write a function called \u0026ldquo;keep\u0026rdquo;. (\u0026ldquo;keep\u0026rdquo; 함수를 작성하세요.)\nGiven an array and a keeper element, \u0026ldquo;keep\u0026rdquo; returns an array containing the items that match the given keeper element. (배열과 \u0026ldquo;keeper\u0026rdquo; 매개변수가 주어졌을때, \u0026ldquo;keep\u0026rdquo; 함수는 \u0026ldquo;keeper\u0026rdquo; 매개변수와 일치하는 모든 요소\n My_Soultion function keep(array, keeper) { // your code here // 만약 배열이 비워있다면 빈배열 리턴 // 새로운 빈배열을 만든다. // for 문을 사용해 배열을 조사 // 만약 keeper라는 매개변수가 있는지 조사 // 만약 있다면 push를 사용해 새로운 배열에 투입 // 새로운 배열 출력 if ( array === []) { return []; } let newArr = []; for ( let i = 0; i \u0026lt; array.length; i = i + 1 ) { if ( array[i] === keeper ) { newArr.push(array[i]); } } return newArr; }  Question findSmallestElement  Write a function called \u0026ldquo;findSmallestElement\u0026rdquo;. (\u0026ldquo;findSmallestElement\u0026rdquo; 함수를 작성하세요.)\nGiven an array of numbers, \u0026ldquo;findSmallestElement\u0026rdquo; returns the smallest number within the given array. (숫자의 배열이 주어졌을때, \u0026ldquo;findSmallestElement\u0026rdquo; 함수는 주어진 배열에서 가장 작은 수를 반환합니다.)\n My_solution // It is used by sort(); function findSmallestElement(arr) { 만약 arr 비워있다면 빈배열 리턴 메소드 slice()이용해 복사 복사한 배열을 sort()를 이용해 작은숫자가 앞으로 올수 있도록 정렬 0번째 있는 요소 출력 if ( arr.length === 0 ){ return 0; } let newArr = arr.slice(); let sortArr = function(a,b) { return a-b; } newArr.sort(sortArr); return newArr[0]; }  // It is used by reudce and if function findSmallestElement(arr) { if (arr.length \u0026lt; 1) { // satisfies Notes requirement return 0; } var newNum = arr[0]; // create number placeholder (start with first number of array) for (let i in arr) { // iterate thru array if (arr[i] \u0026lt; newNum) { // if element is larger than current placeholder number newNum = arr[i]; // make that element the new placeholder number } } return newNum; }  // It is used by reudce and if ????? function findSmallestElement(arr) { if(arr.length === 0) { return 0; } else { var smallestNum = arr.reduce(function(a,b) { return a \u0026lt; b ? a: b; }); return smallestNum; } }  // it is used by reudce and Math method function findSmallestElement(arr) { if ( arr.length === 0 ) { return 0; } output = arr.reduce(function(acc,cur){ return Math.min(acc,cur); }) return output; }  // it is used by reudce and Math method function findSmallestElement(arr) { if ( arr.length === 0 ) { return 0; } return Math.min(...arr); }  Question computeSumOfAllElements  Write a function called \u0026ldquo;computeSumOfAllElements\u0026rdquo;. (\u0026ldquo;computeSumOfAllElements\u0026rdquo; 함수를 작성하세요.)\nGiven an array of numbers, \u0026ldquo;computeSumOfAllElements\u0026rdquo; returns the sum of all the elements in the given array. (숫자의 배열이 주어졌을때, \u0026ldquo;computeSumOfAllElements\u0026rdquo; 함수는 주어진 배열의 모든 요소의 합을 반환합니다.)\n My_Solution function computeSumOfAllElements(arr) { // your code here. // 빈 배열을 만든다. // count 변수 초기화 한해서 만든다. // arr 안에 값들을 조사한다. // count 변수안에 조사한 값들을 더해서 넣는다. let sum = 0; for ( let i = 0; i \u0026lt; arr.length; i = i + 1 ) { sum = sum + arr[i]; } return sum }  // it used by reduce function computeSumOfAllElements(arr) { if ( arr.length === 0 ) { return 0; } return arr.reduce(function(acc,val){ return acc + val; }) }  Question computeProductOfAllElements  Write a function called \u0026ldquo;computeProductOfAllElements\u0026rdquo;. (\u0026ldquo;computeProductOfAllElements\u0026rdquo; 함수를 작성하세요.)\nGiven an array of numbers, \u0026ldquo;computeProductOfAllElements\u0026rdquo; returns the products of all the elements in the given array. (숫자의 배열이 주어졌을때, \u0026ldquo;computeProductOfAllElements\u0026rdquo; 함수는 주어진 배열의 모든 요소의 곱을 반환합니다.)\n My_Solution function computeProductOfAllElements(arr) { // 먄약 배열이 비워있다면 0 리턴; // 0으로 된 마지막에 출력할 변수 생성; // for 문을 사용해 배열안에 있는 요소 조사 // 생성한 변수 안에 조사한 요소들을 곱셈하여 넣는다. // 변수 출려 if ( arr.length === 0 ) { return 0; } let ret = 1; for ( let i = 0; i \u0026lt; arr.length; i = i + 1 ) { ret = ret * arr[i]; } return ret; }  // It is used by redcue method function computeProductOfAllElements(arr) { if ( arr.length === 0 ) { return 0; } return arr.reduce(function(acc,cur) { return acc * cur; }) }  Question getLengthOfLongestElement  Write a function called \u0026ldquo;getLengthOfLongestElement\u0026rdquo;. (\u0026ldquo;getLengthOfLongestElement\u0026rdquo; 함수를 작성하세요.)\nGiven an array, \u0026ldquo;getLengthOfLongestElement\u0026rdquo; returns the length of the longest string in the given array. (배열이 주어졌을때, \u0026ldquo;getLengthOfLongestElement\u0026rdquo; 함수는 주어진 배열에서 가장 긴 문자열의 길이를 반환합니다.)\n My_Solution // it is used by sort() function getLengthOfLongestElement(arr) { if ( arr.length === 0 ){ return 0; } sortArr = function (a, b) { return b.length - a.length; } let ret = arr.sort(sortArr)[0] return ret.length; }  // It is used by for loop and if function getLengthOfLongestElement(arr) { if ( arr.length === 0 ) { return 0; } let lgth = 0; // =\u0026gt; 3 =\u0026gt;5 let longest; // =\u0026gt;\u0026quot;one\u0026quot; =\u0026gt; \u0026quot;three\u0026quot; for ( let i = 0; i \u0026lt; arr.length; i = i + 1) { if(arr[i].length \u0026gt; lgth) { // 첫번째 요소는 \u0026quot;one\u0026quot; 길이는 3 \u0026gt; 0 // 두번째 요소는 \u0026quot;two\u0026quot; 길이는 3 \u0026gt; 3 : 실행이 안됨 // 세번째 요소는 \u0026quot;three\u0026quot; 길이는 5 \u0026gt; 3 : 실행되면서 최종적으로 longest변수에 \u0026quot;three\u0026quot;가 담긴다. lgth = arr[i].length; longest = arr[i].length; } } return longest; }  /* it is used by reduce method comment return a.length or return b.length 하면 안되는 이유. length를 리턴에 넣으면 다음 a 와 b.length의 길이를 비교하기 때문에 안되는거더라구요. 그래서 함수 밖에 붙여주면 숫자로 반환되는 거구요. */ function getLengthOfLongestElement(arr) { return arr.reduce(function(a,b) { if (a.length \u0026gt;= b.length) { return a; } else { return b; } }).length }  Question filterOddLengthWords  Write a function called \u0026ldquo;filterOddLengthWords\u0026rdquo;. (\u0026ldquo;filterOddLengthWords\u0026rdquo; 함수를 작성하세요.)\nGiven an array of string, \u0026ldquo;filterOddLengthWords\u0026rdquo; returns an array containing only the elements of the given array whose lengths are odd numbers. (문자열의 배열이 주어졌을때, \u0026ldquo;filterOddLengthWords\u0026rdquo; 함수는 주어진 배열의 요소 중 문자열의 길이가 홀수인 문자열만을 요소로 가지는 배열을 반환합니다.)\n My_Soultion unction filterOddLengthWords(words) { // it passed test // it's good to practice useing filter // your code here // output 빈 배열을 만든다. // for 문을 이용해 배열안에 있는 요소를 조사한다. // 만약 배열안에 있는 각각의 요소가 홀수라면 ture // ture 인 값을 output 배열에 넣는다. // 넣은 값을 출력한다. let output = []; for ( let i = 0; i \u0026lt; words.length; i = i + 1 ) { if ( words[i].length % 2 !== 0 ) { output.push(words[i]); } } return output; }  modle_Soultion // input: an array of strings // output: return an array containing only the elements of the given array whose lengths are odd numbers function filterOddLengthWords(arr) { // HoF return arr.filter(function(i) { // filters each even length elements to its own array return i.length % 2 !== 0; }); }  Question getElementOfArrayProperty  Write a function called \u0026ldquo;getElementOfArrayProperty\u0026rdquo;. (\u0026ldquo;getElementOfArrayProperty\u0026rdquo; 함수를 작성하세요.)\nGiven an object, a key, and a numerical index, \u0026ldquo;getElementOfArrayProperty\u0026rdquo; returns the value of the element at the given index of the array located within the given object at the given key. (객체와 키, 그리고 숫자로된 인덱스값이 주어졌을때, \u0026ldquo;getElementOfArrayProperty\u0026rdquo; 함수는 주어진 키에 위치한 배열의 인덱스에 해당하는 값을 반환합니다.)\n My_Soultion function getElementOfArrayProperty(obj, key, index) { // your code here if (!Array.isArray(obj[key])){ return undefined; } return obj[key][index]; } let obj = { key: ['Jamil', 'Albrey'] }; getElementOfArrayProperty(obj,'key',0);  Question select  Write a function called \u0026ldquo;select\u0026rdquo;. (\u0026ldquo;select\u0026rdquo; 함수를 작성하세요.)\nGiven an array and an object, \u0026ldquo;select\u0026rdquo; returns a new object whose properties are those in the given object AND whose keys are present in the given array. (배열과 객체가 주어졌을때, \u0026ldquo;select\u0026rdquo; 함수는 주어진 객체의 키값 중 주어진 배열에 포함된 키값만을 속성으로 가지는 새로운 배열을 반환합니다.)\n My_Soultion function select(arr, obj) { // your code here let newObj = {}; for (let key in obj ) { for (let i = 0; i \u0026lt; arr.length; i = i + 1 ) { if (key === arr[i] ) { newObj[key] = obj[key] } } } return newObj; }  Question getNthElementOfProperty  Write a function called \u0026ldquo;getNthElementOfProperty\u0026rdquo;. (\u0026ldquo;getNthElementOfProperty\u0026rdquo; 함수를 작성하세요.)\nGiven an object and a key, \u0026ldquo;getNthElementOfProperty\u0026rdquo; returns the nth element of an array located at the given key. (객체와 키가 주어졌을때, \u0026ldquo;getNthElementOfProperty\u0026rdquo; 함수는 주어진 키에 위차한 배열의 n번째 요소를 반환합니다.)\n My_Soultion function getNthElementOfProperty(obj, key, n) { // your code here // 만약 주어진 키에 위차하는 속성값이 배열이 아니라면 undefinded // 만약 그게 아니라면 주어진 키값의 인덱스 번호 리턴 if ( !Array.isArray(obj[key])) { return undefined; } else { return obj[key][n]; } }  Question getElementsLessThan100AtProperty  Write a function called \u0026ldquo;getElementsLessThan100AtProperty\u0026rdquo;. (\u0026ldquo;getElementsLessThan100AtProperty\u0026rdquo; 함수를 작성하세요.)\nGiven an object and a key, \u0026ldquo;getElementsLessThan100AtProperty\u0026rdquo; returns an array containing all the elements of the array located at the given key that are less than 100. (객체와 키값이 주어졌을때, \u0026ldquo;getElementsLessThan100AtProperty\u0026rdquo; 함수는 주어진 키에 위치하는 배열에서 100 보다 작은 값으로만 이루어진 배열을 반환합니다.)\n MY_Soultion function getElementsLessThan100AtProperty(obj, key) { for (let prop in obj) { if (! Array.isArray(obj[key])){ return []; } else if ( !prop in obj ) { return []; } } let retArr = []; for ( let prop2 in obj ) { for ( let i = 0; i \u0026lt; obj[prop2].length; i = i + 1) { if ( obj[prop2][i] \u0026lt; 100 ) { retArr.push(obj[prop2][i]); } } } return retArr; }  My_Re_Soultion function getElementsLessThan100AtProperty(obj, key) { if ( ! Array.isArray(obj[key])) { return []; } else { return obj[key].filter(cur =\u0026gt; cur \u0026lt; 100); } }  Question getLastElementOfProperty  Write a function called \u0026ldquo;getLastElementOfProperty\u0026rdquo;. (\u0026ldquo;getLastElementOfProperty\u0026rdquo; 함수를 작성하세요.)\nGiven an object and a key, \u0026ldquo;getLastElementOfProperty\u0026rdquo; returns the last element of an array located at the given key. (객체와 키가 주어졌을때, \u0026ldquo;getLastElementOfProperty\u0026rdquo; 함수는 주어진 키에 위치한 배열의 마지막 요소를 반환합니다.)\n My_Solution function getLastElementOfProperty(obj, key) { // 1. 만약 key의 값에 prop 배열이 아니라면 undefined 출력 // 2. 배열에 있는 마지막 요소 pop 메소드 이용해서 빼서 변수안에 넣기 // 3. 변수 리턴 if (!Array.isArray(obj[key])) { return undefined; } else { let lastNum = obj[key].pop() return lastNum } }  modle_Solution // 1.마지막 배열에 요소 가져오기 위해 length - 1 이라는 방법을 썻다. function getLastElementOfProperty(obj, key) { let prop = obj[key]; if (!Array.isArray(prop)) { return undefined } return prop[prop.length - 1] }  Question getSquaredElementsAtProperty  Write a function called \u0026ldquo;getSquaredElementsAtProperty\u0026rdquo;. (\u0026ldquo;getSquaredElementsAtProperty\u0026rdquo; 함수를 작성하세요.)\nGiven an object and a key, \u0026ldquo;getSquaredElementsAtProperty\u0026rdquo; returns an array containing all the squared elements of the array located at the given key. (객체와 키가 주어졌을때, \u0026ldquo;getSquaredElementsAtProperty\u0026rdquo; 함수는 주어진 키에 위치하는 배열의 요소들의 제곱을 요소로 가지는 배열을 반환합니다.)\n My_Soultion function getSquaredElementsAtProperty(obj, key) { // 1. 만약 주어진 key 의 값이 배열이 아니라면 빈배열 출력 // 2. 만약 주어진 key 의 값이 길이가 0 같이 않다면 빈배열 // 3. 마지막에 출력할 새로운 변수 생성 // 4. 곱셈할 값을 넣기 위한 새로운 변수 또 생성 // 5. 배열안에 있는 요소들 곱하기 // 6. 곱한값을 arr 이라는배열에 넣는다. if (!Array.isArray(obj[key])) { return []; } else if (obj[key].length === 0 ){ return []; } let arr = []; let conut; for ( let i = 0; i \u0026lt; obj[key].length; i = i + 1 ) { conut = obj[key][i]*obj[key][i]; arr.push(conut); } return arr; }  other Soultion function getSquaredElementsAtProperty(obj, key) { var arr = []; if(Array.isArray(obj[key])){ for(var i in obj[key]){ var squared =obj[key][i]*obj[key][i]; arr.push(squared); } } return arr; } var obj = { key: [2, 1, 5] }; var output = getSquaredElementsAtProperty(obj, 'key'); console.log(output);  Question getAllButLastElementOfProperty  Write a function called \u0026ldquo;getAllButLastElementOfProperty\u0026rdquo;. (\u0026ldquo;getAllButLastElementOfProperty\u0026rdquo; 함수를 작성하세요.)\nGiven an object and a key, \u0026ldquo;getAllButLastElementOfProperty\u0026rdquo; returns an array containing all but the last element of the array located at the given key. (객체와 키가 주어졌을때, \u0026ldquo;getAllButLastElementOfProperty\u0026rdquo; 함수는 주어진 키에 위치하는 배열의 마지막 요소를 제외한 배열을 반환합니다.)\n My_Solution function getAllButLastElementOfProperty(obj, key) { // 1.마지막에 출력할 arr 빈배열 생성 // 2.만약 key의 값의 prop 가 배열이 아니라면 빈배열 리턴 // 3.만약 key의 값의 prop 의 길이가 0 과 같이 않다면 빈배열 리턴 // 4.선언된 arr 안에 obj[key] 값을 넣는다. // 5.pop()메소드 사용해 마지막 요소 제거 // 6.arr 리턴 let arr = []; if (!Array.isArray(obj[key])) { return []; } else if ( obj[key].length === 0 ) { return []; } else { arr = obj[key]; arr.pop() } return arr; }  Question getProductOfAllElementsAtProperty  Write a function called \u0026ldquo;getProductOfAllElementsAtProperty\u0026rdquo;. (\u0026ldquo;getProductOfAllElementsAtProperty\u0026rdquo; 함수를 작성하세요.)\nGiven an object and a key, \u0026ldquo;getProductOfAllElementsAtProperty\u0026rdquo; returns the product of all the elements in the array located at the given key. (객체와 키가 주어졌을때, \u0026ldquo;getProductOfAllElementsAtProperty\u0026rdquo; 함수는 주어진 키에 위치한 배열의 요소의 곱을 반환합니다.)\n My_soultion // It is used by for function getProductOfAllElementsAtProperty(obj, key) { // 1. arr 변수 만들어 key값의 prop 값을 넣는다 // 2. 곱한값을 담을 sum 이라는 변수 생성 // 3. 만약 key의 prop 배열이 아니라면 0을 리턴 // 4. 만약 key의 prop 길이가 0 과 같다면 0; // 5. for 문사용해 arr안에 있는 숫자를 곱한값을 sum 안에 저장 // 6. sum 출력 let arr = obj[key]; let sum = 1; if ( !Array.isArray(obj[key])) { return 0; } else if ( obj[key].length === 0 ) { return 0; } for ( let n = 0 ; n \u0026lt; arr.length ; n = n + 1 ) { sum = sum * arr[n]; } return sum; }  // It is used by reduce function getProductOfAllElementsAtProperty(obj, key) { if (! Array.isArray(obj[key] )) { return 0; } else if ( obj[key].length === 0 ){ return 0; } let arr = obj[key]; return arr.reduce(function(acc,cur) { return acc * cur; }) }  ","date":1573689600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1573689600,"objectID":"907c1a94e095a77fb2469e0301fd3ec4","permalink":"/tutorial/javascript-daliy-coding-level-1/","publishdate":"2019-11-14T00:00:00Z","relpermalink":"/tutorial/javascript-daliy-coding-level-1/","section":"tutorial","summary":"write here:rocket:","tags":["Javascript"],"title":"Daliy_Coding_Level_1","type":"docs"},{"authors":null,"categories":[],"content":" Question findMissingNumber  성준이는 1부터 n까지 숫자를 적던 중 깜빡하고 하나의 숫자를 빼먹었다. 그 빼먹은 숫자를 찾으시오.\n  outPut  findMissingNumber('1 6 2 4 3') // =\u0026gt; 5  My_Soultion function findMissingNumber(str) { // code goes here let strArr = str.split(\u0026quot; \u0026quot;).map(Number); let x = function(a,b){ return a-b; } let orderArr = strArr.sort(x); let arr = orderArr.filter(function(ele,index){ return ele -1 !== index; }) return arr[0]-1 }  Quesiton  +, -, 그리고 괄호를 가지고 길이가 최대 50인 식을 만들었다. 그리고 나서 성준 이는 괄호를 모두 지웠다. 그리고 나서 괄호를 적절히 쳐서 이 식의 값을 최소로 만드려고 한다. 괄호를 적절히 쳐서 이 식의 값을 최소로 만드는 프로그램을 작성하시오.\n output findMinByBracket('55-50+40') // -35  My_soultion function findMinByBracket(str) { let arr = str.split(\u0026quot;-\u0026quot;) let sumPlus = 0; let sum = 0; for (let i = 0; i \u0026lt; arr.length; i ++ ) { if (arr[i].split(\u0026quot;+\u0026quot;).length \u0026gt; 1 )\t{ // [55-50+40] sumPlus = arr[i].split(\u0026quot;+\u0026quot;).map(Number).reduce(function(a,c){ return a + c }); arr.splice(i,1,sumPlus.toString()); } // 현재 arr = [\u0026quot;50\u0026quot;,\u0026quot;90\u0026quot;];\tsum = arr.map(Number).reduce(function(a,c){ return a - c; }); } return sum; }  Quesiton findMaxOnMultiplesOfThirty  어느날, 성준이는 우연히 길거리에서 양수 N을 보았다. 성준이는 30이란 수를 존경하기 때문에, 그는 길거리에서 찾은 수에 포함된 숫자들을 섞어 30의 배수가 되는 가장 큰 수를 만들고 싶어한다. 성준이를 도와 그가 만들고 싶어하는 수를 계산하는 프로그램을 작성하라. (그 수가 존재한다면)\n출력 : 성준이가 만들고 싶어하는 수가 존재한다면 그 수를 출력하라. 그 수가 존재하지 않는다면, -1을 출력하라.\n  outPut  findMaxOnMultiplesOfThirty(4095) // 9540 findMaxOnMultiplesOfThirty(1023) // 3210 findMaxOnMultiplesOfThirty(4800) // 8400  My_Soultion function findMaxOnMultiplesOfThirty(num) { // your code here let num2 = num.toString().split(\u0026quot;\u0026quot;).map(Number); let num3 = num2.sort().reverse().join(\u0026quot;\u0026quot;); let num4 = Number(num3); if (num4 % 30 === 0 ){ return num4; } else { return -1; } }  Question threeFiveMultiples  숫자가 주어졌을때, threeFiveMultiples(num) 함수는 해당 숫자보다 작은 3 혹은 5의 배수들의 총합을 반환합니다.\n예시: 만약 10이 주어졌다면, 10 보다 작은 3과 5의 배수들은 3, 5, 6, 9 가 있으며 해당 숫자들을 모두 더하면 23 이 나오므로 여러분이 작성하진 함수는 23 을 반환해야 합니다.\n My_Soultion function threeFiveMultiples(num) { // 여기에 코드를 작성하세요 let result = 0; for(let i = 0; i \u0026lt; num; i++ ) { if(i % 3 === 0 || i % 5 === 0){ result = result + i; } } return result; }  Quesiton runLength  3시간 반 소요\n문자열이 주어졌을때, runLength(str) 함수는 Run-length 인코딩 알고리즘을 사용하여 주어진 문자열을 압축하여 반환합니다.\n해당 알고리즘은 반복되는 글자가 있을경우 반복되는 수와 해당 글자를 조합하여 문자열을 압축시킵니다.\n예시: wwwggopp 는 3w2g1o2p 로 압축됩니다. 주어지는 문자열은 숫자나, 구두점이나, 문자를 포함하고 있지 않습니다.\n My_Soultion function runLength(str) { // 같은 char 끼리 묶기 위해 우선 각배열안에 담아서 newArr안에 넣느다 . // newArr = (4) [Array(3), Array(5), Array(6), Array(8)] // (3) [\u0026quot;w\u0026quot;, \u0026quot;w\u0026quot;, \u0026quot;w\u0026quot;] // (5) [\u0026quot;w\u0026quot;, \u0026quot;w\u0026quot;, \u0026quot;w\u0026quot;, \u0026quot;g\u0026quot;, \u0026quot;g\u0026quot;] // (6) [\u0026quot;w\u0026quot;, \u0026quot;w\u0026quot;, \u0026quot;w\u0026quot;, \u0026quot;g\u0026quot;, \u0026quot;g\u0026quot;, \u0026quot;o\u0026quot;] // (8) [\u0026quot;w\u0026quot;, \u0026quot;w\u0026quot;, \u0026quot;w\u0026quot;, \u0026quot;g\u0026quot;, \u0026quot;g\u0026quot;, \u0026quot;o\u0026quot;, \u0026quot;p\u0026quot;, \u0026quot;p\u0026quot;] var strArr = str.split(\u0026quot;\u0026quot;); var newArr = []; var index = 0; for (let i = 0; i \u0026lt; strArr.length ; i ++ ) { let copeArr = strArr.slice(); if(strArr[i] !== strArr[i + 1]) { // i = 2 , 4, 5, 7 copeArr.splice(i+1,0,\u0026quot;-\u0026quot;); // [\u0026quot;w\u0026quot;, \u0026quot;w\u0026quot;,\u0026quot;w\u0026quot;,\u0026quot;-\u0026quot;,\u0026quot;g\u0026quot;, \u0026quot;g\u0026quot;, \u0026quot;o\u0026quot;, \u0026quot;p\u0026quot;, \u0026quot;p\u0026quot;] newArr.push(copeArr.slice(index,i+1)); } } // retArr 안에 같은 char 끼리 모아 놓는다. // retArr = (4) [\u0026quot;www\u0026quot;, \u0026quot;gg\u0026quot;, \u0026quot;o\u0026quot;, \u0026quot;pp\u0026quot;] var retArr = []; var filtered = []; retArr.push(newArr[0].join(\u0026quot;\u0026quot;)) for (let i = 0; i \u0026lt; newArr.length- 1; i ++ ) { retArr.push(newArr[i+1].slice(newArr[i].length).join(\u0026quot;\u0026quot;)) } // map 을 이용하여 outPut 변수안에 숫자와 char각각요소를 합쳐 배열로 만든다. // outPut[\u0026quot;3w\u0026quot;, \u0026quot;2g\u0026quot;, \u0026quot;1o\u0026quot;, \u0026quot;2p\u0026quot;] let outPut = retArr.map(function(val) { return val.length + val[0]; }) // 문자열로 만들고 리턴한다. return outPut.join(\u0026quot;\u0026quot;); }  Question numberSearch  문자열이 주어졌을때, numberSearch(str) 함수는 주어진 문자열에서 숫자를 모두 찾아 더한 뒤 해당 값을 (숫자, 공백 등을 제외한) 알파벳의 길이의 길이로 나눈 값을 정수로 반올림하여 반환합니다.\n 예시: 만약 문자열 Hello6 9World 2, Nic8e D7ay! 이 주어졌다면, 결과값은 2 입니다. 우선 모든 숫자를 더하면 6 + 9 + 2 + 8 + 7 = 32 가 나오게됩니다. 그 후 (숫자, 공백 등을 제외한) 알파벳의 길이가 17이기 때문에 32/17 = 1.882 가 나오게 되며, 가까운 정수로 반올림을 하게되면 정답인 2가 나오게 됩니다.  My_Soultoin function numberSearch(str) { // your code here let strLength = str.replace(/[^a-z]/gi, '').length; let sum = str.match(/\\d/g).map(Number).reduce(function(a,c){ return a + c; }) return Math.round(sum / strLength); }  Question findMaxOnMultiplesOfThirty  어느날, 성준이는 우연히 길거리에서 양수 N을 보았다. 성준이는 30이란 수를 존경하기 때문에, 그는 길거리에서 찾은 수에 포함된 숫자들을 섞어 30의 배수가 되는 가장 큰 수를 만들고 싶어한다. 성준이를 도와 그가 만들고 싶어하는 수를 계산하는 프로그램을 작성하라. (그 수가 존재한다면)\n출력 : 성준이가 만들고 싶어하는 수가 존재한다면 그 수를 출력하라. 그 수가 존재하지 않는다면, -1을 출력하라.\n findMaxOnMultiplesOfThirty(4095) // 9540 findMaxOnMultiplesOfThirty(1023) // 3210 findMaxOnMultiplesOfThirty(4800) // 8400  My_Soultion function findMaxOnMultiplesOfThirty(num) { // your code here // 4095 --\u0026gt; 9540 // 1023 --\u0026gt; 3210 // 4800 --\u0026gt; 8400 str = String(num); // num 를 문자열로 바꾼다. let sum = str.split('').map(Number).reduce(function(acc,curr){ // return acc + curr; }); if ( sum % 3 === 0 \u0026amp;\u0026amp; str.includes('0')) { return Number(str.split('').map(Number).sort(function(a,b){ return b - a; }).join('')); } else { return -1; } }  Quesiton threeFiveMultiples  숫자가 주어졌을때, threeFiveMultiples(num) 함수는 해당 숫자보다 작은 3 혹은 5의 배수들의 총합을 반환합니다.\n 예시: 만약 10이 주어졌다면, 10 보다 작은 3과 5의 배수들은 3, 5, 6, 9 가 있으며 해당 숫자들을 모두 더하면 23 이 나오므로 여러분이 작성하진 함수는 23 을 반환해야 합니다.  My_Soultion function threeFiveMultiples(num) { // 여기에 코드를 작성하세요 let sum3 = 0; // 3의 배수들이 담긴다. let sum5 = 0; // 5의 배수들이 담긴다. for ( let i = 1; i \u0026lt; num; i = i + 1 ) { // 10(Num) 보다 작을때까지 돌린다. if (i % 3 === 0 ) { // i 값이 3 6 9 가 되면 통과 sum3 = sum3 + i; // 3 + 6 + 9 = 18 } else if ( i % 5 === 0) { // i 값이 5 가 되면 통과 sum5 = sum5 + i; // 0 + 5 = 5 } } return sum3 + sum5; // 18 + 5 = 23 }  Question runLength  문자열이 주어졌을때, runLength(str) 함수는 Run-length 인코딩 알고리즘을 사용하여 주어진 문자열을 압축하여 반환합니다.\n해당 알고리즘은 반복되는 글자가 있을경우 반복되는 수와 해당 글자를 조합하여 문자열을 압축시킵니다.\n 예시: wwwggopp 는 3w2g1o2p 로 압축됩니다. 주어지는 문자열은 숫자나, 구두점이나, 문자를 포함하고 있지 않습니다.  My_Soultion function runLength(str) { // Your code here let result = new Array(); // \u0026lt;\u0026lt; new Array() 와 [] 차이점 let count = 1; // 숫자를 계산하기위해 1로 초기값설정 for ( let i = 0; i \u0026lt; str.length; i = i + 1 ) { if ( str[i] === str[i + 1]) { count = count + 1; } else { result.push(count); result.push(str[i]); count = 1; } } return result.join(''); }  Qeustion thirdGreatest  문자열로 이루어진 배열이 주어졌을때, thirdGreatest(strArr) 함수는 주어진 배열에서 세번째로 긴 단어를 반환합니다. 그 중, 동률일때는 뒤에 있는 단어를 반환해줘야 합니다.\n 예를 들어, 주어진 배열이 [\u0026quot;hello\u0026quot;, \u0026quot;world\u0026quot;, \u0026quot;before\u0026quot;, \u0026quot;all\u0026quot;] 라면, 결과값은 world 가 될것입니다. 왜냐하면 before는 6글자이고 hello와 world 둘다 5글자 이지만 world가 더 뒤에 나온 5글자 단어이기 때문입니다. 만약 주어진 배열이 [\u0026quot;hello\u0026quot;, \u0026quot;world\u0026quot;, \u0026quot;after\u0026quot;, \u0026quot;all\u0026quot;] 이라면 결과값은 after가 될것입니다. 왜냐하면 앞에 세 단어가 모두 5글자이기 때문에 마지막 단어를 반환하기 때문입니다. 배열은 항상 적어도 문자열 세개를 가지고 있으며, 각각의 문자열은 오직 글자만을 포함하고 있습니다.  My_Soultion function thirdGreatest(arr) { // 여기에 코드를 작성하세요 // 1. sort() 메소드를 이용해서 문자열의 길이가 가장 긴것들을 가장 처음으로 배열한다. // 2. 3번째 배열에 있는 요소를 출력한다. let lineUp = function (a,b) { if (a.length \u0026gt; b.length) { return -1; } else if (a.length === b.length){ return 0; } else { return 1; } } return arr.sort(lineUp)[2]; }  Question superIncreasing  숫자로 이루어진 배열이 주어졌을때, superIncreasing(arr) 함수는 해당 배열이 superIncreasing 조건을 만족하는지 반환합니다. 배열의 모든 요소들이 해당 요소들 앞에 있는 요소들 전체의 합보다 크면 superIncreasing 조건을 만족하는 배열이라 할 수 있습니다.\n //(예시: 만약 주어진 배열이 [1, 3, 6, 13, 54] 라면 superIncreasing 조건에 만족하기 때문에 여러분의 함수는 true를 반환해야 합니다. // 만약 superIncreasing 조건에 만족하지 않는다면 여러분의 함수는 false를 반환해야 합니  My_Soultion function superIncreasing(arr) { // 1. arr 안에 0번째 요소를 비교할 대상으로 사용하기 위해 변수에 담는다. // 2. for 문을 사용하여 배안안에 길이가 끝날때까지 만큼 조건을 걸어둔다. // [1, 3, 6, 13, 54] let num = arr[0]; // 1 for (let i = 0; i \u0026lt; arr.length -1; i = i + 1 ) { // 4 if (num \u0026gt; arr[i+1]) { // 1 \u0026gt; 3 return false; } else { num = num + arr[i]; } } return true }  Quesiton multiplicativePersistence  양의 정수가 주어졌을때, multiplicativePersistence(num) 함수는 주어진 수의 각 자리의 숫자를 곱했을때 한 자릿수가 될때까지의 계산 횟수를 반환합니다.\n //예시: 만약 입력값이 39라면, 여러분의 함수는 3을 반환해야 합니다. //왜냐하면 //3 * 9 = 27 //그리고 2 * 7 = 14 // 그리고 마지막으로 1 * 4 = 4 이므로 한 자리가 될 때까지 총 3번의 계산을 하기 때문입니다.  My_Soultion function multiplicativePersistence(num) { /* 0. 숫자를 문자열로 바꾼다. 1. 입력값(숫자)가 한 자리인가? 1-1. No -\u0026gt; 한 글자씩 나눠서 배열로 만든다. 배열을 도는 반복문을 만드는데, 새 변수를 1로 저장하고 새 변수에 하나씩 곱해준다. (여기서 숫자로 바꿔줌) 곱해준 값이 한 자리인지 다시 진단한다. */ let count = 0; while(num.toString().length \u0026gt; 1){ let resultVal = 1 count = count + 1 for (let i=0; i\u0026lt;num.toString().length; i++){ resultVal = resultVal * Number(num.toString()[i]); } num = resultVal; } return count; }  Question letterCapitalize  letterCapitalize(str)는 문자열을 parameter로 받는 함수로, 문자열의 각 단어의 첫번째 글자를 대문자로 만듭니다.\n  output  letterCapitalize(\u0026quot;hello world\u0026quot;); // \u0026quot;Hello World\u0026quot; letterCapitalize(\u0026quot;javascript is sexy\u0026quot;) // \u0026quot;Javascript Is Sexy  My_Soultion function letterCapitalize(str) { // Your code here // \u0026quot;Hello World\u0026quot; let strArr = str.split(\u0026quot; \u0026quot;); let newArr = []; for (let i =0; i \u0026lt; strArr.length; i ++ ) { let element = strArr[i].replace(strArr[i][0],strArr[i][0].toUpperCase()); newArr.push(element); } return newArr.join(\u0026quot; \u0026quot;); }  Question powerOfTwo  powerOfTwo (num) 함수는 num parameter를 가져와서 정수이며, 동시에 2의 거듭제곱이면 true를 반환합니다.\n My_Soultion function powerOfTwo(num) { // 함수를 계속 실행해서 num 1이면 true // 정수이면, / 2 한 num 다시 poweroftwo() // 재귀함수로 debugger; // 디버거 if(num === 1) { return true; } else if(Number.parseInt(num / 2)) { num = num / 2; return powerOfTwo(num); } return false; } powerOfTwo(16); // true가 반환되어야 함  Question JSON.stringfy 함수 만들기 * 2. stringfyJSON은 아래와 같이 작동합니다. * * * - Bolean이 input으로 주어졌을 경우 * stringifyJSON(true); // 'true' * * * - String이 input으로 주어졌을 경우 * stringifyJSON('foo'); // '\u0026quot;foo\u0026quot;' * * * - Array가 input으로 주어졌을 경우 * stringifyJSON([1, 'false', false]); // '[1,\u0026quot;false\u0026quot;,false]' * * * - Object가 input으로 주어졌을 경우 * stringifyJSON({ x: 5 }); // '{\u0026quot;x\u0026quot;:5}' * * * - undefind, function이 주어졌을 경우 * stringifyJSON(undefined) // undefined * stringifyJSON(function(){}) // undefined * * * stringifyJSON({ x: undefined, y: function(){} }) // '{}' * * 3. spec/fixtures.js를 참고해서 테스트에서 어떤 input 값들이 * 주어지고, 어떻게 stringify해 주어야할지 생각해 보세요. * * 4. 그냥 테스트 통과를 하고 싶으시다면, 다음과 같이 구현하면 될거예요. * const stringifyJSON = JSON.stringify; * * 하지만 이 과제의 목적은 재귀를 공부하는 것이니, 처음부터 구현해봐야겠지요?: */  My_Soultion function stringifyJSON(obj) { let result = [] ; // boolean or 숫자로 받는다면? if(typeof obj === 'boolean' || typeof obj === 'number') { return String(obj); } // 만약 값이 없다면 if (obj === null ) { return 'null'; } // string으로 받는다면 else if (typeof obj === \u0026quot;string\u0026quot;) { return '\u0026quot;' + obj + '\u0026quot;'; } // 배열로 받는다면 else if (Array.isArray(obj)) { for( let i = 0; i \u0026lt; obj.length; i++ ) { // result.push(obj[i]); // 왜 여기서 push obj[i]를 안하고 // stringifyJOSN(obj[i]) result.push(stringifyJSON(obj[i])) } return \u0026quot;[\u0026quot; + result + \u0026quot;]\u0026quot;; } // 객체로 받는다 else if (typeof obj === 'object') { for (let propo in obj) { if(obj[propo] !== undefined \u0026amp;\u0026amp; typeof obj[propo] !== 'function'){ // 왜 이것은 안되고 // result.push(\u0026quot;'\u0026quot; + propo + \u0026quot;'\u0026quot; + ':' + \u0026quot;'\u0026quot; + obj[propo] + \u0026quot;'\u0026quot;); // 이것은 될까요? result.push(stringifyJSON(propo) + ':' + stringifyJSON(obj[propo])); } } return '{' + result + '}'; } };  Question  Broswer에 존재하는 document.getElementsByClassName 함수를 직접 구현해봅니다.\ngetElementsByClassName 함수는 현재 documnet에서 주어진 className을 가지고 있는 모든 html element를 찾는 함수입니다.\n결과는 항상 배열의 형태로 리턴해줍니다.document.body, element.childNodes, element.classList를 사용해보세요\n My_Soultion // 이것을 다른 재귀로 구현하세요 function getElementsByClassName (className) { return document.getElementsByClassName(className); }; // document.body.classList == \u0026gt; 배열형태 but typeof 는 object // document.body.childNodes == \u0026gt; 배열형태 but typeof 는 object // document.body.children == \u0026gt; 배열형태 but typeof 는 object function getElementsByClassName(className) { let result = []; let rootElement = document.body; function recursion(rootElement){ if(rootElement.classList \u0026amp;\u0026amp; rootElement.classList.contains(className)) { result.push(rootElement); } if(rootElement.hasChildNodes()){ // rootElement.children.length 사용해도됨 for(let i=0; i\u0026lt;rootElement.childNodes.length; i++){ recursion(rootElement.childNodes[i]); } } } recursion(rootElement); // 이것이 첫번째로 호출??? return result; };  Question shuffle 함수 만들기 My_Soultion // 배열 내용의 순서를 랜덤하게 변경합니다. // TIP: 이 함수는 immutable해야 합니다. function shuffle(array) { let shuffleArr = array.slice(); let i,j,k; for ( i = shuffleArr.length-1; i \u0026gt; 0; i--) { j = Math.floor(Math.random()*(i+1)); k = shuffleArr[i]; shuffleArr[i] = shuffleArr[j]; shuffleArr[j] = k; } return shuffleArr; };  Question flatten 함수 만들기  convert nested (2-dimensional) array to flatten array! (2차원 배열을 1차원 배열로 전환하세요.)\n flatten([1,2,[3],[4]]); // [1,2,3,4]  My_Soultion function flatten (array){ //your solution here // 1. 재귀함수 사용 let ret = []; // 새로운 배열은 만든다. // 재귀함수 function filtered(array) { // (1).array 의 각각의 요소에 접근한다. [1,2,[11,25,21,34],[4]] // (5). array 의 각각의 요소에 접근한다. [11,25,21,34] for(let i = 0 ; i \u0026lt; array.length; i ++ ) { // (2)만약 요소가 array 안에 array 가아니면 [1,2] // (6)만약 요소가 array 안에 array 가 아니면 [11,25,21,34] if (!Array.isArray(array[i])){ // (3)새로만든 배열안에 합친다. ret = [1,2] // (7)새로만든 배열안에 합친다. ret = [1,2,11,25,21,34] ret = ret.concat(array[i]); // (4)만약 array 안에 array 가 발견되면 // array는 array안에 있는 array로 담기고 // filtered(array) 가 실행된다. } else { filtered(array[i]); } } } filtered(array); return ret; } // reduece 사용해서 풀기 return array.reduce(function(accu,curr){ return accu.concat(curr) },[]); }  Question  bugInApple Find out \u0026ldquo;B\u0026rdquo;(Bug) in a lot of \u0026ldquo;A\u0026rdquo;(Apple). (수많은 \u0026ldquo;A\u0026rdquo;(Apple) 사이에서 \u0026ldquo;B\u0026rdquo;(Bug)를 찾으세요.)\nThere will always be one bug in apple, not need to consider the situation that without bug or more than one bugs. (사과(apple) 사이에는 언제나 항상 한개의 벌레(bug)가 있으므로 벌레가 없는 경우나 한개 이상인 경우는 고려하지 않으셔도 됩니다.)\n //Note: 2-dimesional Array will be input. (노트: 2차원 배열이 매개변수로 주어집니다.) input: [[\u0026quot;A\u0026quot;,\u0026quot;A\u0026quot;,\u0026quot;A\u0026quot;,\u0026quot;A\u0026quot;,\u0026quot;A\u0026quot;],[\u0026quot;A\u0026quot;,\u0026quot;B\u0026quot;,\u0026quot;A\u0026quot;,\u0026quot;A\u0026quot;,\u0026quot;A\u0026quot;],[\u0026quot;A\u0026quot;,\u0026quot;A\u0026quot;,\u0026quot;A\u0026quot;,\u0026quot;A\u0026quot;,\u0026quot;A\u0026quot;],[\u0026quot;A\u0026quot;,\u0026quot;A\u0026quot;,\u0026quot;A\u0026quot;,\u0026quot;A\u0026quot;,\u0026quot;A\u0026quot;],[\u0026quot;A\u0026quot;,\u0026quot;A\u0026quot;,\u0026quot;A\u0026quot;,\u0026quot;A\u0026quot;,\u0026quot;A\u0026quot;]] output: [1,1]  My_Soultion let bugInApple = function(array) { var location = []; for ( var i = 0; i \u0026lt; array.length ; i++) { for ( var j = 0; j \u0026lt; array[i].length ; j++) { if (array[i][j] === \u0026quot;B\u0026quot;) { location.push(i); location.push(j); } } } return location; }  Question  using the JavaScript language, have the function firstReverse(str) take the str parameter being passed and return the string in reversed order.\n(firstReverse(str) 함수를 작성하세요. 문자열(str)이 주어졌을때, firstReverse(str) 함수는 주어진 문자열을 역순으로 반환합니다.)\n firstReverse My_Soultion function firstReverse(str) { // code here ... :) // str = \u0026quot;code\u0026quot; // str.split('') // [\u0026quot;c\u0026quot;, \u0026quot;o\u0026quot;, \u0026quot;d\u0026quot;, \u0026quot;e\u0026quot;] // str.split('').reverse(); //[\u0026quot;e\u0026quot;, \u0026quot;d\u0026quot;, \u0026quot;o\u0026quot;, \u0026quot;c\u0026quot;] // str.split('').reverse().join('') // \u0026quot;edoc\u0026quot; return str.split('').reverse().join(''); }  Question  Using the JavaScript language, have the function ABCheck(str) take the str parameter being passed and return the true if the characters a and b are separated by exactly 3 places anywhere in the string at least once Otherwise return the false.\n(ABCheck(str) 함수를 작성하세요. 문자열(str)이 주어졌을때, ABCheck(str) 주어진 문자열에서 함수는 문자 a 와 b 사이가 문자열 안에서 한번이라도 정확히 3글자 떨어져 있으면 true를 반환하고 그렇지 않은 경우는 모두 false 를 반환합니다.)\n My_Soultion function ABCheck(str) { // code goes here // lane Borrowed // true otherwise false; // 대문자를 소문자로 바꾼다. // str 의 각chr 를 접근한다. // a 를 발견하면 인덱스 번호를 착출한다 변수에 담는다. . // b 를 발견하면 인덱스 번호를 착출한다 변수에 담는다/ // 만약 a 와 b if (str === undefined) { return false; } str = str.toLowerCase(); for (let i = 0; i \u0026lt; str.length; i ++ ) { if (str[i] === \u0026quot;a\u0026quot; \u0026amp;\u0026amp; str[i + 4] === \u0026quot;b\u0026quot;) { return true; } else if (str[i] === \u0026quot;b\u0026quot; \u0026amp;\u0026amp; str[i + 4] === \u0026quot;a\u0026quot; ) { return true; } } return false; }  Question filteredArray  return a new array that all elements passed testFunction without using filter method (filter 메소드를 사용하지 않고 testFunction 함수를 통과하는 요소로만 이루어진 배열을 반환하는 함수를 작성하세요.)\n My_Soultion function filteredArray (array, testFunction) { let result = []; // 출력할 빈 배열을 만든다. for (let i = 0; i \u0026lt; array.length; i ++ ) { // loop 를 돌면서 testFunction 안에 parameter 를 넣었을때 동작한다면 if (testFunction(array[i])){ // 그값을 새로운 array 넣어서 저장한다. result.push(array[i]) } } return result; }  Qeustion  다차원 배열을 가져와서, 1차원 배열로 변환합니다.\n새 배열에는 다차원 배열의 모든 요소가 포함되어야 합니다\u0008.\n flatten 함수 만들기 My_Soution // for 문을이용한 것 function flatten (nestedArray) { //[1, [2], [3, [[[4]]]]] //oneflat([1, [2], [3, [[[4]]]]]) // result = [1, 2, 3, [[[4]]]] // result = [1, 2, 3, 4] let oneflat = function(array) { let resultArr = [] for (let i in array) { if (Array.isArray(array[i])) { resultArr = resultArr.concat(array[i]); } else { resultArr.push(array[i]); } } return resultArr; } let isinArr = function(array) { for (let i in array) { if (Array.isArray(array[i])) { return true; } } return false; } while(isinArr(nestedArray)) { nestedArray = oneflat(nestedArray); } return nestedArray; }; function flatten (nestedArray, result) { // 재귀를 이용한것 result = []; function flatarr(nestedArray) { for(let i = 0; i \u0026lt; nestedArray.length; i++) { if(!Array.isArray(nestedArray[i])) { result = result.concat(nestedArray[i]) } else { flatarr(nestedArray[i]); } } } flatarr(nestedArray); return result; };  Qeustion delay 함수 만들기 My_Soultion // 주어진 시간 (밀리초) 동안 함수를 지연한 다음 제공된 argument로 함수를 호출합니다. // // 원래 함수에 대한 argument는 wait parameter 뒤에 전달됩니다. // 예를 들어, 다음을 호출할 경우 // _.delay(someFunction, 500, 'a', 'b'); // someFunction('a', 'b') 은 500ms 이후에 호출됩니다. _.delay = function(func, wait, ...args) { setTimeout(function(){ return func(...args); } ,wait); };  Qeustion 최대 한번만 호출할 수 있는 함수 만들기 My_Soultion function once(func) { // ... agrgs 사용한 함수 var alreadyCalled = false; let result; return function(...args) { if (!alreadyCalled) { alreadyCalled = true; result = func(...args); } return result; }; }; // this 와 arguments 와 apply 를 사용한 함수 let alreadyCalled = false; let result; return function() { if(alreadyCalled) { return result } else { alreadyCalled = true return result = func.apply(this, arguments); } } };  Qeustion 갹채를 함쳐주는 함수 만들기 2 (key 덮어쓰지 않기 ) My_Soultion // extend와 비슷하지만, 이번엔 이미 존재하는 key에 대해 값을 덮어쓰기 하지 않습니다. function defaults (obj,...objs) { for (let i = 0; i \u0026lt; objs.length; i ++ ) { for (let prop in objs[i]){ // 만약 기존에있는 obj 의 키값이 새로 더해진 obj 에 없다면 if (!(prop in obj)) { // 기존에 있는 obj 의 push 해준다. obj[prop] = objs[i][prop]; } } } return obj; }  Qeustion 갹채를 함쳐주는 함수 만들기 My_Souliton extend = function(obj, ...objs) { //객체를 합쳐주는 함수를 만들어보자 for (let i = 0; i \u0026lt; objs.length; i ++ ) { for (let prop in objs[i] ) { obj[prop] = objs[i][prop]; } } return obj; } // other_Soultion for(let i = 0; i \u0026lt; arguments.length; i++) { for(let key in arguments[i]) { obj[key] = arguments[i][key] } } return obj; };  Qeustion some 함수 만들기 My_Soultion // element가 하나라도 iterator에 의해 truthy한지 체크합니다. // iterator가 없다면, element 그 자체가 truthy한지 체크하세요. function some(collection, iterator) { if(iterator === undefined) { // 이것을 왜하는지 ? for(let i = 0 ; i \u0026lt; collection.length ; i++) { if(Boolean(collection[i]) === true) { return true; } } } else if (iterator) { // 이것은 왜? for (let j = 0 ; j \u0026lt; collection.length ; j++) { if (Boolean(iterator(collection[j])) === true) { return true; } } } return false; };  Qeustion every 함수 만들기 My_Soultion // 모든 element가 iterator에 의해 truthy한지 체크합니다. function every(collection, iterator) { // function every(collection,iterator) // collection.every(terator(value, key, collection)) ??? if(iterator === undefined) { // 이것을 왜하는지 ? for(let i = 0 ; i \u0026lt; collection.length ; i++) { if(Boolean(collection[i]) === false) { return false; } } } else if (iterator) { // 이것은 왜? for (let j = 0 ; j \u0026lt; collection.length ; j++) { if (Boolean(iterator(collection[j])) === false) { return false; } } } return true; };  Qeustion contains 함수 만들기 My_Soultoin //배열 또는 객체가 주어진 값을 포함하는지 체크합니다. (`===` 연산자를 사용해서 판단합니다.) _.contains = function(collection, target) { for (let i in collection ) { if (collection[i] === target ){ return true } } return false; } // 다른 깔끔한 방법 // each 방법을 써서.. if (Array.isArray(collection)) { for (let i = 0; i \u0026lt; collection.length; i ++ ) { if (collection[i] === target) { return true; } else { return false; } } } else { for (let prop in collection) { if (collection[prop] === target) { return true; } else { return false; } } }  Question reduce // 각 항목에 대해 iterator(accumulator, item)를 반복적으로 호출하여, Reduces an array to a single value by repetitively calling // 하나의 값으로 줄입니다. accumulator는 누적값으로, 이전 iterator 호출의 반환값이어야 합니다. // // reduce에 대한 세번째 argument로 초기값을 전달 할 수 있습니다. // 만일 초기값이 전달되지 않으면, 첫번재 element가 accumulator로 사용되며, iterator에 전달되지 않습니다. // 즉, 초기값이 전달되지 않은 경우, iterator는 두번째 element로부터 시작합니다. // // 예제: // const numbers = [1,2,3]; // const sum = _.reduce(numbers, function(total, number){ // return total + number; // }, 0); // 6이 리턴됩니다 // // const identity = _.reduce([5], function(total, number){ // return total + number * number; // }); // 5가 리턴됩니다, 전달한 iterator와 관계없이, 첫번째 element가 즉시 사용됩니다.  My_Soultion _.reduce = function(collection, iterator, accumulator) { // 1. 내가 생각 방법 let i=0; if (accumulator === undefined) { accumulator = collection[0]; i++; } for(i; i\u0026lt;collection.length; i++) { accumulator = iterator(accumulator, collection[i]); } return accumulator; } // accumulator가 undefined면 : accumulator에게 첫 번째 collection값을 넣고, // 그 후 i++를 통해 collection[0]이 아닌 collection[1]부터 iterator가 돌아감 //  Question billTotal  Write a function called billTotal that can be used to calculate the total to be paid at a restaurant \u0026ndash; including tip and tax \u0026ndash; given the subtotal (i.e. cost of food and drinks). We can assume that the tip will be 15% and tax will be 9.5%. Make sure that the tip does not include the tax!\n - input: a number representing the cost of food and drinks - output: a number representing that cost plus an additional 15% tip and tax of 9.5%  My_Soultion function billTotal(subtotal) { // YOUR CODE HERE // tip 15% = * 0.15 // tax 9.5% = * 0.095 // tip을 얼마 냈는지 조사후 변수에 저장 // tax를 얼마나 냈는지 조사후 변수에 저장 // tip \u0026amp; tax \u0026amp; subtotal 더한값을 출력 let tip = subtotal * 0.15 let tax = subtotal * 0.095 return subtotal + tip + tax; } billTotal(10.00); // =\u0026gt; 12.45  Question multiplyBetween  Write a function called \u0026ldquo;multiplyBetween\u0026rdquo;. (\u0026ldquo;multiplyBetween\u0026rdquo; 함수를 작성하세요.)\nGiven 2 integers, \u0026ldquo;multiplyBetween\u0026rdquo; returns the product between the two given integers, beginning at num1, and excluding num2. (두 정수가 주어졌을때, \u0026ldquo;multiplyBetween\u0026rdquo; 함수는 첫번째 숫자부터 두번째 숫자 전까지 모든 수를 곱한 값을 반환합니다.)\n let output = multiplyBetween(2, 5); console.log(output); // --\u0026gt; 24  My_Soultion function multiplyBetween(num1, num2) { // your code here let arr = []; if (num2 \u0026lt; num1 || num1 === num2 ) { return 0; } else { while( num1 \u0026lt; num2 ) { arr.push(num1); num1 = num1 + 1; } } console.log(arr); return arr.reduce(function(acc,cur){ return acc * cur; }) }  Question computeSquareRoot  Write a function called \u0026ldquo;computeSquareRoot\u0026rdquo;. (\u0026ldquo;computeSquareRoot\u0026rdquo; 함수를 작성하세요.)\nGiven a number, \u0026ldquo;computeSquareRoot\u0026rdquo; returns its square root. (숫자가 주어졌을때, \u0026ldquo;computeSquareRoot\u0026rdquo; 함수는 해당 수의 제곱근 값을 반환합니다.)\n let output = computeSquareRoot(9); console.log(output); // --\u0026gt; 3   Do not use Math.sqrt(); for this problem. Instead, use this iterative way of solving the problem: (Math.sqrt()를 사용하지 말고, 아래 링크에서 나온 방법을 통해 해결하세요.)\n My_Soultion unction computeSquareRoot(num) { let square = 1; let i = 0; while(true){ i = i + 1 square = (num / square + square) / 2; if(i=== num + 1) { break; } } return Number(square.toFixed()); } /* - doc 파일에 있는 내용 정리 5 / 2 = 2.5 -\u0026gt; 다음줄 2.5에 5/2를 대입 (2 + 2.5) / 2 = 2.25 -\u0026gt;(2+ (5/2)) / 2 = 2.25 = x + (num/x) / 2 5 / 2.25 = 2.222... (2.25 + 2.222...) / 2 = 2.36111... 5 / 2.236111... = result */ /* !질문란 9를 넣으면 3이 나오지만, 4를 넣으면 2.000000000000002 이 계속나오길래 .toFixed()를 이용해서 소수점을 제거하여 결과값은 잘나오는데 테스트는 계속 fail로 나옵니다ㅠㅠ toFixed()를 지우면 4를 넣었을시만 통과가 안되구요! 어떻게 해야할까요?ㅠㅠ */ // 처음에 square를 1로 선언해주셨는데, square는 단순히 1이 아닌, // 저희가 input으로 받은 값보다 같거나 작은 제곱수 중 가장 큰 값을 만들 수 있는 수가 되어야할 것 같습니다. // 예를들어 5가 주어졌을 때 5보다 작은 제곱수는 4 square는 2 // 10이라면 10보다 작은 제곱수는 9 square는 3이 되어야할 것 같습니다.  Question modulo  Write a function called \u0026ldquo;modulo\u0026rdquo;. (\u0026ldquo;modulo\u0026rdquo; 함수를 작성하세요.)\nGiven 2 numbers, \u0026ldquo;modulo\u0026rdquo; returns the remainder after dividing num1 by num2. (두 숫자가 주어졌을때, \u0026ldquo;modulo\u0026rdquo; 함수는 첫번째 수를 두번째 수로 나눴을때 나머지 값을 반환합니다.)\n let output = modulo(25, 4); console.log(output); // --\u0026gt; 1  My_Soultion function modulo(num1, num2) { // num1 = 25 num2 = 4 if (isNaN(num2) || num2 === 0) { return NaN; } // plusMinus 변수는 만약 첫번째 숫자가 plus 이면 마지막에 플러스를 마이너스를 표시하기 위해 // 미리 변수를 지정해둔다. // 만약 num1 이 0보다 크면 plusMinus = 1 // 만약 num2 가 0 보다 작으면 plusMinus = -1 let plusMinus = num1 \u0026gt; 0 ? 1 : -1; // 이부분이 이해가 안됨. num1 = Math.abs(num1); num2 = Math.abs(num2); while (num1 \u0026gt;= num2) { // 25 \u0026gt;= 4 num1 = num1 - num2; // 24 - 4 계속 빼면 = num1 = 1 } return num1 * plusMinus; // 1 * plusMinus ( 1 ) }  Question unique Return a duplicate-free version of the collection. You don't need to care about non-primitive type elements. Array will be contained only primitive type values. (string, number, boolean)  My_Soultion unction unique(array) { // your code here let newArr = [] for (let i = 0; i \u0026lt; array.length; i ++ ) { if (!newArr.includes(array[i])){ newArr.push(array[i]); } } return newArr; } // 1. other_Soultion // function unique(array) { // // your code here // return array.reduce(function(acc, curr){ // if(!acc.includes(curr)){ // acc.push(curr); // return acc; // } else { // return acc; // } // }, []); // } // 2. other_Soultion // function unique(array) { // // your code here // return Array.from(new Set(array)) // }  Question tenThousandClub # tenThousandClub Write a function, tenThousandClub, that takes in an array of information, salesTeam, and returns an array that lists the full names of each member of the sales team that has sales greater than $10,000. Make sure the first and last names are separated by a space. Hint: I recommend you write a helper function, salesToNumber, that converts the sales string to a number. Feel free to look up parseInt() and slice() on MDN if you don't remember how they work. - output: an array that lists the full names of each member of 10,000 club  My_Soultion function tenThousandClub(salesTeam){ // your code here // function salesToNumber(salesString){ // //get rid of dollar sign: // let number = salesString.split('').splice(1) // return parseInt(number.join('')); // } let newobj = salesTeam.filter(function(ele){ return salesToNumber(ele.sales) \u0026gt;= 10000; }).map(function(ele){ return `${ele.name.first} ${ele.name.last}`; }); return newobj; } // \u0026quot;$1234\u0026quot; string to Number 숫자로 바꾸기 바꾸기 // it's me function salesToNumber(salesString){ //get rid of dollar sign: let number = salesString.split('').splice(1) return parseInt(number.join('')); } // other's // function salesToNumber(salesString){ // //get rid of dollar sign: // return Number(salesString.slice(1)); // } // other's // function salesToNumber(obj){ // return Number.parseInt(obj.sales.slice(1)); // }  Question sumConsecutives You are given a list/array which contains only integers (positive and negative). Your job is to sum only the numbers that are the same and consecutive. The result should be one list. Examples: [1,4,4,4,0,4,3,3,1] should return [1,12,0,4,6,1] So as you can see sum of consecutives 1 is 1 sum of 3 consecutives 4 is 12 sum of 0... and sum of 2 consecutives 3 is 6 ... [1,1,7,7,3] should return [2,14,3] [-5,-5,7,7,12,0] should return [-10,14,12,0] - output: an reduced array  My_Soultion function sumConsecutives(s) { // your code here //[1,4,4,4,0,4,3,3,1] should return [1,12,0,4,6,1] let ret = []; // 마지막에 출력할 result 배열을 만든다. let sum = 0; // sum 이라는 것을 0 으로 초기화 시킨다. for(let i = 0; i \u0026lt; s.length; i++) { // 첫번째 loop sum = 0 + 1 // 두번째 loop sum = 0 + 4 // 3번째 loop sum = 4 + 4 // 초기화 되지 않은 sum 과 다음에 나오르 4 를 합한다. sum = sum + s[i]; // 첫번째 loop // 만약 0번째있는 숫자 1과 1번째의 숫자4가 같지 않다면 // 조건문 1 을 ret 에 집어넣는다 [1] // 조건문 sum 이라는 것을 다시 0으로 초기화 한다. // 두번째 loop // 1번째 있는 4와 2번째 있는 4와 같으므로 조건문에 해당이 안된다. // sum 이 초기화 되지 않은채 위로 올라간다. if(s[i] !== s[i + 1]) { ret.push(sum) // 위에있는 sum 을 우선 채우고 sum = 0; // sum 을 다시 초기화 한다. } } return ret; }  Question oldest # oldest Write a function, oldest, that takes in an array of information, salesTeam, and returns a sentence with the person's first and last name, e.g. \u0026quot;The oldest student is Tina Fey\u0026quot;. If there is a tie for the oldest student, return the student whose name appears first in the salesTeam array. - output: a string value with name of oldest person  My_Soultion function oldest(salesTeam){ // 먼저 배열안에 객체에 접근해서 모든 나이를 뽑아서 배열어 넣는다.. // 나이중에 가장 높은 숫자를 변수에 담는다. // 변수에 담긴 가장 높은 숫자와 배열안에 객체에 나이가 같다면 first name 과 last name 을 가져온다. var ageArr = salesTeam.map(function(ele){ return ele.age; }) var max = ageArr.reduce(function(a,c){ return Math.max(a,c); }); var fullName = []; salesTeam.forEach(function(ele){ if ( ele.age === max) { fullName.push(`${ele.name.first} ${ele.name.last}`) } }) return \u0026quot;The oldest student is \u0026quot; + fullName.join(\u0026quot; \u0026quot;); }  Question isAgeDiverse You will be given an array of objects representing data related to their age and total sales. Your task is to return: - `true` if members from all of the following age groups: teens, twenties, thirties, forties, fifties, sixties, seventies, eighties. - `false` otherwise. Your function should return true as there is at least one member from each age group. - output: a boolean value representing whether the age range is diverse  My_Soultion var isAgeDiverse = function(list) { // group 이 10-80 까지 는 true 리턴 // 아니라면 false 리턴 var ageArr = list.map(function(ele){ return ele.age; // [26, 55, 29, 53, 19, 25, 26] }); for (let i = 0; i \u0026lt; ageArr.length; i = i + 1 ) { if (ageArr[i] \u0026gt;= 10 \u0026amp;\u0026amp; ageArr[i] \u0026lt; 90) { return true; } else { return false; } }; }; // other code here // 팀원이 10대~80대 면 true를 반환해라. // function filtering(el){ // 클로져를 써보자 // return el.age \u0026gt;= 10 \u0026amp;\u0026amp; el.age \u0026lt; 90 // } // // every를 써서 모두가 맞는지 확인한다. // return list.every(filterin  Question getTeenager  Write a function, getTeenager, that takes in an array of information, salesTeam, and returns an array that lists the full names of each member of the sales team that is a teenager.\n Make sure the first and last names are separated by a space. Notes: - moving through each element of the array. - check if they are a teenager (\u0026lt; 20). - if they're a teenager, store their full name, separated by a space into the array. * * * - output: an array that lists the full names of each member of the sales team that is a teenager  My_Soultion function getTeenager(salesTeam) { let teenager = []; for(let i=0; i \u0026lt; salesTeam.length; i++) { let fullName = salesTeam[i].name.first + ' ' + salesTeam[i].name.last; if(salesTeam[i].age \u0026lt; 20) { teenager.push(fullName) } } return teenager; }  other_Soultion function getTeenager(salesTeam) { // your code here let teenager = salesTeam.filter(function(ele){ return ele.age \u0026lt; 20; }); let result = []; teenager.forEach(function(ele){ result.push(`${ele.name.first} ${ele.name.last}`); }); return result; }  Question sumDigits  Write a function called \u0026ldquo;sumDigits\u0026rdquo;. (\u0026ldquo;sumDigits\u0026rdquo; 함수를 작성하세요.)\nGiven a number, \u0026ldquo;sumDigits\u0026rdquo; returns the sum of all its digits. (숫자가 주어졌을때, \u0026ldquo;sumDigits\u0026rdquo; 함수는 숫자의 각 자리수를 모두 더한 값을 반환합니다.) k\n My_Soultion function sumDigits(num) { let sum = 0; let stringNumArr = num.toString().split(''); for (let i = 0; i \u0026lt; stringNumArr.length; i++) { if (stringNumArr[0] === '-' \u0026amp;\u0026amp; i === 1) { sum = sum - Number(stringNumArr[1]); } else if (stringNumArr[i] !== '-') { sum = sum + Number(stringNumArr[i]); } } return sum; }  Question offLineMinimum  Have the function offLineMinimum(strArr) take the strArr parameter being passed which will be an array of integers ranging from 1\u0026hellip;n and the letter \u0026ldquo;E\u0026rdquo; and return the correct subset based on the following rules.\nThe input will be in the following format: [\u0026quot;I\u0026quot;,\u0026quot;I\u0026quot;,\u0026quot;E\u0026quot;,\u0026quot;I\u0026quot;,...,\u0026quot;E\u0026quot;,...,\u0026quot;I\u0026quot;] where the I\u0026rsquo;s stand for integers and the E means take out the smallest integer currently in the whole set. When finished, your program should return that new set with integers separated by commas.\n My_Soultion function offLineMinimum(strArr) { let numArr=[]; let resultArr=[]; // [\u0026quot;5\u0026quot;,\u0026quot;4\u0026quot;,\u0026quot;6\u0026quot;,\u0026quot;E\u0026quot;,\u0026quot;1\u0026quot;,\u0026quot;7\u0026quot;,\u0026quot;E\u0026quot;,\u0026quot;E\u0026quot;,\u0026quot;3\u0026quot;,\u0026quot;2\u0026quot;] for(let i=0; i\u0026lt; strArr.length; i++){ // 만약 E와 같지 않다면 if (strArr[i] !== 'E') { // 이코드는 7번 실행된다 왜냐하면 E 가 3개만 있기 때문이다. numArr.push(strArr[i]); // (1) [\u0026quot;5\u0026quot;] // (2) [\u0026quot;5\u0026quot;, \u0026quot;4\u0026quot;] // (3) [\u0026quot;5\u0026quot;, \u0026quot;4\u0026quot;, \u0026quot;6\u0026quot;] // (4) [\u0026quot;5\u0026quot;, \u0026quot;6\u0026quot;, \u0026quot;1\u0026quot;] // (5) [\u0026quot;5\u0026quot;, \u0026quot;6\u0026quot;, \u0026quot;1\u0026quot;, \u0026quot;7\u0026quot;] // (6) [\u0026quot;6\u0026quot;, \u0026quot;7\u0026quot;, \u0026quot;3\u0026quot;] // (7) [\u0026quot;6\u0026quot;, \u0026quot;7\u0026quot;, \u0026quot;3\u0026quot;, \u0026quot;2\u0026quot;] // // 만약 E와 같다면 } else if(strArr[i] === 'E') { let smallNum = numArr.reduce(function(acc,curr){ // 첫번째 \u0026quot;E\u0026quot; 나오면 numArr = [\u0026quot;5\u0026quot;,\u0026quot;4\u0026quot;,6] 작은수 =\u0026gt; \u0026quot;4\u0026quot; // 두번째 \u0026quot;E\u0026quot; 나오면 numArr = [\u0026quot;5\u0026quot;, \u0026quot;6\u0026quot;, \u0026quot;1\u0026quot;, \u0026quot;7\u0026quot;] 작은수 =\u0026gt; \u0026quot;1\u0026quot; // 세번째 \u0026quot;E\u0026quot; 나오면 numArr = [\u0026quot;5\u0026quot;,\u0026quot;6\u0026quot;,\u0026quot;7\u0026quot;] 작은수 =\u0026gt; \u0026quot;5\u0026quot; // smallNum = [\u0026quot;4\u0026quot;,\u0026quot;1\u0026quot;,\u0026quot;5\u0026quot;] 3번에 담긴다 가장 작은수들이 coz E를 3번 찾았기 때문에 if(acc \u0026lt; curr){ return acc; } else { return curr; } }); // 첫번째 \u0026quot;E\u0026quot; 나오면 smallNum = \u0026quot;4\u0026quot; // 두번째 \u0026quot;E\u0026quot; 나오면 smallNum = \u0026quot;1\u0026quot; // 세번째 \u0026quot;E\u0026quot; 나오면 smallNum = \u0026quot;7\u0026quot; // resultArr 에 [\u0026quot;4\u0026quot;,\u0026quot;1\u0026quot;,\u0026quot;7\u0026quot;]; 담긴다. resultArr.push(smallNum); // 첫번째 \u0026quot;E\u0026quot; 나오면 [\u0026quot;5\u0026quot;,\u0026quot;4\u0026quot;,\u0026quot;6\u0026quot;].splice(1,1) // \u0026quot;4\u0026quot; 삭제됨 // 두번째 \u0026quot;E\u0026quot; 나오면 [\u0026quot;5\u0026quot;, \u0026quot;6\u0026quot;, \u0026quot;1\u0026quot;, \u0026quot;7\u0026quot;].splice(2,1) // \u0026quot;1\u0026quot; 삭제됨 // 세번째 \u0026quot;E\u0026quot; 나오면 [\u0026quot;5\u0026quot;,\u0026quot;6\u0026quot;,\u0026quot;7\u0026quot;].splice(0,1) // \u0026quot;5\u0026quot; // \u0026quot;5\u0026quot; 삭제됨 numArr.splice(numArr.indexOf(smallNum),1); } } return resultArr.join(','); // 마지막으로 \u0026quot;4,1,5\u0026quot; =\u0026gt;\u0026gt;,나눠서 함친다. } offLineMinimum([\u0026quot;1\u0026quot;,\u0026quot;2\u0026quot;,\u0026quot;E\u0026quot;,\u0026quot;E\u0026quot;,\u0026quot;3\u0026quot;]); // =\u0026gt; '1,2' offLineMinimum([\u0026quot;4\u0026quot;,\u0026quot;E\u0026quot;,\u0026quot;1\u0026quot;,\u0026quot;E\u0026quot;,\u0026quot;2\u0026quot;,\u0026quot;E\u0026quot;,\u0026quot;3\u0026quot;,\u0026quot;E\u0026quot;]); // =\u0026gt; '4,1,2,3' offLineMinimum([\u0026quot;5\u0026quot;,\u0026quot;4\u0026quot;,\u0026quot;6\u0026quot;,\u0026quot;E\u0026quot;,\u0026quot;1\u0026quot;,\u0026quot;7\u0026quot;,\u0026quot;E\u0026quot;,\u0026quot;E\u0026quot;,\u0026quot;3\u0026quot;,\u0026quot;2\u0026quot;]) // == \u0026gt; `4,1,5`  other_Soultion function offLineMinimum(strArr) { // offLinMininum은 배열에서 'E' 가 나오기 이전까지의 숫자들로 숫자의 set을 만들고 e가 등장 할 때 마다 숫자 set 중 가장 작은 수를 가지고와 리턴할 문자열에 포함시켜주는 함수이다. // 배열에서 'E'가 나오기 이전까지의 숫자들로 숫자의 Set을 만든다. --\u0026gt; numberSet // 배열에서 'E'가 등장하면, numberSet을 분류(작은 수~큰 수)하고 numberSet의 0번째 값(가장 작은 수)을 가지고와 result에 넣어준다. // 그리고 numberSet의 0번째 값은 제거해준다. // 그래야 다음 번에 'E'가 등장하면 그 요소를 제외한 나머지 값들 중에서 최소값을 구할 수 있기 때문이다. let numberSet=[]; let result=[]; for (let i = 0 ; i \u0026lt; strArr.length ; i++) { if (strArr[i] !== 'E') { numberSet.push(Number(strArr[i])); } else if (strArr[i] === 'E') { numberSet.sort(); result.push(numberSet[0]); numberSet.shift(); } } return result.join(); }  Question range  Complete the below function called range that takes two integers as parameters, start and end, and returns an array containing all the whole numbers between them starting with start and up to end (you can use a any loop)\nAfter you write your function, you can test it using the above inputs to make sure that it behaves correctly.\n My_soultion function range(start, end) { // YOUR CODE HERE // 만약 strat 와 end 같다면 \u0026amp;\u0026amp; 만약 strat 가 end 보다 작으면 [] 반환 // for 문을 사용해 start 를 초기값으로 지정하고 end 보다 작을때까지 숫자 반환 let arr = []; if ( start === end || start \u0026gt;= end ) { return []; } else { for ( let i = start; i \u0026lt; end; i = i + 1 ) { arr.push(i); } } return arr; } range(0, 4); // =\u0026gt; [0, 1, 2, 3] range(2, 7); // =\u0026gt; [2, 3, 4, 5, 6] range(10, 10); // =\u0026gt; [] range(10, 2); // =\u0026gt; []  Question longestName  Given the following array of people, write a function that, when passed people as a parameter, returns the person (that is, your function should return an object) with the longest name (first, middle \u0026amp; last). You can re-use getFullName function.\n My_Soution var people = [ {name: {first: \u0026quot;Alyssa\u0026quot;, middle: \u0026quot;P.\u0026quot;, last: \u0026quot;Hacker\u0026quot;}, age: 26}, {name: {first: \u0026quot;Ben\u0026quot;, last: \u0026quot;Bitdiddle\u0026quot;}, age: 34}, {name: {first: \u0026quot;Eva\u0026quot;, middle: \u0026quot;Lu\u0026quot;, last: \u0026quot;Ator\u0026quot;}, age: 40}, {name: {first: \u0026quot;Lem\u0026quot;, middle: \u0026quot;E.\u0026quot;, last: \u0026quot;Tweakit\u0026quot;}, age: 45}, {name: {first: \u0026quot;Louis\u0026quot;, last: \u0026quot;Reasoner\u0026quot;}, age: 21} ]; function longestName(people) { // TODO: Your code here // 심플하게 객체에 있는 키값을 prop 가져와 함친다. return Object.values(people[0].name).join(' '); } longestName(people); //\u0026quot;Alyssa P. Hacker\u0026quot;  ### Question\nhammingDistance  have the function HammingDistance(strArr) take the array of strings stored in strArr, which will only contain two strings of equal length andreturn the Hamming distance between them. The Hamming distance is the number of positions where the corresponding characters are different.\n For example: if `strArr` is `[\u0026quot;coder\u0026quot;, \u0026quot;codec\u0026quot;]` then your program should return 1.  My_Soultion function hammingDistance(strArr) { // YOUR CODE HERE // count 변수에 0으로 초기화를 시켜놓는다. // arr1 변수를 만들어 strArr 첫번째 값을 넣어둔다. // arr2 변수를 많들어 strArr 두번째 값을 넣어둔다. // while 문 이용해 arr1각각char arr2각각 Char 와 같이 않다면 count에 plus 1 증가 // 출력 count ; let count = 0; let str1 = strArr[0]; let str2 = strArr[1]; for (let i = 0; i \u0026lt; str1.length; i = i + 1 ) { if ( str1[i] !== str2[i] ) { count = count + 1; } } return count; } hammingDistance([\u0026quot;coder\u0026quot;, \u0026quot;codec\u0026quot;]); // =\u0026gt; 1 hammingDistance([\u0026quot;10011\u0026quot;, \u0026quot;10100\u0026quot;]); // =\u0026gt; 3 hammingDistance([\u0026quot;helloworld\u0026quot;, \u0026quot;worldhello\u0026quot;]); // =\u0026gt; 8  Other_Soultion strArr[0][0] !== strArr[1][0] count++ strArr[0][1] !== strArr[1][1] count++ strArr[0][2] !== strArr[1][2] count++ strArr[0][3] !== strArr[1][3] count++ strArr[0][4] !== strArr[1][4] count++ // 위를 잘 참고하여...구현해본다! // 각각 비교하면서 다른 값을 배열에 담아 개수를 리턴한다. function hammingDistance(strArr) { return strArr[0].split('').filter((char, i) =\u0026gt; char !== strArr[1][i]).length; } hammingDistance([\u0026quot;coder\u0026quot;, \u0026quot;codec\u0026quot;]); // =\u0026gt; 1 hammingDistance([\u0026quot;10011\u0026quot;, \u0026quot;10100\u0026quot;]); // =\u0026gt; 3 hammingDistance([\u0026quot;helloworld\u0026quot;, \u0026quot;worldhello\u0026quot;]); // =\u0026gt; 8 console.log(hammingDistance([\u0026quot;coder\u0026quot;, \u0026quot;codec\u0026quot;]))  Question getFullName  Write a function called \u0026lsquo;getFullName\u0026rsquo; that takes in an object which has this structure:\n My_Soultion function getFullName(obj) { // YOUR CODE HERE // 변수를 만들어 person에 있는 키의 값들을 가져와서 조합시킨다. // 변수를 출력한다. let fullName = person.name.first + \u0026quot; \u0026quot; + person.name.middle + \u0026quot; \u0026quot; + person.name.last; return fullName; } var person = { name : { first : \u0026quot;Alyssa\u0026quot;, middle: \u0026quot;P.\u0026quot;, last: \u0026quot;Hacker\u0026quot; }, age : 26 }; getFullName(person); //\u0026quot;Alyssa P. Hacker\u0026quot; var personB = { name: { first: \u0026quot;Ben\u0026quot;, last: \u0026quot;Bitdiddle\u0026quot; }, age: 34 }; getFullName(personB); //\u0026quot;Ben Bitdiddle\u0026quot;  Other_Soultion //함수 아래 케이스에 맞게 name값에 접근하여 fullName을 만든다. //하나하나 따로 뽑기보다는 value를 배열로 받아서 합치는게 편하다 :) function getFullName(obj) { return Object.values(obj.name).join(' ') }  Question billTotal  Write a function called billTotal that can be used to calculate the total to be paid at a restaurant \u0026ndash; including tip and tax \u0026ndash; given the subtotal (i.e. cost of food and drinks). We can assume that the tip will be 15% and tax will be 9.5%. Make sure that the tip does not include the tax!\n My_Soultion - input: a number representing the cost of food and drinks - output: a number representing that cost plus an additional 15% tip and tax of 9.5% function billTotal(subtotal) { // YOUR CODE HERE // tip 15% = * 0.15 // tax 9.5% = * 0.095 // tip을 얼마 냈는지 조사후 변수에 저장 // tax를 얼마나 냈는지 조사후 변수에 저장 // tip \u0026amp; tax \u0026amp; subtotal 더한값을 출력 let tip = subtotal * 0.15 let tax = subtotal * 0.095 return subtotal + tip + tax; } billTotal(10.00); // =\u0026gt; 12.45  Other_Soultion // 뭐 단순하게...팁 15%, 세금 9.5% 더해주면 된다고 한다 :) function billTotal(subtotal) { return (subtotal * 1.15 + subtotal * 0.095) } billTotal(10.00); // =\u0026gt; 12.45  Question primeMover  Have the function primeMover(n) return the n-th prime number. The range will be from 1 to 5 * 10^4; (숫자(n)가 주어졌을때, \u0026lsquo;primeMover(n)\u0026rsquo; 함수는 num 번째 소수를 반환합니다. 범위는 1에서 50,000 입니다.)\nFor example: if n is 16 the output should be 53 as 53 is the 16th prime number. (예시: 만약 n 이 16이라면, 결과값은 16번째 소수인 53 입니다.)\n My_Soultion let primeMover = function(n) { // your code here let arr = [1]; for ( let i = 1; i \u0026lt;100; i++) { for ( let j = 2; j \u0026lt; 100; j++ ) { if (j % i !== 0 ) { arr.push(j); } } } return arr[n]; }  Question isOddWithoutModulo  Write a function called \u0026ldquo;isOddWithoutModulo\u0026rdquo;. (\u0026ldquo;isOddWithoutModulo\u0026rdquo; 함수를 작성하세요.)\nGiven a number, \u0026ldquo;isOddWithoutModulo\u0026rdquo; returns whether the passed in number is odd. (숫자가 주어졌을때, \u0026ldquo;isOddWithoutModulo\u0026rdquo; 함수는 주어진 숫자가 홀수인지를 반환합니다.)\n My_Soultion // 2. it is used by Math.floor function isOddWithoutModulo(num) { // floor 메소드로 참과 거짓을 출력할뿐만 아니라 정수로 만든다. 그것을 2로 나눠서 2로 다시 곱한값이 기존에 값과 일치하지 않는다면 홀수이므로 true 반환 return Math.floor(num / 2) * 2 !== num;  Others_Soultion function isOddWithoutModulo(num) { // 예를 들어, num이 -17이라고 가정합니다. num = Math.abs(num); // num은 절대값이 되어 17이됩니다. 이를 통해 파라미터에 들어올 모든 음수를 커버할 수 있을 겁니다. if( num === 0 ) // num은 현재 17로 0이 아니기 때문에 그 다음 else if로 넘어가게 됩니다. return false; else if(num === 1) // num은 현재 17로 1이 아니기 때문에 그 다음 else로 넘어가게 됩니다. return true; else { // 보통 홀수인지 아닌지를 판별하기 위해서 2로 나누었을 대 나머지값을 확인하는 방법을 씁니다. // 그 방법을 풀어보면 17 -2 -2 -2 -2 -2 -2...... 하여 0 혹은 1이 될 때까지 뻰다는 것을 의미합니다. return isOddWithoutModulo(num-2); // 이 부분은 바로 위의 설명이 적용되는 부분입니다. // 자바스크립트는 재귀함수가 가능하여 함수 안에서 자기 자신을 호출할 수 있습니다. // 이를테면 num이 17이었다면 위의 구문을 통해 다시 isOddWithoutModulo(17-2)를 호출하는 것입니다. // 위의 과정을 다시 반복하게 되면 isOddWithoutModulo(15) --\u0026gt; isOddWithoutModulo(13) --\u0026gt; isOddWithoutModulo(11).... // num이 0 혹은 1이 되어 if와 else if 구문에 걸려 return될 때까지 반복됩니다. } }  Question getStringLength  Write a function called \u0026ldquo;getStringLength\u0026rdquo;. (\u0026ldquo;getStringLength\u0026rdquo; 함수를 작성하세요.)\nGiven a string, \u0026ldquo;getStringLength\u0026rdquo; returns the length of the given string. (문자열이 주어졌을때, \u0026ldquo;getStringLength\u0026rdquo; 함수는 주어진 문자열의 길이를 반환합니다.)\nDo NOT use any native \u0026lsquo;length\u0026rsquo; methods. (- \u0026lsquo;length\u0026rsquo; 메소드를 사용하지 마세요.)\n My_Soultion function getStringLength(string) { // your code here // 1. count 변수를 만들어 초기값을 지정한다. // 2. while loop를 이용해 string[count] 값을 지정해 조건문을 만든다. // 3. 참이면 count 에 1씩 증가시킨다. 그러면 조건문에 인덱스 번호가 넘어가면 조건문이 문자의 길이만큼 값이 count 에 저장된다. let count = 0; while (string[count]) { count = count + 1; }; return count; };  Question getIndexOf  Write a function called \u0026ldquo;getIndexOf\u0026rdquo;. (\u0026ldquo;getIndexOf\u0026rdquo; 함수를 작성하세요.)\nGiven a character and a string, \u0026ldquo;getIndexOf\u0026rdquo; returns the first position of the given character in the given string. (문자와 문자열이 주어졌을때, \u0026ldquo;getIndexOf\u0026rdquo; 함수는 주어진 문자열에서 주어진 문자가 나타나는 첫번째 위치를 반환합니다.)\n My_Soultion function getIndexOf(char, str) { for (let i = 0; i \u0026lt; str.length; i = i + 1 ) { if ( str[i] === char ) { // 만약 str 에 있는 문자들중에 char 같다면 return i; // 리턴 인덱스 번호 } } return -1; // 아니면 -1 반환 }  other_Soultion function getIndexOf(char, str) { // your code here let newStr = str.split(\u0026quot;\u0026quot;); if (newStr.every(el =\u0026gt; el !== char )) { return -1; } let countArr = []; for (let i = 0; i \u0026lt; newStr.length; i ++ ) { if (newStr[i] === char) { countArr.push(i); } } return countArr[0]; }  Question calculateBillTotal  Write a function called \u0026ldquo;calculateBillTotal\u0026rdquo;. (\u0026ldquo;calculateBillTotal\u0026rdquo; 함수를 작성하세요.)\nGiven the pre tax and pre tip amount of a meal, \u0026ldquo;calculateBillTotal\u0026rdquo; returns the total amount due after tax and tip. (팁과 세금을 제외한 식사값이 주어졌을때, \u0026ldquo;calculateBillTotal\u0026rdquo; 함수는 팁과 세금이 포함된 총 식사값을 반환합니다.)\nAssume that sales tax is 9.5% and tip is 15%. (- 세금은 9.5% 팁은 15% 로 계산하세요.) Do NOT tip on the sales tax, only on the pre tip amount. (- 팁을 계산할때 세금을 포함하여 계산하지 마세요.)\n My_Soultion function calculateBillTotal(preTaxAndTipAmount) { // your code here // 1. salesTax 변수를 만들고 주어진 값의 0.095 곱한 값을 대입 // 2. tip 변수를 만들고 주어진 값의 0.15 를 곱한 값을 대입 // 3. 모든값을 더한후 리턴 let salesTax = preTaxAndTipAmount * 0.095; let tip = preTaxAndTipAmount * 0.15; return preTaxAndTipAmount + salesTax + tip; }  Question convertObjectToArray3  Write a function called \u0026ldquo;convertObjectToList\u0026rdquo; which converts an object literal into an array of arrays, like this: (객체를 입력으로 받고 해당 객체를 다음과 같이 2차원 배열로 변형 할 수 있는 함수 \u0026ldquo;convertObjectToList\u0026rdquo;를 작성하세요.)\n My_Soultion function convertObjectToList(obj) { // your code here // 1. 마지막에 출력할 빈배열을 만든다. // 2. for 문을 사용해서 객체안에 있는 key와 prop 값에 전근한다. // 3. push 사용해 접근한 key값은 0번째 값에 넣고 prop 값은 1번째 값에 넣는다. // 4. arr 리턴한다. let arr = []; for ( let key in obj ) { arr.push([key,obj[key]]); } return arr; }  Question isOdd  Write a function called isOdd. (\u0026ldquo;isOdd\u0026rdquo; 함수를 작성하세요.)\nGiven an integer, isOdd returns whether the integer is odd or not. (숫자가 주어졌을때, \u0026ldquo;isOdd\u0026rdquo; 함수는 주어진 숫자가 홀수 인지 아닌지를 반환합니다.)\n My_Soultion function isOdd(num) { // your code here // 파라미터를 2로 나누었을때의 나머지를 판별별 // 나머지가 1인경우, true를 리턴 // 나머지가 0인경우, false를 리턴 if (num % 2 === 1 ) { return true; } else { return false; } }  My_Refactoring code function isOdd(num) { // your code here // 만약 num % 2 의 나머지수가 0 이면 짝수 return false; // 그게 아니라면 true 리턴 return num % 2 === 0 ? false : true; }  Question sum  Summation to n: Let\u0026rsquo;s implement the function sum that takes a single parameter n, and computes the sum of all integers up to n starting from 0, e.g.:\n(n까지의 총 합: n을 매개변수로 받아 0 부터 n 까지 모든 수의 총 합을 반환하는 함수를 작성하세요.)\n My_Soultion function sum(n) { let result = 0; //반복문을 이용하여 0부터 n까지의 숫자를 더하여 출력 for (let i = 0; i \u0026lt;= n; i++) { result = result + i; } return result; // your code here } sum(3); sum(4);  Question onlyEvenElements  Given an array of numbers, onlyEvenElements returns a new array of just the even numbers. (숫자로 이루어진 배열이 주어졌을때, \u0026ldquo;onlyEvenElements\u0026rdquo; 함수는 주어진 배열에 있는 짝수로만으로 이루어진 새로운 배열을 반환해야 합니다.)\n My_Soultion function onlyEvenElements(arr) { //짝수값을 입력받을 빈배열을 선언한다. let result = []; //입력받은 배열안에 있는는 값을 판별하기위해 불러온다. for (let i = 0; i \u0026lt; arr.length; i++) { //값이 짝수인지를 if 문을 써서 판별한다. if (arr[i] % 2 === 0) { //값이이 짝수인경우 빈배열에 집어넣는다. result.push(arr[i]); } } return result; // your code here }  Question removeOddValues  Write a function removeOddValues that takes an object as an argument and returns an object with all key/value pairs removed for which the value holds an odd number. (\u0026ldquo;removeOddValues\u0026rdquo; 함수를 작성하세요. 객체가 주어졌을때, \u0026ldquo;removeOddValues\u0026rdquo; 함수는 주어진 객체의 key/value 페어 중 value 가 홀수 숫자인 페어가 제거된 객체를 반환하세요.)\nYou\u0026rsquo;ll need to use the \u0026ldquo;typeof\u0026rdquo; operator to first check that the values are numbers: (value가 숫자인지 확인하기 위하서는 \u0026ldquo;typeof\u0026rdquo; 연산자를 먼저 사용해야 합니다.)\n My_Soultion // first function removeOddValues(object) { // 1.홀수숫자인 페어가가 아닌 값들을 입력받을을 빈 객체를를 만든다. let object2 = {}; // 2. value 값들을 판별하기 위해 키값을 반복시킨다. for (let k in object) { // 3. value 값이 숫자이고 짝수이면 빈객체에 대입한다. if (typeof(object[k]) === 'number' \u0026amp;\u0026amp; object[k] % 2 === 0) { object2[k] = object[k]; //4. value 값이 문자형이면 객체에 대입한다. } else if ( typeof(object[k]) === \u0026quot;string\u0026quot; ) { object2[k] = object[k]; } } return object2; // your code here } // Sceond function removeOddValues(input) { // 1. 결과를 담을 객체를 만듭니다. let result = {}; // 2. input 으로 받은 object 안에 key 를 모두 반복합니다. for (let key in input) { let value = input[key]; let isNumber = typeof value === 'number'; if (isNumber ) { // key의 해당 하는 value가 짝수인지 확인합니다. let isEven = value % 2 === 0; if (isEven) { // 만든 객체에 key, value를 추가합니다. result[key] = value; } } // 숫자가 아니면 else { //만든 객체에 key, value 를 추가합니다. result[key] = value;\t} } return result; } removeOddValues({ a: 1, b: 2, c: 3, d: 'hello' }) //third function removeOddValues(object) { //1. value 값을 판별하기 위해 key 값을 반복한다. for (let k in object) { //2. value 값이 숫자이고 홀수이면 삭제한다. if (typeof(object[k]) === 'number' \u0026amp;\u0026amp; object[k] % 2 === 1) { delete object[k]; } } return object; }  Question firstCharacter  In this exercise, a string is passed to a method and a new string has to be returned with the first character of each word in the string (문자열이 주어졌을때, \u0026ldquo;firstCharacter\u0026rdquo; 함수는 문자열의 각 단어 첫글자들로 이루어진 문자열을 반환하여야 합니다.)\nAttention! In test case 5 userinput is one space input char as \u0026lsquo; \u0026lsquo;, please do not get confused with \u0026ldquo;, empty string (주의사항! 테스트 케이스 5 에서 주는 입력값은 띄어쓰기 한개(\u0026rsquo; \u0026lsquo;) 입니다. 빈 문자열(\u0026rdquo;) 과 혼동하지 마세요.)\n My_Soultion unction firstCharacter (string) { // Your code here // for문 이용 let output = []; let temp_arr = []; // 1. split으로 단어로 나눠서 배열 만들기 temp_arr = string.split(' '); // 2. 각 인덱스의 첫번째 문자를 배열 output 에 담기 for(let i=0;i\u0026lt;temp_arr.length;i++){ output.push(temp_arr[i][0]); } // 4. 출력 return output.join(''); //////////////////////////////////////////////////////////////////////// // 2. Reduce 이용 return string.split(' ').reduce(function(acc,cur){ return acc+cur[0]; },''); // 3. Reduce이용 2 return string.split(' ').reduce( (acc,cur)=\u0026gt;acc+cur[0] ,''); }  Question dashInsert  Have the function DashInsert insert dashes (\u0026lsquo;-\u0026rsquo;) between each two odd numbers in str. (문자열이 주어졌을때, \u0026lsquo;DashInsert\u0026rsquo; 함수는 문자열에 있는 두 홀수 사이에 대시(\u0026lsquo;-\u0026rsquo;)를 추가하여 반환합니다.)\nFor example: if str is 454793 the output should be 4547-9-3. (예시: 주어진 문자열이 454793 이라면 결과값은 4547-9-3 입니다.) Don\u0026rsquo;t count zero as an odd number. (0 을 홀수로 간주하지 마세요.)\n // 1/for 문 function DashInsert(string) { let output = []; let tmp=string.split(''); for(let i=0;i\u0026lt;tmp.length;i++){ //홀수가 연속해서 나올때 =\u0026gt; i번째와 '-'을 넣는다. if(tmp[i]%2 \u0026amp;\u0026amp; tmp[i+1]%2){// 1,3 output.push(tmp[i],'-');//1,-,3 }else{ output.push(tmp[i]); } } return output.join(''); } /////////////////////////////////////////////////////////////////// // 1. reduce function DashInsert(string) { let output = ''; let tmp = string.split(''); output = tmp.reduce(function(acc,cur){ if((acc)%2===1 \u0026amp;\u0026amp; (cur)%2===1) return acc+'-'+cur; else return acc+cur; }); return output; } //////////////////////////////////////////////////////////////////// // 2.splice function DashInsert(string) { let arr = string.split(''); for (let i = 0; i \u0026lt; arr.length; i++) { if ( arr[i] % 2 === 1 \u0026amp;\u0026amp; arr[i + 1] % 2 === 1) { arr.splice(i +1,0,'-'); } } return arr.join(''); }  Question longestWord  sing the JavaScript language, have the function LongestWord take the sen parameter being passed and return the largest word in the string. (문장이 주어졌을때, \u0026lsquo;LongestWord\u0026rsquo; 함수는 주어진 문장에서 가장 긴 단어를 반환합니다.)\nIf there are two or more words that are the same length, return the first word from the string with that length. Assume sen will not be empty. (만약 가장 긴 단어가 두개 이상이라면, 첫번째로 등장하는 가장 긴 단어를 반환하세요. 문장은 빈 문자열이 아닙니다.)\n My_Soultion // It's used by sort() function longestWord(string) { // 1. 주어진 문장을 배열로 만들기(split) let tmp = string.split(' '); //let sorted_tmp =[]; // ['I','love','codestates']; // 2. sort() 사용 =\u0026gt; 성능 떨어짐 let x = function(a,b){ return b.length-a.length; }; // 3. 0번째 요소 출력 return tmp.sort(x)[0]; } //////////////////////////////////////////////////////// // It's used by reudce(1) function longestWord(string) { let tmp = string.split(' '); let max = tmp[0]; for(let i =1;i\u0026lt;tmp.length;i++){ if(tmp[i].length\u0026gt;max.length){ max = tmp[i]; } } return max; } ///////////////////////////////////////////////////////// // It's used by reudce(2) 화살표 function longestWord(string) { return string.split(' ').reduce((acc,cur)=\u0026gt; acc.length\u0026lt;cur.length? cur:acc); }  Question convertArrayToObject1  Write a function \u0026lsquo;transformFirstAndLast\u0026rsquo; that takes in an array, and returns an object with: (배열을 입력으로 받고 다음 조건에 만족하는 객체를 반환하는 함수 \u0026lsquo;transformFirstAndLast\u0026rsquo; 함수를 작성하세요.)\nthe first element of the array as the object\u0026rsquo;s key, and (1. 배열의 첫번째 요소를 객체의 키로 가집니다.) the last element of the array as that key\u0026rsquo;s value. (2. 배열의 마지막 요소를 해당 키의 값으로 가집니다.)\n My_Soultion function transformFirstAndLast(array) { // your code here // 1. 마지막으로 출력할 객체를 만든다. // 2. 배열의 첫번째 요소를 가져와 변수에 담는다. // 3. 배열의 마지막 요소를 가져와 변수에 담는다. // 4. 객체안에 첫번째 요소를 키로 설정한다. // 5. 객체안에 마지막 요소를 prop 설정한다. let ret = {}; ret[array[0]] = array[array.length -1 ]; return ret; }  Question convertObjectToArray1  Write a function called \u0026ldquo;getAllKeys\u0026rdquo; which returns an array of all the input object\u0026rsquo;s keys. (객체를 입력으로 받고 해당 객체의 키들을 배열로 반환하는 \u0026ldquo;getAllKeys\u0026rdquo; 함수를 작성하세요.)\n My_Soultion function getAllKeys(obj) { // your code here // 1. 마지막에 출력할 새로운 배열을 만든다 // 2. for in key 값을 가져온다. // 3. 가져온 값을 새로 만든 배열에 넣는다. let arr = []; for ( key in obj ) { arr.push(key); } return arr; }  Question convertArrayToObject2  Write a function \u0026lsquo;fromListToObject\u0026rsquo; which takes in an array of arrays, and returns an object with each pair of elements in the array as a key-value pair. (2차원 배열을 입력으로 받고 배열안에 있는 배열의 요소 페어를 키-값 페어로 가지는 객체를 반환하는 함수 \u0026lsquo;fromListToObject\u0026rsquo; 함수를 작성하세요.)\n My_Soultion function fromListToObject(array) { // your code here // 1. output 할 빈객체를 생성한다. // 2. for 문으로 배열 안에 있는 배열을 조사한다. // 3. 배열안에 있는 배열의 0번째 를 키값 1번째를 prop 에 넣는다. let obj = {}; for ( let i = 0; i \u0026lt; array.length; i = i + 1 ) { obj[array[i][0]] = array[i][1]; } return obj }  Questoin convertObjectToArray2  Write a function called \u0026ldquo;listAllValues\u0026rdquo; which returns an array of all the input object\u0026rsquo;s values. (객체를 입력으로 받고 해당 객체의 값들을 배열로 반환하는 \u0026ldquo;listAllValues\u0026rdquo; 함수를 작성하세요.)\n My_Soultion function listAllValues(obj) { // your code here // 1. output 할 빈 배열을 생셩 // 2. for in prop 값을 조사 // 3. prop 값을 빈배열에 넣는다. // 4. output 출력한다. let arr = []; for ( prop in obj ) { arr.push(obj[prop]); } return arr; }  Question convertArrayToObject3  Write a function called \u0026ldquo;transformEmployeeData\u0026rdquo; that transforms some employee data from one format to another. (사원들의 정보를 다른 형태로 변형 할 수 있는 함수 \u0026ldquo;transformEmployeeData\u0026rdquo; 함수를 작성하세요.)\nThe argument will look something like this: (사원들의 정보는 아래와 같은 배열로 주어질 수 있습니다.)\n My_Soultion function transformEmployeeData(array) { // 1. 맨 위 배열을 루프 데이터 가져온다. // 2. 가지고온 배열을 또 루프 를 돌려서 가져온다. // 3. 가지고온 배열을 0번째는 obj key 1번째는 value // 4. 만든 obj 를 배열에 푸시 let arr = []; for ( let i = 0; i \u0026lt; array.length; i = i + 1 ) { let data = {}; for ( let n = 0; n \u0026lt; array[i].length; n = n + 1 ) { data[array[i][n][0]] = array[i][n][1]; } arr.push(data); } return arr;  other_Soultion function transformEmployeeData(array) { // your code here // [key] start: firstName - last: role // return [{}] index0 key; index1 value; // 배열 안에 객체가 들어가 있는 것을 반환해야하니까 // 빈배열 선언하고 빈 객체 선언 해서 빈 객체에 값 넣고 //그 객체를 빈 배열에 넣어주고 // 최종적으로 return 그 배열 해 주면 됨 let result = []; for (let i of array){ // 여기서 i 는 [['firstName', 'Joe'], ['lastName', 'Blow'], ['age', 42], ['role', 'clerk']] let obj = {}; for (let j of i){ // 여기서 j는 ['firstName', 'Joe'] obj[j[0]] = j[1]; // j의 0번 elemente 'firstName' , 1번 element 'Joe' // obj[array[j][0]] = array[j][1]; } result.push(obj); } return result; }  Qutestion greetCustomers  Write a function called \u0026ldquo;greetCustomer\u0026rdquo;. (\u0026ldquo;greetCustomer\u0026rdquo; 함수를 작성하세요.)\nGiven a name, \u0026ldquo;greetCustomer\u0026rdquo; returns a greeting based on how many times that customer has visited the restaurant. Please refer to the customerData object. (고객들의 방문 횟수를 가지고 있는 객체와 이름이 주어졌을때, \u0026ldquo;greetCustomer\u0026rdquo; 함수는 손님이 몇번 방문했는지에 따라 다른 인삿말을 반환합니다. customerData 객체를 참고해 주세요.)\n My_Soultion function greetCustomer(customerData, firstName) { let greeting = ''; // your code here // 1 . 객체의 속성의 객체의 속성값 접근한다. // 2. 객체의 속성의 객체의 속성값이 undefinded 이라면 1 greeting 대입 // 3. 객체의 속성의 객체의 속성값이 1 이라면 2 greeting 대입 // 4. 객체의 속성의 객체의 속성값이 1 보다 크다면 3 greeting 대입 if (!customerData[firstName]) { greeting = `Welcome! Is this your first time?`; } else if (customerData[firstName].visits === 1 ) {; greeting = `Welcome back, ${firstName}! We're glad you liked us the first time!` } else if ( customerData[firstName].visits \u0026gt; 1 ) { greeting = `Welcome back, ${firstName}! So glad to see you again!`; } return greeting; }  Question convertDoubleSpaceToSingle  Write a function called \u0026ldquo;convertDoubleSpaceToSingle\u0026rdquo;. (\u0026ldquo;convertDoubleSpaceToSingle\u0026rdquo; 함수를 작성하세요.)\nGiven a string, \u0026ldquo;convertDoubleSpaceToSingle\u0026rdquo; returns the passed in string, with all the double spaces converted to single spaces. (문자열이 주어졌을때, \u0026ldquo;convertDoubleSpaceToSingle\u0026rdquo; 함수는 주어진 문자열에 있는 띄어쓰기 두개(double spaces)를 띄어쓰기 한개(single space)로 변환한 뒤 해당 문자열을 반환합니다.)\n My_Soultion function convertDoubleSpaceToSingle(str) { // 1. 문자열을 split() 를 사용해서 str 변수에 배열로 저장한다. // 2. reduce 를 사용해서 배열에 담긴 문자의 single space로 만들어 출력한다. let strArr = str.split(\u0026quot; \u0026quot;); let output = strArr.join(\u0026quot; \u0026quot;); return output; } // Refactoing function convertDoubleSpaceToSingle(str) { return str.split(\u0026quot; \u0026quot;).join(\u0026quot; \u0026quot;); }  other_Soultion function convertDoubleSpaceToSingle(str) { return str.replace( / +/g,' '); } 잘되긴 하는데.... ㅡ,.ㅡ / +/g 부분이 이해가 가지 않습니다............... /(빈칸 두개)+/g 를 찾아서 ' '로 바꿔준다는 것 같습니다.  other_Soultion function convertDoubleSpaceToSingle(str) { var array = str.split(' '); // 문자열 배열 만들기 [ 'string', '', 'with', '', 'double', '', 'spaces' ] for (i = 0; i\u0026lt;=array.length; i++) { // for 문을 이용해 배열 접근 if (array[i] === '') { //만약 각각의 요소가 '' 와 같다면 array.splice(i,1); // splice 접근해서 삭제 } } return array.join(' '); // 각각의 문자열을 join ' ' 를 나눠서 출력 }  ","date":1573689600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1573689600,"objectID":"205e94c9d2cda1466aebef0b48e36344","permalink":"/tutorial/javascript-daliy-coding-level-2/","publishdate":"2019-11-14T00:00:00Z","relpermalink":"/tutorial/javascript-daliy-coding-level-2/","section":"tutorial","summary":"write here:rocket:","tags":["Javascript"],"title":"Daliy_Coding_Level_2","type":"docs"},{"authors":null,"categories":[],"content":" 1.Command Line ls  파일보기  ls -A  숨겨진 파일까지 보기  ls -al  상세 내용  // (1) (2)(3) (4) (5) (6) (7) (8) //drwxr-xr-x 2 root wheel 64B 11 7 14:14 test/ //1접근 권한 (읽기/쓰기/실행 가능) 여부 //2chmod 명령어 //3링크된 파일 갯수 //4소유자 //5소유그룹 //6파일 크기 //7만든 날짜 //8만든 시간 //9파일/디렉토리 이름  cd 디렉토리 이름  디렉토리로 이동( print working List )  myuser@mymachine:~$ `cd` Downloads  cd-  뒤로가기  pwd  내가 어디있는지 확인  // myuser@mymachine:~/Downloads$ pwd // showing that .. Users/myuser/Downloads  touch [file_name]  빈 파일 생성  mkdir [dir_name]  디렉토리 생성  cat [file_name]  텍스트 형태의 파일 확인  mv [file_or_dir] [target_dir]  파일 및 디렉토리 옮기기  mv [file_or_dir] [new_name]  파일 및 디렉토리 이름 바꾸기  cp [file] [target_dir] or cp -r [folder]  복사  rm [filename]  파일 삭제 휴지통에 들어가지 않음  rm -r [dirname]  폴더 삭제 휴지통에 들어가지 않음  rm -f [file or dirname];  coution 강제로 지우기  \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash; 2.Version Control System init  Create an empty Git repository or reinitialize an existing one\n clone  Clone a repository into a new directory\n add .  Add all file contents to the index\n add 파일 이름  one file add\n git add jung.html  commit -m \u0026ldquo;\u0026rdquo;  write message into github\n remote add origin\u0026rdquo;\u0026rdquo;  link local to github\n Git remote add origin \u0026quot;https://github.com/J-E-Y/test_2.git\u0026quot;  push // git push -u origin master 최종 깇허브에 올리기 // git push -u origin master // git push -f origin master ( 강제로)  log  그동안 commit 한 내용을 볼수 있다.\nenter 키를 치면 밑에 내용을 계속 볼수 있다.\nlog 파일을 나오려면 q 버튼을 누르면 된다.\n status  현재 진행 상태 보기  config \u0026ndash;global  등록하기\ngit config --global user.email \u0026quot;yourGitHub@email.com\u0026quot; git config --global user.name \u0026quot;yourGitHubusername\u0026quot;   branch : 충돌 방지하기  merge 하는 중 출돌이 존재할수 있다.\nmaster branch 와 develop branch와 내용이 다를경우 master branch 에서 통합을 한다.\nmerge 하는 순간 conflict 가 발생 한다.\ngit은 병합한 코드가 무엇이 다른지 코드안에 표시가 되게 한다. 그리고 그분은에 들어가서 HAED 부분을 선택할지 develop 부분을 선택할지 직접 수동으로 코드를 삭제해서 결정을 하고 저장한다.\ngit add . 하고 다시 git merge develop 한다.\n그럼 병합이 된것이다.\n확인 git merge develop 하면 이미 병합이 되었다 .\n그럼 log 하면 같은 화면에 master와 develop 가 동시에 나온다.\ndevelop 는 필요없기 떄문 git branch -d develop 명령으로 삭제한다.\ngit branch 만 확인하면 master branch 만 남아있다.\ngit push 로 마무리\n Branch  Branch : git 은 동시에 여러 개발자들이 프로젝트에서 각기 다른 기능을 개발할 수 있도록 브랜치 (branch) 기능을 제공한다.\n  일반적으로 EX)   Master Branch Develop Branch Bug Fix Branch\n기능들이 수정되면 Master Branch 에 합치기(Merge) 라면 명령어를 사용해서 합치면 된다.\nBranch 에는 두가지 용어\n 통합Branch : Master Branch 를 말한다. 토픽Branch : 특정 기능을 위해 만들어진 Branch 를 말한다.    실습   git branch 명령 하면 현재 몇개의 branch 가 있는지 확일할수 있다.\ngit branch develop 명령 branch 생성\ncheakout develop 명령을 현재 default 값이 master 에서 새로만든 develop branch 로 바꿔준다. (git branch 로 확인할수 있다.);\n이상태에서 기존 master branchs 에 있는 코드에 수정을 하고 git add 하고 git commit 을 하고 log 명렁을 하면 현재 \u0026lsquo;HAED -\u0026gt; develop\u0026rsquo; 바뀐것을 볼수 있다.\n그러면 master branch 에는 적용이 안되있고 새로생성한 branch 에만 해당되어있다. 그러면 develop 에서 작업을 할수 있다.\n이것을 합치기 위해서는 merge 명령을 한다.\ngit cheakout master 명령을 해서 되돌아 간다.\n그리고 git merge develop 명령을 해서 합친다.\n마지막으로 git push 명령을 해서 깃허브에 저장한다.\n필요없는 branch develop 를 삭제는 git branch -d develop 이다.\n 기존에 commit한 내용으로 되돌아 가기  log 명령을 하고\ngit reset \u0026ndash;hard 9a9sdsa8fsdfsd6a78f6safs 명령을 한다.\n가져온 주소명령으로 돌아가고 그 이후에 있는 commit 내용들을 싹다 지운다.\n주의 commit 내용들이 지워질뿐 아니라 모든 로컬에 저장되어있는 파일들도 제거된다.\n그리고 나서 push 를 해주는데 push -f 를 명령해야 깃허브 저장소에서도 동일하게 적용된다.\n git :log git :commit \u0026ndash; amend  commit 명령을 잘못 넣으면 이명령어를 통해 수정할수 있다.\nunix 에디터가 실행된다. 이모드는 수정모두와 관리자 모드로 나뉜다.\n수정 모드로 들어가고자 한다면 a 를 입력하면 된다.\n그리고 내용을 수정하고 ESC 누르고 : 입력하면 wq! 수정되고 밖으로 나오게 된다.\ngit status 하면 수정된 파일을 볼수 있다.\ngit push -f 강제로 명령하면 적용된다.\n cheakout\u0026ndash;  add 한다음에 git status 명령을 하면 수정된 파일이 스테이지에 올라가게 된다.\ncheakout\u0026ndash; 이라는 명령을 하면 add 하기전 코드상태로 되돌아 간다.\n reset  add 한 파일을 다시 되돌리기\n ","date":1573689600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1573689600,"objectID":"af8d092a9f319b71e6ce8059a7538aa3","permalink":"/tutorial/git/","publishdate":"2019-11-14T00:00:00Z","relpermalink":"/tutorial/git/","section":"tutorial","summary":"write here:rocket:","tags":["Git"],"title":"Git","type":"docs"},{"authors":null,"categories":[],"content":" \u0026lt;strong\u0026gt; /* The HTML \u0026lt;strong\u0026gt; tag gives text a strong emphasis which traditionally means that the text is displayed as bold by the browser. Note what's the difference bewteen strong tag and b tag ? strong tag :시각장애인들 낭독기를 사용할때 조금 더 굵 게 읽는다. b tag :평상시대로 굵게 읽는다. */  \u0026lt;h1\u0026gt; \u0026lt;!-- The HTML \u0026lt;h1\u0026gt; tag defines the highest level or most important heading in the HTML document. This tag is also commonly referred to as the \u0026lt;h1\u0026gt; element. --\u0026gt; \u0026lt;!-- Syntax--\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Heading 1 goes here\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt;  \u0026lt;br\u0026gt; \u0026lt;!-- The HTML \u0026lt;br\u0026gt; tag defines a line break within text in the HTML document. This tag is also commonly referred to as the \u0026lt;br\u0026gt; element.--\u0026gt; \u0026lt;!-- Syntax --\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;The paragraph starts here\u0026lt;br\u0026gt; and ends on the next line.\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt;  \u0026amp;nbsp; (making space) /* HTML will only display one space between words, no matter how many times you press the space bar. To force an extra space to show up, type `\u0026amp;nbsp;` in the area where you want to force the space. */  \u0026lt;p\u0026gt; \u0026lt;!--- The HTML \u0026lt;p\u0026gt; tag defines a paragraph in the HTML document. This tag is also commonly referred to as the \u0026lt;p\u0026gt; element.--\u0026gt; * syntax \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;The paragraph goes here.\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt;  \u0026lt;hr\u0026gt; \u0026lt;!-- The HTML \u0026lt;hr\u0026gt; tag defines a thematic break between paragraphs in HTML5, and a horizontal rule in HTML 4.01. This tag is also commonly referred to as the \u0026lt;hr\u0026gt; element. * Note The HTML \u0026lt;hr\u0026gt; element makes line bewteen two paragraphs. * Syntax --\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;This is the first paragraph.\u0026lt;/p\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;p\u0026gt;This is the second paragraph.\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt;  \u0026lt;div\u0026gt; \u0026lt;!-- The HTML \u0026lt;p\u0026gt; tag defines a generic container in an HTML document that is generally used to group elements. This tag is also commonly referred to as the \u0026lt;p\u0026gt; element. * Note The HTML \u0026lt;p\u0026gt; element is found within the \u0026lt;body\u0026gt; tag. The \u0026lt;div\u0026gt; tag is generally used to group elements together. \u0026lt;p\u0026gt; :element is a block-level element. * Syntax --\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div\u0026gt; \u0026lt;div\u0026gt;this is the type of elemnt \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt;  \u0026lt;span\u0026gt; \u0026lt;!-- `height 와 width 적용이 안된다.` 하지만 Disply 사용해서 적용할수 있다 The HTML \u0026lt;span\u0026gt; tag defines a generic inline container in an HTML document. This tag is also commonly referred to as the \u0026lt;span\u0026gt; element. Note \u0026lt;span\u0026gt; tag is is generally used for styling purposes when there is no other element to use. \u0026lt;span\u0026gt; tag is a inline-level element \u0026lt;span\u0026gt; tag does not inherently represent anything Syntax --\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;\u0026lt;span\u0026gt;Span text goes here\u0026lt;/span\u0026gt; and not here\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;\u0026lt;span class=\u0026quot;red_text\u0026quot;\u0026gt;Span text goes here\u0026lt;/span\u0026gt; and not here\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt;  \u0026lt;nav\u0026gt; \u0026lt;!-- The HTML \u0026lt;nav\u0026gt; tag is an HTML5 element that defines a section with navigation links in the HTML document. This tag is also commonly referred to as the \u0026lt;nav\u0026gt; element. It is used to define a block of navigation links, either within the current document or to other documents * Note The \u0026lt;nav\u0026gt; tag is used to create navigation in the HTML document.For IE browsers older than IE 9, use HTML5shiv which is a javascript workaround to provide support for the new HTML5 elements such as: \u0026lt;header\u0026gt;, \u0026lt;main\u0026gt;, \u0026lt;article\u0026gt;, \u0026lt;section\u0026gt;, \u0026lt;aside\u0026gt;, \u0026lt;nav\u0026gt;, \u0026lt;footer\u0026gt;. * Syntax --\u0026gt; \u0026lt;body\u0026gt; \u0026lt;nav\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;/section1/index.html\u0026quot;\u0026gt;Section1\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;/section2/index.html\u0026quot;\u0026gt;Section2\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;/section3/index.html\u0026quot;\u0026gt;Section3\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; \u0026lt;/body\u0026gt;  \u0026lt;ul\u0026gt; \u0026lt;!-- * Description (부모태그) The HTML \u0026lt;ul\u0026gt; tag defines an unordered list in the HTML document. This tag is also commonly referred to as the \u0026lt;ul\u0026gt; element. * Note The HTML \u0026lt;ul\u0026gt; element is found within the \u0026lt;body\u0026gt; tag. The \u0026lt;ul\u0026gt; tag is made up of \u0026lt;li\u0026gt; tags. Use the \u0026lt;ul\u0026gt; tag when the list items have no numerical ordering. You can nest \u0026lt;ol\u0026gt;, \u0026lt;ul\u0026gt; and \u0026lt;ul\u0026gt;menu lists. * Syntax --\u0026gt; \u0026lt;body\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;First item\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Second item\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Third item\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/body\u0026gt;  \u0026lt;li\u0026gt; \u0026lt;!-- * Description (부모태그) The HTML \u0026lt;li\u0026gt; tag defines a list item in \u0026lt;ol\u0026gt;, \u0026lt;ul\u0026gt; or \u0026lt;menu\u0026gt; in the HTML document. This tag is also commonly referred to as the \u0026lt;li\u0026gt; element. * Syntax --\u0026gt; \u0026lt;body\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;First item\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Second item\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Third item\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;body\u0026gt; \u0026lt;ol\u0026gt; \u0026lt;li\u0026gt;First item\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Second item\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Third item\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; \u0026lt;/body\u0026gt; * Sample Output 2 \u0026lt;body\u0026gt; \u0026lt;menu type=\u0026quot;toolbar\u0026quot;\u0026gt; \u0026lt;li\u0026gt; \u0026lt;menu label=\u0026quot;File\u0026quot;\u0026gt; \u0026lt;button type=\u0026quot;button\u0026quot; onclick=\u0026quot;new()\u0026quot;\u0026gt;New\u0026lt;/button\u0026gt; \u0026lt;button type=\u0026quot;button\u0026quot; onclick=\u0026quot;save()\u0026quot;\u0026gt;Save\u0026lt;/button\u0026gt; \u0026lt;/menu\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;menu label=\u0026quot;Edit\u0026quot;\u0026gt; \u0026lt;button type=\u0026quot;button\u0026quot; onclick=\u0026quot;copy()\u0026quot;\u0026gt;Copy\u0026lt;/button\u0026gt; \u0026lt;button type=\u0026quot;button\u0026quot; onclick=\u0026quot;paste()\u0026quot;\u0026gt;Paste\u0026lt;/button\u0026gt; \u0026lt;/menu\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/menu\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;!-- * Note The \u0026lt;li\u0026gt; tag is used within \u0026lt;ol\u0026gt;, \u0026lt;ul\u0026gt; or \u0026lt;menu\u0026gt;. You can nest \u0026lt;ol, \u0026lt;ul\u0026gt; and \u0026lt;menu\u0026gt; lists. (자식태그) li 태그는 반드시 부모태그를 가지고 있다. --\u0026gt;  \u0026lt;ol\u0026gt; \u0026lt;!-- * Description (자식태그) The HTML \u0026lt;ol\u0026gt; tag defines an ordered list in the HTML document. This tag is also commonly referred to as the \u0026lt;ol\u0026gt; element. * Syntax --\u0026gt; \u0026lt;body\u0026gt; \u0026lt;ol\u0026gt; \u0026lt;li\u0026gt;First item\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Second item\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Third item\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;!-- * Note The \u0026lt;ol\u0026gt; tag is made up of \u0026lt;li\u0026gt; tags. Use the \u0026lt;ol\u0026gt; tag when the list items have numeric, meaningful ordering. You can nest \u0026lt;ol\u0026gt;, \u0026lt;ul\u0026gt; and \u0026lt;menu\u0026gt; lists. --\u0026gt;  \u0026lt;form\u0026gt; \u0026lt;!-- * Description The HTML `\u0026lt;form\u0026gt; tag` is used to create a form on a web page that has interactive controls for user input. This tag is also commonly referred to as the `\u0026lt;form\u0026gt;` element. * Syntax --\u0026gt; \u0026lt;body\u0026gt; \u0026lt;form action=\u0026quot;\u0026quot; method=\u0026quot;get\u0026quot;\u0026gt; Company: \u0026lt;input type=\u0026quot;text\u0026quot; name=\u0026quot;company\u0026quot;\u0026gt;\u0026lt;br\u0026gt; Address: \u0026lt;input type=\u0026quot;text\u0026quot; name=\u0026quot;address\u0026quot;\u0026gt;\u0026lt;br\u0026gt; \u0026lt;input type=\u0026quot;submit\u0026quot; value=\u0026quot;Submit\u0026quot;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/body\u0026gt;  Sample Output\n\u0026lt;container\u0026gt; \u0026lt;!-- * Description In HTML, the container is the area enclosed by the beginning and ending tags. For example \u0026lt; HTML \u0026gt; encloses an entire document while other tags may enclose a single word, paragraph, or other elements. In HTML code, all container must have a start and stop tag to close the container. Without a stop tag the start tag will apply to the entire document. --\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026quot;container\u0026quot;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; \u0026lt;!-- * note The container div, and sometimes content div, are almost always used to allow for more sophisticated CSS styling. The body tag is special in some ways. Browsers don't treat it like a normal div; its position and dimensions are tied to the browser window. But a container div is just a div and you can style it with margins and borders. You can give it a fixed width, and you can center it with margin-left: auto; margin-right: auto. Plus, content, like a copyright notice for example, can go on the outside of the container div, but it can't go on the outside of the body, allowing for content on the outside of a border. --\u0026gt;  cashing \u0026lt;!-- * Description 파일을 따로 만든후 저장해놓는것 * how to use it? \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=“파일이름\u0026quot;\u0026gt; * Sample Output --\u0026gt; \u0026lt;!doctype html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;title\u0026gt;web1 - Son\u0026lt;/title\u0026gt; \u0026lt;meta charset=\u0026quot;ut-8\u0026quot;\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;style.css\u0026quot;\u0026gt;  ","date":1573689600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1573689600,"objectID":"428a35c57122d9972f43509f849a963c","permalink":"/tutorial/html/","publishdate":"2019-11-14T00:00:00Z","relpermalink":"/tutorial/html/","section":"tutorial","summary":"write here:rocket:","tags":["Html"],"title":"Html","type":"docs"},{"authors":null,"categories":[],"content":" 1.data type 자료형이란?  어떤 종류의 데이터를 사용하는 것이지 컴퓨터에게 알려주는 것 자료형마다 사용 가능한 연산자(Operator)를 따로 가지고 있습니다! 자료형이 같아야 연산을 할 수 있습니다!\n 자료형의 종류  Number :숫자 String :문자 Boolean :true and False Null : 값이 비어있다 Undefined :값이 정의되지 않았다 symbol(new in ECMAScript 6) and Object :  1. Number type (숫자)  ex)\nvar firstNum = 10; // 소수점을 사용하지 않은 표현 var secondNum = 10.00; // 소수점을 사용한 표현 var thirdNum = 10e6; // 10000000 var fourthNum = 10e-6; // 0.00001  length\nvar a = \u0026quot;hello\u0026quot; a.length;  slice :자르기\nvar a = \u0026quot;KheLLo\u0026quot; a[0]; a[1] = \u0026quot;H\u0026quot;; //안 됨 a.slice(1,4); a.toUpperCase(); : 대문자로 바뀐 a.toLowerCase(); : 소문자로 바뀐다   2. String (문자열) \u0026quot;I am String\u0026quot;; \u0026quot;Hello \u0026quot; + \u0026quot;world\u0026quot;;  3. Boolean (불리언) true; false; 5 \u0026gt; 3; 5 === 5; 5 \u0026gt; 5;  4. The typeof Operator: 데이터유형을 알려주는 중요한 연산자! typeof 10; // number 타입 typeof \u0026quot;문자열\u0026quot;; // string 타입 typeof true; // boolean 타입 typeof undefined; // undefined 타입 typeof null; // object 타입  5. symbol (심볼)  심볼 타입은 ECMAScript 6부터 새롭게 추가된 타입이다. 심볼은 유일하고 변경할 수 없는 타입으로, 객체의 프로퍼티를 위한 식별자로 사용할 수 있다.\n ex)\nvar sym = Symbol(\u0026quot;javascript\u0026quot;); // symbol 타입 var symObj = Object(sym); // object 타입   6. object (객체)  자바스크립트의 기본 타입은 객체(object)이다. 객체(object)란 실생활에서 우리가 인식할 수 있는 사물로 이해할 수 있다. 객체는 여러 프로퍼티(property)나 메소드(method)를 같은 이름으로 묶어놓은 일종의 집합체이다.\n ex)\nvar dog = { name: \u0026quot;해피\u0026quot;, age: 3 }; // 객체의 생성 // 객체의 프로퍼티 참조 document.getElementById(\u0026quot;result\u0026quot;).innerHTML = \u0026quot;강아지의 이름은 \u0026quot; + dog.name + \u0026quot;이고, 나이는 \u0026quot; + dog.age + \u0026quot;살 이다.\u0026quot;;   2.Variable Using Variables var x = 10; x + 5 ; // =\u0026gt; 15 x ; // =\u0026gt; 10 once we have created our variables, we can use their name as a substitute for their value elsewhere in our program.  Declaring a variable without a Vaue  Creating a variable in JavaScript is called \u0026quot;declaring\u0026quot; a variable. 1.var carName; After the declaration, the variable has no value (technically it has the value of undefined). To assign a value to the variable, use the equal sign: 2. carName = \u0026quot;Volvo\u0026quot;; // carName 를 Volvo 로 변경할때 var 없이 만든다 cos 먼저 선언을 했기 때문이다. 2. var carName = \u0026quot;Volvo\u0026quot;;  Changing a Variable’s value  var pokemon = charmander pokemon = heelo Notice that When you change the value of a variable, \u0026quot;you don’t need to use the var keyword\u0026quot;The var keyword is only needed for creating new variables.  variable scope 변수의 유효 범위  local variable 지역 변수   Variables declared inside a function body are in the Local scope.\n지역 변수(local variable)란 함수 내에서 선언된 변수를 가리킨다. 이러한 지역 변수는 변수가 선언된 함수 내에서만 유효하며, 함수가 종료되면 메모리에서 사라진다.함수의 매개변수 또한 함수 내에서 정의되는 지역 변수처럼 동작한다.\n  ex 1-1\nvar greeting = \u0026quot;Hello\u0026quot;; function greetSomeone() { var firstName = \u0026quot;john\u0026quot; return greeting + \u0026quot; \u0026quot; + firstName; } greetSomeone firstName; // = \u0026gt; Error Function(greetSomeone) is working but \u0026quot;firstName\u0026quot;\u0026quot; is Error Because we declared our name variable inside the scope of our greetSomeone function.  global variable 전역 변수\n   Variables declared outside a function body are in the global scope.\n전역 변수(global variable)란 함수의 외부에서 선언된 변수를 가리킨다. 이러한 전역 변수는 프로그램의 어느 영역에서나 접근할 수 있으며, 웹 페이지가 닫혀야만 메모리에서 사라진다.\n  ex 1-2\n \u0026quot;But!!!!!!! if you do this it works well\u0026quot;!! var greeting = \u0026quot;Hello\u0026quot;; var firstName = \u0026quot;john\u0026quot; function greetSomeone() { firstName = \u0026quot;JJ\u0026quot; return greeting + \u0026quot; \u0026quot;+ firstName; } firstNmae // = \u0026gt; JJ Because you changed a variable the was defined in an outer scope   3.Operator arithmetic operator (산술 연산자) +\t왼쪽 피연산자의 값에 오른쪽 피연산자의 값을 더함. -\t왼쪽 피연산자의 값에서 오른쪽 피연산자의 값을 뺌. *\t왼쪽 피연산자의 값에 오른쪽 피연산자의 값을 곱함. /\t왼쪽 피연산자의 값을 오른쪽 피연산자의 값으로 나눔. %\t왼쪽 피연산자의 값을 오른쪽 피연산자의 값으로 나눈 후, 그 나머지를 반환함   ex\nvar x = 10, y = 4; document.write(x + y + \u0026quot;\u0026lt;br\u0026gt;\u0026quot;); // 14 document.write(x - y + \u0026quot;\u0026lt;br\u0026gt;\u0026quot;); // 6 document.write(x * y + \u0026quot;\u0026lt;br\u0026gt;\u0026quot;); // 40 document.write(x / y + \u0026quot;\u0026lt;br\u0026gt;\u0026quot;); // 2.5 document.write(x % y); // 2   assignment operator (대입 연산자) =\t왼쪽 피연산자에 오른쪽 피연산자의 값을 대입함. +=\t왼쪽 피연산자의 값에 오른쪽 피연산자의 값을 더한 후, 그 결과 값을 왼쪽 피연산자에 대입함. -=\t왼쪽 피연산자의 값에서 오른쪽 피연산자의 값을 뺀 후, 그 결과 값을 왼쪽 피연산자에 대입함. *=\t왼쪽 피연산자의 값에 오른쪽 피연산자의 값을 곱한 후, 그 결과 값을 왼쪽 피연산자에 대입함. /=\t왼쪽 피연산자의 값을 오른쪽 피연산자의 값으로 나눈 후, 그 결과 값을 왼쪽 피연산자에 대입함. %=\t왼쪽 피연산자의 값을 오른쪽 피연산자의 값으로 나눈 후, 그 나머지를 왼쪽 피연산자에 대입함.   ex\nvar x = 10, y = 10, z = 10; x = x - 5; y -= 5; // y = y - 5 와 같은 표현임. z =- 5; // z = -5 와 같은 표현임.   increment and decrement operator ( 증감 연산자 ) ++x\t먼저 피연산자의 값을 1 증가시킨 후에 해당 연산을 진행함. x++\t먼저 해당 연산을 수행하고 나서, 피연산자의 값을 1 증가시킴. --x\t먼저 피연산자의 값을 1 감소시킨 후에 해당 연산을 진행함. x--\t먼저 해당 연산을 수행하고 나서, 피연산자의 값을 1 감소시킴.   ex\nvar x = 10, y = 10; document.write((++x - 3) + \u0026quot;\u0026lt;br\u0026gt;\u0026quot;); // x의 값을 우선 1 증가시킨 후에 3을 뺌. document.write(x + \u0026quot;\u0026lt;br\u0026gt;\u0026quot;); // 11 document.write((y++ - 3) + \u0026quot;\u0026lt;br\u0026gt;\u0026quot;); // 먼저 y에서 3을 뺀 후에 y의 값을 1 증가시킴. document.write(y); // 11   comparison operator (비교 연산자) ==\t왼쪽 피연산자와 오른쪽 피연산자의 값이 같으면 참을 반환함. ===\t왼쪽 피연산자와 오른쪽 피연산자의 값이 같고, 같은 타입이면 참을 반환함. !=\t왼쪽 피연산자와 오른쪽 피연산자의 값이 같지 않으면 참을 반환함. !==\t왼쪽 피연산자와 오른쪽 피연산자의 값이 같지 않거나, 타입이 다르면 참을 반환함. \u0026gt;\t왼쪽 피연산자의 값이 오른쪽 피연산자의 값보다 크면 참을 반환함. \u0026gt;=\t왼쪽 피연산자의 값이 오른쪽 피연산자의 값보다 크거나 같으면 참을 반환함. \u0026lt;\t왼쪽 피연산자의 값이 오른쪽 피연산자의 값보다 작으면 참을 반환함. \u0026lt;=\t왼쪽 피연산자의 값이 오른쪽 피연산자의 값보다 작거나 같으면 참을 반환함.   ex\n var x = 3, y = 5; var a = \u0026quot;abc\u0026quot;, b = \u0026quot;bcd\u0026quot;; document.write((x \u0026gt; y) + \u0026quot;\u0026lt;br\u0026gt;\u0026quot;); // y의 값이 x의 값보다 크므로 false document.write((a \u0026lt;= b) + \u0026quot;\u0026lt;br\u0026gt;\u0026quot;); // 알파벳 순서상 'a'가 'b'보다 먼저 나오므로 'a'가 'b'보다 작음. document.write(x \u0026lt; a); // x의 값은 숫자이고 a의 값은 문자열이므로 비교할 수 없음.   Logical operator (논리연산자) \u0026amp;\u0026amp; 는 and || 는 or ! 는 Not  bitwise operator (비트 연산자)  \u0026amp;\t대응되는 비트가 모두 1이면 1을 반환함. (비트 AND 연산) |\t대응되는 비트 중에서 하나라도 1이면 1을 반환함. (비트 OR 연산) ^\t대응되는 비트가 서로 다르면 1을 반환함. (비트 XOR 연산) ~\t비트를 1이면 0으로, 0이면 1로 반전시킴. (비트 NOT 연산) \u0026lt;\u0026lt;\t지정한 수만큼 비트를 전부 왼쪽으로 이동시킴. (left shift 연산) \u0026gt;\u0026gt;\t부호를 유지하면서 지정한 수만큼 비트를 전부 오른쪽으로 이동시킴. (right shift 연산) \u0026gt;\u0026gt;\u0026gt;\t지정한 수만큼 비트를 전부 오른쪽으로 이동시키며, 새로운 비트는 전부 0이 됨.  increment/decrement operator (증감연산자)  증감 연산자는 피연산자를 1씩 증가 혹은 감소시킬 때 사용하는 연산자이다.이 연산자는 피연산자가 단 하나뿐인 단항 연산자이다.\n ex)\nvar a; a++; a = 0; a++; a--;   comparison operator (비교 연산자) ==\t왼쪽 피연산자와 오른쪽 피연산자의 값이 같으면 참을 반환함. ===\t왼쪽 피연산자와 오른쪽 피연산자의 값이 같고, 같은 타입이면 참을 반환함. !=\t왼쪽 피연산자와 오른쪽 피연산자의 값이 같지 않으면 참을 반환함. !==\t왼쪽 피연산자와 오른쪽 피연산자의 값이 같지 않거나, 타입이 다르면 참을 반환함. \u0026gt;\t왼쪽 피연산자의 값이 오른쪽 피연산자의 값보다 크면 참을 반환함. \u0026gt;=\t왼쪽 피연산자의 값이 오른쪽 피연산자의 값보다 크거나 같으면 참을 반환함. \u0026lt;\t왼쪽 피연산자의 값이 오른쪽 피연산자의 값보다 작으면 참을 반환함. \u0026lt;=\t왼쪽 피연산자의 값이 오른쪽 피연산자의 값보다 작거나 같으면 참을 반환함.  typeof 연산자  typeof 연산자는 피연산자의 타입을 반환한다.\n 숫자, NaN\t\u0026quot;number\u0026quot; 문자열\t\u0026quot;string\u0026quot; true, false\t\u0026quot;boolean\u0026quot; null\t\u0026quot;object\u0026quot; undefined\t\u0026quot;undefined\u0026quot; 함수\t\u0026quot;function\u0026quot; 함수가 아닌 객체\t\u0026quot;object\u0026quot;   ex\ntypeof \u0026quot;문자열\u0026quot; // string typeof 10 // number typeof NaN // number typeof false // boolean typeof undefined // undefined typeof new Date() // object typeof null // object   ternary operator (삼항 연산자)  삼항 연산자는 유일하게 피연산자를 세 개나 가지는 조건 연산자이다.\n  ex\nvar x = 3, y = 5; var result = (x \u0026gt; y) ? x : y // x가 더 크면 x를, 그렇지 않으면 y를 반환함. document.write(\u0026quot;둘 중에 더 큰 수는 \u0026quot; + result + \u0026quot;이다.\u0026quot;); 삼항 연산자는 짧은 if / else 문 대신 사용할 수 있으며, 코드를 간결하게 만들어 준다.   delete 연산자  delete 연산자는 피연산자인 객체, 객체의 프로퍼티(property) 또는 배열의 요소(element) 등을 삭제해 준다.\n 피연산자가 성공적으로 삭제되었을 경우에는 참(true)을 반환하고, 삭제하지 못했을 경우에는 거짓(false)을 반환한다. 이 연산자는 피연산자가 단 하나뿐인 단항 연산자이며, 피연산자의 결합 방향은 오른쪽에서 왼쪽이다.\n쉼표 연산자  쉼표 연산자를 for 문에서 사용하면, 루프마다 여러 변수를 동시에 갱신할 수 있다.\n루프마다 i의 값은 1씩 증가하고, 동시에 j의 값은 1씩 감소함.\n for (var i = 0, j = 9; i \u0026lt;= j; i++, j--) { document.write(\u0026quot;i의 값은 \u0026quot; + i + \u0026quot;이고, j의 값은 \u0026quot; + j + \u0026quot;이다.\u0026lt;br\u0026gt;\u0026quot;); }   ex\n var arr = [1, 2, 3]; // 배열 생성 delete arr[2]; // 배열의 원소 중 인덱스가 2인 요소를 삭제함. document.write(arr + \u0026quot;\u0026lt;br\u0026gt;\u0026quot;); // [1, 2, ] // 배열에 빈자리가 생긴 것으로 undefined 값으로 직접 설정된 것은 아님. document.write(arr[2] + \u0026quot;\u0026lt;br\u0026gt;\u0026quot;); // 배열의 요소를 삭제하는 것이지 배열의 길이까지 줄이는 것은 아님. document.write(arr.length);   instanceof 연산자  instanceof 연산자는 피연산자인 객체가 특정 객체의 인스턴스인지 아닌지를 확인해 준다. 피연산자가 특정 객체의 인스턴스이면 참(true)을 반환하고, 특정 객체의 인스턴스가 아니면 거짓(false)을 반환한다. 이 연산자는 두 개의 피연산자를 가지는 이항 연산자이며, 피연산자들의 결합 방향은 왼쪽에서 오른쪽이다.\n  ex\nvar str = new String(\u0026quot;이것은 문자열이다.\u0026quot;); str instanceof Object; // true str instanceof String; // true str instanceof Array; // false str instanceof Number; // false str instanceof Boolean; // false   void 연산자  void 연산자는 피연산자로 어떤 타입의 값이 오던지 상관없이 언제나 undefined 값만을 반환한다. 이 연산자는 피연산자가 단 하나뿐인 단항 연산자이며, 피연산자의 결합 방향은 오른쪽에서 왼쪽이다.\n  ex\n\u0026lt;a href=\u0026quot;javascript:void(0)\u0026quot;\u0026gt;이 링크는 동작하지 않는다.\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026quot;javascript:void(document.body.style.backgroundColor='yellow')\u0026quot;\u0026gt; 이 링크도 동작하지 않지만, HTML 문서의 배경색을 바꿔준다. \u0026lt;/a\u0026gt;   4.Conditional  if 문 if / else 문 if / else if / else 문 switch 문  if 문 if (표현식) { 표현식의 결과가 참일 때 실행하고자 하는 실행문; }   ex\nvar x = 10, y = 20; if (x == y) { document.write(\u0026quot;x와 y는 같다.\u0026quot;); } if (x \u0026lt; y) { document.write(\u0026quot;x가 y보다 작다.\u0026quot;); } if (x \u0026gt; y) // 실행될 실행문이 한 줄뿐이라면 중괄호({})를 생략할 수 있음. document.write(\u0026quot;x가 y보다 크다.\u0026quot;);   else 문  if (표현식) { 표현식의 결과가 참일 때 실행하고자 하는 실행문; } else { 표현식의 결과가 거짓일 때 실행하고자 하는 실행문; } else 문을 사용하면 앞의 예제를 좀 더 직관적으로 표현할 수 있다.   ex\nvar x = 10, y = 20; if (x == y) { document.write(\u0026quot;x와 y는 같다.\u0026quot;); } else { if (x \u0026lt; y) document.write(\u0026quot;x가 y보다 작다.\u0026quot;); else // 실행될 실행문이 한 줄뿐이라면 중괄호({})를 생략할 수 있음. document.write(\u0026quot;x가 y보다 크다.\u0026quot;); }   else if 문  if (표현식1) { 표현식1의 결과가 참일 때 실행하고자 하는 실행문; } else if (표현식2) { 표현식2의 결과가 참일 때 실행하고자 하는 실행문; } else { 표현식1의 결과도 거짓이고, 표현식2의 결과도 거짓일 때 실행하고자 하는 실행문; }   ex\nvar x = 10, y = 20; if (x == y) { document.write(\u0026quot;x와 y는 같다.\u0026quot;); } else if (x \u0026lt; y) { document.write(\u0026quot;x가 y보다 작다.\u0026quot;); } else { // x \u0026gt; y인 경우 document.write(\u0026quot;x가 y보다 크다.\u0026quot;); }  switch-case\n   if 와 else if를 반복적으로 써야 하는 상황을 피하게 해 줍니다.\n var value; switch(value) { case 값1: //value == 값1일 경우 실행할 코드 break; case 값2: //value == 값2일 경우 실행할 코드 break; //... default: //위쪽에 해당되지 않는 경우 실행할 코드 }   점수가 10점이면 A, 9점이면 B, 그 외에는 C를 출력하는 코드를 작성하세요.\n if로 구현 var score = prompt('점수를 입력하세요'); if (score === 10) { console.log('A'); } else if (score == 9) { console.log('B'); } else { console.log('C'); }   switch-case 로 구현 var score = prompt('점수를 입력하세요'); switch (score) { case 10: console.log('A); break; case 9: console.log('B'); break; default: console.log('C'); }  5.Loops  while 문 do / while 문 for 문 for / in 문 for / of 문  while while (표현식) { 표현식의 결과가 참인 동안 반복적으로 실행하고자 하는 실행문; }   note   while 문 만들때는 변수를 미리 만들어 줘야 한다.\n var n ; var n = 0; var n = 1;   ex 1-1\nvar n = 1; while(n \u0026lt;= 100) { console.log(\u0026quot;Hi \u0026quot; + n); n++; }  ex 1-2\nwhile 문을 사용해서 1에서 100까지의 합을 구해 봅시다. 자주 사용하는 패턴 var i = 0; // 1 변수 초기화 while (i \u0026lt;= 100) { // 2 변수 검사 console.log(i); // 3 코드 다하고나서 i++; // 4 하나씩 증가 } 그래서 for가 등장함 위의 while 코드와 완전히 똑같음 for (var i = 0; i \u0026lt;= 100; i++) { console.log(i); }  ex gugudan with while\n \u0026lt;script\u0026gt; var strN = Number(prompt(\u0026quot;input which gugudan\u0026quot;)); var i = 1; document.write(\u0026quot;gugudan\u0026quot; + strN + \u0026quot;\u0026lt;br\u0026gt;\u0026quot;); while (i \u0026lt; 10) { document.write(strN + \u0026quot; * \u0026quot; + i + \u0026quot; = \u0026quot; + strN * i + \u0026quot; \u0026lt;br\u0026gt; \u0026quot; ); i++; } \u0026lt;/script\u0026gt;   for 문 for (초기식; 표현식; 증감식) { 표현식의 결과가 참인 동안 반복적으로 실행하고자 하는 실행문; }   ex 1-1\n for (var i = 1; i \u0026lt; 10; i++) { document.write(i + \u0026quot;\u0026lt;br\u0026gt;\u0026quot;); }  ex 1-2 gugudan with for\n\u0026lt;script\u0026gt; var strN = Number(prompt(\u0026quot;input which dan?\u0026quot;)); document.write(\u0026quot;gugudan\u0026quot; + strN + \u0026quot;\u0026lt;br\u0026gt;\u0026quot;); for (var i = 1; i \u0026lt; 10; i++) { document.write(strN + \u0026quot; * \u0026quot; + i + \u0026quot; = \u0026quot; + strN * i + \u0026quot;\u0026lt;br\u0026gt;\u0026quot;); } \u0026lt;/script\u0026gt;  ex 1-3 gugudan with button\n \u0026lt;P\u0026gt;사용자가 2 이상, 9 이하가 아닌 값을 입력하는 경우 \u0026quot;2이상, 9이하의 값만 입력할 수 있습니다.\u0026quot;라는 메시지를 출력한다.\u0026lt;/P\u0026gt; \u0026lt;script\u0026gt; var strN; while (true){ strN = Number(prompt(\u0026quot;input which dan from 2 dan to 9 dan\u0026quot;)) if (strN \u0026lt; 2 || strN \u0026gt; 9){ console.log(\u0026quot;this is not available\u0026quot;); } else { document.write(\u0026quot;gugudan\u0026quot; + strN + \u0026quot;\u0026lt;br\u0026gt;\u0026quot;); break; } } for (i = 1; i \u0026lt; 10; i ++){ document.write(strN + \u0026quot; + \u0026quot; + i + \u0026quot; = \u0026quot; + strN + i + \u0026quot;\u0026lt;br\u0026gt;\u0026quot;); } \u0026lt;/script\u0026gt;   6.Array 배열이란?  자바스크립트에서 배열(array)은 이름과 인덱스로 참조되는 정렬된 값의 집합으로 정의된다. 배열을 구성하는 각각의 값을 배열 요소(element)라고 하며, 배열에서의 위치를 가리키는 숫자를 인덱스(index)라고 한다.\n 특징  배열 요소의 타입이 고정되어 있지 않으므로, 같은 배열에 있는 배열 요소끼리의 타입이 서로 다를 수도 있다. 배열 요소의 인덱스가 연속적이지 않아도 되며, 따라서 특정 배열 요소가 비어 있을 수도 있다.자바스크립트에서 배열은 Array 객체로 다뤄진다.\n 배열 만들기 1 var scores = [50, 60, 70]; console.log(scores); console.log(scores.length);  인덱스를 이용해서 배열의 원소 읽기 scores[0]; scores[3];  배열에 값 쓰기 scores[0] = 100; scores[9] = 50;  배열의 타입 알아보기 typeof scores typeof scores[0]  배열 만들기 2 var a = []; a[0] = 2; a[1] = 4;  배열의 길이 구하기 scores.length;  배열의 마지막 원소를 읽어 오려면? scores[scores.length - 1]; 문자열과 배열 •\t문자열과 배열은 비슷한 성질을 많이 가지고 있습니다. •\t문자열: Immutable •\t배열: Mutable •\t배열의 속성과 메소드를 문자열에도 테스트해보세요.  배열의 메소드들 1  push() 뒤어 붙이기\nvar arr = [1,2,3,4,]; arr.push(1); arr; // = \u0026gt; [1,2,3,4,1]  pop() 뒤에 있는거 빼기\nvar arr = [1,2,3,4,]; arr.pop(); arr; // = \u0026gt; [1,2,3]  unshift() 앞에 붙이기\nvar arr = [1,2,3,4]; arr.unshift(1); arr; // = \u0026gt; [1,1,2,3,4,];  shift() 앞에 있는거 빼기\nvar arr = [1,2,3,4]; arr.shift(); arr; // = \u0026gt; [2,3,4,]  concat() 더하기\nvar arr = [1,2,3,4,5]; arr.concat(6); \u0026gt;\u0026gt;arr [1,2,3,4,5,6] 기존에 있는 것은 변하지 않는다. 변하게 하기위해서는 변수를 새로 만들기 ! var arr = [1,2,3,4,5]; arr.concat([6,7,8,9,10]); \u0026gt;\u0026gt;arr [1,2,3,4,5,6,7,8,9,10] 여러게를 더할수 있다.  join() 문자열로 바꾸기\nvar arr = [1,2,3,4,5,6] arr.join() ; \u0026gt;\u0026gt;arr [\u0026quot;1\u0026quot;,\u0026quot;2\u0026quot;,\u0026quot;3\u0026quot;,\u0026quot;4\u0026quot;,\u0026quot;5\u0026quot;,\u0026quot;6\u0026quot;] 문자열로 바꿔준다. arr.join(\u0026quot;\u0026quot;); \u0026gt;\u0026gt;arr [\u0026quot;123456\u0026quot;]; 문자열 다 붙인다.  indaxtOf() ()\u0026lt;\u0026lt;원소를 입력하면부터 앞에서 부터 찾아서 index번호 알려준다.\n lastIndaxtOf() ()\u0026lt;\u0026lt;원소를 입력하면부터 뒤에서 부터 찾아서 index번호 알려준다.\n  var arr = [1,2,3,4,5]; arr.indexOf[1]; // arr // 2 arr.indexOf[100]; // arr // -1 // 없는 경우 -1를 호출한다. // EX) var arr = [1,2,3,4,5,6] if (arr.indexOf(100) === -1 ) { 만약 100이라는 원소가 arr 에 없으면 }   slice()  //원소는 변하지 않는다 var arr = [1, 2, 3, 4, 5]; a.slice(0, 3); \u0026gt;\u0026gt;a; 123   splice()  //원소 값이 변한다. var arr = [1, 2, 3, 4, 5]; a.splice(0, 3); // a 123   split()   문자열을 문자의 배열로 나누고 싶을 때 사용하는 메소드입니다.\n var s = \u0026quot;hello, world this is jj\u0026quot;; s.split(\u0026quot;\u0026quot;); // \u0026quot;h\u0026quot;, \u0026quot;e\u0026quot;, \u0026quot;l\u0026quot;, \u0026quot;l\u0026quot;, \u0026quot;o\u0026quot;, \u0026quot;,\u0026quot;, \u0026quot; \u0026quot;, \u0026quot;w\u0026quot;, \u0026quot;o\u0026quot;, \u0026quot;r\u0026quot;, \u0026quot;l\u0026quot;, \u0026quot;d\u0026quot;, \u0026quot; \u0026quot;, \u0026quot;t\u0026quot;, \u0026quot;h\u0026quot;, \u0026quot;i\u0026quot;, \u0026quot;s\u0026quot;, \u0026quot; \u0026quot;, \u0026quot;i\u0026quot;, \u0026quot;s\u0026quot;, \u0026quot; \u0026quot;, \u0026quot;j\u0026quot;, \u0026quot;j\u0026quot;  var s = \u0026quot;hello, world this is jj\u0026quot;; s.split(\u0026quot;,\u0026quot;); //\u0026quot;hello\u0026quot;, \u0026quot; world this is jj\u0026quot; //콤마가 생겼다. 콤마의 기준으로 갈라진다.  var s = \u0026quot;hello world t-h-i-s-i-s-j-j\u0026quot; s.split(\u0026quot;-\u0026quot;); \u0026quot;hello world t\u0026quot;, \u0026quot;h\u0026quot;, \u0026quot;i\u0026quot;, \u0026quot;s\u0026quot;, \u0026quot;i\u0026quot;, \u0026quot;s\u0026quot;, \u0026quot;j\u0026quot;, \u0026quot;j\u0026quot; - 기준으로 갈라진다.  7.Function 함수 만들기 function convertHeight(feet, inches) { return (feet * 12 + inches) * 2.54 } convertHeight(5, 10); //= \u0026gt;\u0026gt;177.8 (feet , inches) ==\u0026gt;\u0026gt; parameter ( 매개 변수) (5,10) ==\u0026gt;\u0026gt; argument ( 전달인자\t)  변수에 담아서 함수 사용하기 var ret = function convertHeight(feet, inches) { return (feet * 12 + inches) * 2.54 } ret(5, 10); //177.8  리턴값 없는 변수를 변수에 담으면 “undefind” 출력된다 .  ex 1-1 (console.log)  var foo = function () { console.log(“I’m a foo”); } // undefined   ex 1-2 (return)  var foo = function () { return(“I’m a foo”); } // I’m a foo  return 을 break 로 사용하기 (return 으로 함수를 종료하는데 사용할 수 있다.)  (Option) 2중 루프를 한 번에 빠져 나가기\nbreak 명령은 한 번에 한 루프만 빠져나갑니다.\n함수의 return 을 이용하면 2중 루프를 한 번에 종료할 수 있습니다.\n  종료하기  var test1 = function (text) { if (text === \u0026quot;exit\u0026quot;) { return; } console.log(\u0026quot;실행\u0026quot;); } test1(\u0026quot;exit\u0026quot;) // =\u0026gt; undefined   실행 하기  var test1 = function (text) { if (text === \u0026quot;exit\u0026quot;) { return; } console.log(\u0026quot;실행\u0026quot;); } test1(\u0026quot;oh\u0026quot;\u0026quot;); // = \u0026gt; 실행  이중 loop 빠져 나가기  ex (하나만 빠져 나가기 )  for (var i = 0; i \u0026lt; 10; i ++) { for (var j = 0; j \u0026lt; 10; j++) { console.log(i , j ); if (j === 3 ) { break; } } }   ex (이중 loop 빠져나간다 with function)  var foo = function() { for (var i = 0; i \u0026lt; 10; i ++) { for (var j = 0; j \u0026lt; 10; j++) { console.log(i , j ); if (j === 3 ) { return; } } } }; foo();  배열을 이용한 while 문 , for 문 // while loop function sum (nums) { var total = 0; var i = 0; while (i \u0026lt; nums.length) { total = total + nums[i]; i++; } return total; } sum([2,3,5,1]); // 11  // for loop function sum (nums) { var total = 0 ; for (var i = 0 ; i \u0026lt; nums.length ; i = i + i ) { total = total + nums[i] } return total; } sum([2,3,5,1,]); // 11  8.Objects making objects // 1. var dog = {}; dog.name = \u0026quot;jj\u0026quot; dog.color = \u0026quot;red\u0026quot; dog.kind = \u0026quot;똥깨\u0026quot; // dog = {name = \u0026quot;jj\u0026quot;, color =\u0026quot;red\u0026quot; , kind = \u0026quot;똥깨 \u0026quot;} // 2. var dog = { name : \u0026quot;jj\u0026quot;, color : \u0026quot;red\u0026quot;, kind : \u0026quot;똥깨\u0026quot; } // dog = {name = \u0026quot;jj\u0026quot;, color =\u0026quot;red\u0026quot; , kind = \u0026quot;똥깨 \u0026quot;}  using objcets in Javascript var dog = { name = \u0026quot;jj\u0026quot; color = \u0026quot;red\u0026quot; }; // we have two systems . // 1. dog.name; dog[\u0026quot;name\u0026quot;]; //결과갑 똑같다. // jj  changing objects // 1. it is changed dog.name = \u0026quot;john\u0026quot; // 2. it is added dog.food = \u0026quot;Banana\u0026quot;  메소드  객체에 속한 함수  dog.eat = function(food) { console.log(this.name + \u0026quot; ate delicious \u0026quot; + food +\u0026quot;...\u0026quot;); }; p1.eat(\u0026quot;Beef\u0026quot;); \u0026gt;jj ate delicious Beef ...  this // 메소드 안에서 사용시 함수를 소유한 객체를 가르킨다. var p2 = {}; p2.name = \u0026quot;jj\u0026quot;; p2.weight = 80; p2.say = function(word) { console.log(this.name + \u0026quot; says, \u0026quot; + word); };  ","date":1573689600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1573689600,"objectID":"4a39c526b4864aa8bc4f34442c90fd34","permalink":"/tutorial/javascript/","publishdate":"2019-11-14T00:00:00Z","relpermalink":"/tutorial/javascript/","section":"tutorial","summary":"write here:rocket:","tags":["Javascript"],"title":"Javascript_Basic","type":"docs"},{"authors":null,"categories":[],"content":" String str.includes()\n// true or false 를 반환한다. // if 문에 넣어 쓴다. let str = 'To be, or not to be, that is the question.'; console.log(str.includes('To be')); // true console.log(str.includes('question')); // true console.log(str.includes('nonexistent')); // false console.log(str.includes('To be', 1)); // false console.log(str.includes('TO BE')); // false console.log(str.includes(''))  str.match(regexp)\nimmutable\n// 문자열안에 있는 알파벳 뽑기. let str = \u0026quot;abcdefgh23j2k4h6l3h1uiui24h4324jk3jh4k3h24\u0026quot; let alphabet = str.match(/[a-zA-Z]/g); // [\u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;, \u0026quot;c\u0026quot;, \u0026quot;d\u0026quot;, \u0026quot;e\u0026quot;, \u0026quot;f\u0026quot;, \u0026quot;g\u0026quot;, \u0026quot;h\u0026quot;, \u0026quot;j\u0026quot;, \u0026quot;k\u0026quot;, \u0026quot;h\u0026quot;, \u0026quot;l\u0026quot;, \u0026quot;h\u0026quot;, \u0026quot;u\u0026quot;, \u0026quot;i\u0026quot;, \u0026quot;u\u0026quot;, \u0026quot;i\u0026quot;, \u0026quot;h\u0026quot;, \u0026quot;j\u0026quot;, \u0026quot;k\u0026quot;, \u0026quot;j\u0026quot;, \u0026quot;h\u0026quot;, \u0026quot;k\u0026quot;, \u0026quot;h\u0026quot;]  str[index]\nimmutable\n// 1.글자 하나하나 가져오기 // 2. index로 접근은 가능하지만 쓸 수는 없음 (read-only) // 3. + 연산자를 쓸수 있음. // 4. length 쓸수 있음. // let str = 'CodeStates'; // str[0]; \u0026gt;\u0026gt; 'C' // but // str[0] = 'G' \u0026gt;\u0026gt; 바뀌지 않음. // str = 'Codestates'  str..toUpperCase()\nimmutable\n 소문자를 대문자로 바꿈\n let str = 'CodeStates'; str.toUpperCase(); \u0026gt;\u0026gt;\u0026quot;CODESTATES  str.toLowerCase()\nimmutable\n 대문자 소문자 바꿈\n  let str = \u0026quot;CodeStates\u0026quot;; str.toLowerCase()  num.toString()\n 1.숫자를 문자로 바꾸는것\n let num = 10; num.toString(); \u0026gt;\u0026gt; '10'   2.Tip배열에 담겨있는 문자열을 꺼낼때도 사용\n arr = [\u0026quot;this is john\u0026quot;]; //이문자를 꺼내기 위해서는 toString(); let words = arr.toString(); \u0026gt;words \u0026gt; \u0026quot;this is john\u0026quot; function getAllWords(str) { // your code here // toString 를 사용해 배열에 있는 문자를 꺼내서 새로운 변수에 담는다 // 변수에 담긴 문자를 나누는 메소드를 사용해 새로운 변수에 또 담는다. // 변수를 출력한다. if ( str === \u0026quot;\u0026quot; ) { let arr = []; return arr; } else { let words = str.toString(); let ret = words.split(\u0026quot; \u0026quot;); return ret } }  String(obj)\n 숫자를 문자로 바꾸는것\nString, 이 함수는 변환하려는 객체의 toString() 메소드를 사용하는 것과 동일함\n var t = [1,2,3]; console.log(String(t)); \u0026gt;\u0026gt;\u0026quot;1,2,3\u0026quot;  str.split()\n immtuable\n문자열을 문자의 배열로 나누고 싶을 때 사용하는 메소드입니다.\n문자열을 배열로 만들때 유용\n let str = \u0026quot;hello, world this is jj\u0026quot;; 1.str.split(); [\u0026quot;hello, world this is jj\u0026quot;] 2. str.split(\u0026quot;\u0026quot;); [\u0026quot;hello\u0026quot;, \u0026quot;world\u0026quot;, \u0026quot;this\u0026quot;, \u0026quot;is\u0026quot;, \u0026quot;jj\u0026quot;] 3. str.split(\u0026quot; \u0026quot;); [\u0026quot;h\u0026quot;, \u0026quot;e\u0026quot;, \u0026quot;l\u0026quot;, \u0026quot;l\u0026quot;, \u0026quot;o\u0026quot;, \u0026quot; \u0026quot;, \u0026quot;w\u0026quot;, \u0026quot;o\u0026quot;, \u0026quot;r\u0026quot;, \u0026quot;l\u0026quot;, \u0026quot;d\u0026quot;, \u0026quot; \u0026quot;, \u0026quot;t\u0026quot;, \u0026quot;h\u0026quot;, \u0026quot;i\u0026quot;, \u0026quot;s\u0026quot;, \u0026quot; \u0026quot;, \u0026quot;i\u0026quot;, \u0026quot;s\u0026quot;, \u0026quot; \u0026quot;, \u0026quot;j\u0026quot;, \u0026quot;j\u0026quot;]  var s = \u0026quot;hello, world this is jj\u0026quot;; s.split(\u0026quot;,\u0026quot;); \u0026quot;hello\u0026quot;, \u0026quot; world this is jj\u0026quot; 콤마가 생겼다. 콤마의 기준으로 갈라진다.  var s = \u0026quot;hello world t-h-i-s-i-s-j-j\u0026quot; s.split(\u0026quot;-\u0026quot;); \u0026quot;hello world t\u0026quot;, \u0026quot;h\u0026quot;, \u0026quot;i\u0026quot;, \u0026quot;s\u0026quot;, \u0026quot;i\u0026quot;, \u0026quot;s\u0026quot;, \u0026quot;j\u0026quot;, \u0026quot;j\u0026quot; - 기준으로 갈라진다.  str.indexOf(serchValue)\n 찾기\n  \u0026quot;Blue Whale\u0026quot;indexOf(\u0026quot;Blue\u0026quot;); \u0026gt;\u0026gt;0 \u0026quot;Blue Whale\u0026quot;.indexOf(\u0026quot;hello\u0026quot;); \u0026gt;\u0026gt;-1 \u0026quot;Blue Whale\u0026quot;.indexOf(\u0026quot;Whale\u0026quot;); \u0026gt;\u0026gt;5 \u0026quot;canal\u0026quot;.lastIndexOf(\u0026quot;a\u0026quot;) \u0026gt;\u0026gt; 3   str.repeat(숫자입력) 반복하는것    let str = 'Because I'm happy'; console.log('Chorus lyrics for \u0026quot;Happy\u0026quot;: ' + chorus.repeat(27));  str.charAt(index)\n 인덱스에 있는 값을 리턴한다.\nex\n var stringName = 'coding everybody'; alert(stringName.charAt(0)); // c alert(stringName.charAt(stringName.length-1)); // y alert(stringName.charAt(1000) == ''); // true  str.replace()\n immtable\n값을 찾아서 원하는 값으로 바꿔준다\n str = \u0026quot;john jung\u0026quot; let newStr = str.replace(john,jj); \u0026gt; \u0026quot;jj jung\u0026quot;  Number num.toFixed( digits )\n// 소수점 지정하는것 var numObj = 12345.6789; numObj.toFixed(); // Returns '12346': note rounding, no fractional part numObj.toFixed(1); // Returns '12345.7': note rounding numObj.toFixed(6); // Returns '12345.678900': note added zeros  parseInt(value)\n// 정수로 파싱 한다. // 만약 Number 는 숫자로 만 변환해준다면 이메소드는 바로 15를 출력하게 해준다. // parseInt 는 집법 변환 할때도 쓰인다. parseInt(string, radix); parseInt('0xF', 16); // 15 \u0026gt;\u0026gt; 16진수는 f까지 있으니까 f 가15니까 parseInt('F', 16); // 15 parseInt('17', 8); // 15 10진법으로 전환해서 parseInt(15,99 10); // 15 Number(\u0026quot;15.123\u0026quot;) // 15.123 parseInt(\u0026quot;15.123\u0026quot;\u0026quot;) // 15  parseFloat(value)\nparseFlaot(\u0026quot;15.123\u0026quot;) // 15.123  Number.isInteger(value)\n// 정수인지 아닌지 판단하는 것 Number.isInteger(0); // true Number.isInteger(1); // true Number.isInteger(-100000); // true Number.isInteger(99999999999999999999999); // true Number.isInteger(0.1); // false Number.isInteger(Math.PI); // false Number.isInteger(NaN); // false Number.isInteger(Infinity); // false Number.isInteger(-Infinity); // false Number.isInteger('10'); // false  Math_method Math.random()\n// arguments : 없음 // return value : 0 과 1 사이의 난수를 반환한다. Math.random(); // 0.7915594421190384 // 콘솔에 찍으면 막 나온다. Math.random(); // 0.12480720616017948 // 난수가 반환이 되는 것이다. Math.random(); // 0.014493108986906034 // 이것을 이용해 특정 범이의 정수 리턴하기 // 사용자가 원하는 정수를 출력하는 함수 만들기 Math.random(); // 0.014493108986906034 // // 0 과 1 사이의 숫자들 Math.random() * 10 // \u0026gt;\u0026gt;8.031510209216247 // 0 ~ 10 까지 Math.random() * 109 // \u0026gt;\u0026gt;50.031510209216247 // 0 ~ 109 까지 Math.random() * 20 // \u0026gt;\u0026gt;14.031510209216247 // 0 ~ 20 까지 Math.random() * 5 // \u0026gt;\u0026gt;2.031510209216247 // 0 ~ 5 까지 function getRandomInt(num) { return Math.floor(Math.random() * num ); } getRandomInt(10); // \u0026gt;\u0026gt; 6 getRandomInt(100); // \u0026gt;\u0026gt; 50 getRandomInt(20); // \u0026gt;\u0026gt; 15 getRandomInt(7); // \u0026gt;\u0026gt; 5  Math.floor(x)\n// 반환값(Return) // number, 정수 //예제(Example) Math.floor(5.12323); // number, 5 Math.floor(5.912321); // number, 5 Math.floor(5); // number, 5 Math.floor(-5.121323); // number, -6 Math.floor(-5.923213); // number, -6  Math.abs(x)\n// 함수는 주어진 숫자의 절대값을 반환합니다 // 소수점을 없애는 것은 안된다. Math.abs('-1'); // 1 Math.abs(-2); // 2` Math.abs(null); // 0 Math.abs(''); // 0 Math.abs([]); // 0 Math.abs([2]); // 2 Math.abs([1,2]); // NaN Math.abs({}); // NaN Math.abs('string'); // NaN Math.abs(); // NaN  Math.max() Math.min()\n 큰수,작은수 가져오기\nEX 큰수 가져오기\n Math.max(10, 20); // 20 Math.max(-10, -20); // -10 Math.max(-10, 20); // 20   reduce 사용해서 큰수 가져오기\n let arr = [1,2,3]; let max = arr.reduce(function(a, b) { return Math.max(a, b); }); console.log(max) \u0026gt;3   spread operator 사용해서 큰수 가져오기\narr 로 큰수를 가져오기 위해서는 \u0026hellip; 을 써야 Math.max() \u0026lt;\u0026lt; 안에 들어간다.\n let arr = [1, 2, 3]; let max = Math.max(...arr); console.log(max) \u0026gt;3  Array arr.reverse()\nlet arr = [1, 2, 3]; arr.reverse(); // [3, 2, 1] // 갹체안에있는 pro 값만 바꿀수 있다. let a = {0: 1, 1: 2, 2: 3, length: 3}; console.log(a); // {0: 1, 1: 2, 2: 3, length: 3} Array.reverse.call(a); //same syntax for using apply() console.log(a); // {0: 3, 1: 2, 2: 1, length: 3}  arr.fill()\n// fill 메서드는 value, start, end의 3개 인자를 가집니다 [1, 2, 3].fill(4); // 4 로 채울것이다. // [4, 4, 4] [1, 2, 3].fill(4, 1); // 4 로 채울건데 1번째 부터 쭉 // [1, 4, 4] [1, 2, 3].fill(4, 1, 2); // 4 로 채울건데 1번쨰 부터 2번째까지 //[1, 4, 3] [1,2,3,4,5,6,7,8,9,10].fill(4, 3, 6); // 4 로 채울건데 3번째 부터 6번째 까지 (5 번째 까지 채워짐) // [1, 2, 3, 4, 4, 4, 7, 8, 9, 10] [1, 2, 3].fill(4, 3, 3); // 4 로 채울건데 3번째 부터 3번까지 값이 없다. // [1, 2, 3]  arr.includes()\narr = [\u0026quot;a\u0026quot;,\u0026quot;b\u0026quot;,\u0026quot;c\u0026quot;,\u0026quot;d\u0026quot;]; arr.includes(\u0026quot;a\u0026quot;); // true arr.includes(\u0026quot;f\u0026quot;); //false  Array.isArray()\n 메서드는 인자가 Array인지 판별합니다.\n() 안에 비워 있으면 실행되지 않는다.\n Array.isArray([]); // true Array.isArray([1, 2, 3]); // true Array.isArray({foo: 123}); // false Array.isArray('foobar'); // false Array.isArray(undefined); // false  arr.indexOf(seachElement)\n immutable\nstr.indexOf 랑 똑같다.\nelement 존재 확인 할때 유용\n발견되지 않으면 -1 표시\n()\u0026lt;\u0026lt;원소를 입력하면부터 앞에서 부터 찾아서 index번호 알려준다. 비슷한 목적을 가진 메소드로는 includes,find가 있음\n var array = [2, 9, 9]; array.indexOf(2); // 0 array.indexOf(7); // -1 array.indexOf(9, 2); // 2 array.indexOf(2, -1); // -1 array.indexOf(2, -3); // 0  arr.lastIndexOf(seachElement)\n ()\u0026lt;\u0026lt;원소를 입력하면부터 뒤에서 부터 찾아서 index번호 알려준다.\n var anyString = 'Brave new world'; console.log('The index of the first w from the beginning is ' + anyString.indexOf('w')); // logs 8 console.log('The index of the first w from the end is ' + anyString.lastIndexOf('w')); // logs 10 console.log('The index of \u0026quot;new\u0026quot; from the beginning is ' + anyString.indexOf('new')); // logs 6 console.log('The index of \u0026quot;new\u0026quot; from the end is ' + anyString.lastIndexOf('new')); // logs 6  arr.sort(sortfunc)\n mutable\n1.배열을 정렬한다.\n2.알파벳 순서로 정렬한다.\n3.숫자의 경우 암시적으로 문자열로 형변환 하기 때문에 숫자 1이 숫자 10보다 먼저 나온다.\n4.sortfunc 로 비교 대상인 두개의 인자를 전달하는데, 리턴 값에 따라서 선후를 판단한다.\n strArr = [\u0026quot;all\u0026quot;, \u0026quot;before\u0026quot;, \u0026quot;hello\u0026quot;, \u0026quot;world\u0026quot;] // a 가 크면 리턴 1 작은수부터 정렬 strArr.sort(function(a,b){ if (a \u0026gt; b) { return 1; } else if (a === b){ return 0; } else { return -1; } }) // a 가 작으면 리턴 큰수부터 정렬 strArr.sort(function(a,b){ if (a \u0026gt; b) { return -1; } else if (a === b){ return 0; } else { return 1; } })   Example 1\n  var numbers = [9,8,7,6,5,4,3,2,1]; alert(numbers.sort()); // array, [1,2,3,4,5,6,7,8,9] alert(numbers); // array, [1,2,3,4,5,6,7,8,9], 원본을 변경한다. alert(numbers.sort() === numbers); // boolean, true, 원본과 반환값이 같다. var numbers = [20, 10, 9,8,7,6,5,4,3,2,1]; //array, [1,10,2,20,3,4,5,6,7,8,9], 암시적으로 원소를 문자로 형변환 하기 때문에 10이 1뒤에 온다. alert(numbers.sort());   Example 2\n var numbers = [20, 10, 9,8,7,6,5,4,3,2,1]; var x = function(a,b){ return a-b; } console.log(numbers.sort(x)); [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20] 순서반대 로 할려면 return a+b; [20, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]   Example 3\n  function sortNumber(a,b){ // 비교 대상인 a와 b가 인자로 전달된다. //alert('a :'+a+', b:'+b); // a에서 b를 뺀 결과가 음수면 a가 b보다 작고, 0이면 같다. // sort메소드는 return 값이 음수,양수,0인지에 따라서 순서를 정한다. return a-b; } var numbers = [20, 10, 9,8,7,6,5,4,3,2,1]; alert(numbers.sort(sortNumber)); // array, [1,2,3,4,5,6,7,8,9,10,20]   Description from others\n  위의 sort함수를 보면 parameter로 function이 올수 있다은건 이 문서를 보고 알수 있습니다. 그런데 sort함수 parameter인 function의 parameter와 retrun에 대한 설명(?)은 어떻게 알수 있나요?? 예를들어서 var numbers = [20, 10, 9,8,7,6,5,4,3,2,1]; function sortNumber(a,b){ return a - b; } 이럴때, sortNumber함수(내가 만들려는 함수 )의 파라미터가 2개 (a,b)인건 어찌 알수있고, return함수가 어떻게 동작하는지는 어떻게 알수 있을까요?   Description from others\n 우선 [20, 10, 9,8,7,6,5,4,3,2,1]의 배열에서 a-b라는 연산을 모두 한 다음 그 결과값으로 정렬하는 것이 결코 아닙니다. 뭐하러 굳이 뺄셈을 하고 그 값으로 또 정렬하겠습니까? 자바스크립트의 정확한 알고리즘은 아니지만 쉽게 정렬 알고리즘을 설명하면 이렇습니다. (a,b) 형식으로 지정한 두 인자를 차례로 비교합니다. 우선 배열 numbers[0]과 numbers[1] 즉, 20과 10을 비교해 볼까요? 20-10 = 10 결과값이 10 즉, 양수입니다. sort함수에 sortNumber(a,b)의 return 값으로 양수 10을 전달합니다. 그럼 sort함수가 양수값을 전달받고 배열의 순서를 바꾸어 버립니다. (정확하게 말하면 두 배열 안에 든 값을 교체) 그럼 배열이 [10, 20, 9,8,7,6,5,4,3,2,1] 이렇게 바뀝니다. 그 다음 numbers[0]과 numbers[2] 즉 10과 9를 비교합니다. 10 - 9 = 1 \u0026gt;0, 양수입니다. 결과값이 양수이므로 또 10과 9의 순서를 바꿉니다. 이런 식으로 계속 두 인자를 비교해서 결과값이 양수가 나오면 순서를 바꾸고, 음수가 나오면 순서를 그대로 유지하는 겁니다. 배열이 바뀌어가는 순서를 보면 이해하기 쉽습니다. [(20), (10), 9,8,7,6,5,4,3,2,1] 20-10 = 10, 즉 양수이므로 순서바뀜! ()는 비교되는 인자값. [(10), 20, (9),8,7,6,5,4,3,2,1] 10 - 9 = 1 또 양수, 순서 바뀜. [(9), 20, 10, (8),7,6,5,4,3,2,1] 반복... [(8), 20, 10, 9,(7)...] ... [(2). 20, 10...3, (1)] [(1), 20, 10...] 그럼 배열 내에서 가장 작은 값 1이 찾아지겠죠. [1, 20, 10, 9,8,7,6,5,4,3,2] 1의 순서는 바뀌지 않습니다. 1-2 = -1 즉 결과값이 음수이기 때문이죠. 그 다음은 두번째 배열 차례입니다. 20 - 10 = 10 \u0026gt; 0 이므로 순서를 또 바꿉니다. [1, (20), (10), 9,8,7,6,5,4,3,2] [1, (10), 20, (9), 8...] [1, (9), 20, 10, (8)...] 이런 식으로 반복하다 보면 두번째로 작은 값 2도 찾게 됩니다. .... [1, 2, 20, 10, 9,8,7,6,5,4,3] 그럼 다음은 세번째... 이렇게 지루하게 반복하면 결국 정렬이 됩니다. 물론 실제 자바스크립트에서는 비교하는 순서가 다릅니다. 다른 알고리즘을 쓰기 때문이죠. 이렇게 차례차례 비교해 나가면 인간이 이해하기는 쉽지만 연산량이 기하급수적으로 늘어나기 때문에 다른 정렬 알고리즘을 쓰는 것이죠. 실제로는 [20, 10, 9,8,7,6,5,4,3,2,1] 배열의 양쪽 끝부터 비교하고 (20, 1), 그 다음 배열의 가운데 값을 차례로 비교해 나갑니다. (1,6) 디버깅해 보시면 쉽게 아실 수 있을 겁니다   Description from others\n ar numbers = [20, 10, 9,8,7,6,5,4,3,2,1]; function sortNumber(a,b){ return a - b; } 를 하게 되면 모든 값들끼리 a - b를 하게 됩니다. 그렇게 나온 값들을 sort()에 넣으면, (a - b)의 순서가 숫자가 낮은 것부터 높은 순서대로 정렬이 되겠죠. -19(1 - 20), -9(1-10), -8(1-9), -7(1-8), -6(1-7), -5(1-6), -4(1-5), -3(1-4), -2(1-3), -1(1-2) -18(2-20), -8(2-10), -7(2-9), -6(2-8), -5(2-7), -4(2-6), -3(2-5), -2(2-4), -1(2-3), 0(2-2), 1(2-1) -17(3-20), -7(3-10), -6(3-9), -5(3-8), -4(3-7), -3(3-6), -2(3-5), -1(3-4), 0(3-3), 1(3-2), 2(3-1) ... 10(20-10), 11(20-9), 12(20-8), 13(20-7), 14(20-6), 15(20-5), 16(20-4), 17(20-3), 18(20-2), 19(20-1) 그럼 계산된 숫자의 크기에 따라서 a와 b의 순서가 sort()에 의해 재배열 되어 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20 가 나옵니다.  arr.push(newElement)\nmutable\n 마지막 배열에 추가\n var arr = [1,2,3,4,]; arr.push(1); arr; // = \u0026gt; [1,2,3,4,1]  arr.pop()\n mutable\n뒤에 있는배열 제거\n var arr = [1,2,3,4,]; arr.pop(); arr; // = \u0026gt; [1,2,3]  arr.unshift()\nmutable\n 앞에 붙이기\n var arr = [1,2,3,4]; arr.unshift(1); arr; // = \u0026gt; [1,1,2,3,4,];  arr.shift()\nmutable\n 앞에 있는거 빼기\n var arr = [1,2,3,4]; arr.shift(); arr; // = \u0026gt; [2,3,4,]  arr.slice(bein,end)\n immutable 문자열의 특정구간을 검색\n  tip 복제할수 있는 기능도 있다.  let obj1 = [1,2,3,4,5,6]; let obj2 = obj1.slice(); \u0026gt;\u0026gt; obj2 = [1,2,3,4,5,6 ];   2번째 인덱스 부터 가져온다  var fruits = ['Banana', 'Orange', 'Lemon', 'Apple', 'Mango']; var myFruits = fruits.slice(2); myFruits = [\u0026quot;Lemon\u0026quot;, \u0026quot;Apple\u0026quot;, \u0026quot;Mango\u0026quot;]   Return a portion of an existing array  var fruits = ['Banana', 'Orange', 'Lemon', 'Apple', 'Mango']; var citrus = fruits.slice(1, 3); // fruits contains ['Banana', 'Orange', 'Lemon', 'Apple', 'Mango'] // citrus contains ['Orange','Lemon']   만약 fruits.slice(1,0)  var fruits = ['Banana', 'Orange', 'Lemon', 'Apple', 'Mango']; fruits.slice(1, 0); \u0026gt;\u0026gt; [] \u0026lt;\u0026lt; 값이 사라진다.  arr.splice(start,deleteCount,\u0026ldquo;itme1\u0026rdquo;,\u0026hellip;\u0026ldquo;)\n mutable\n배열 중간에 원소 추가, 삭제\n중간에 element 를 삭제 할수 있는 방법이 이거뿐\n var array = [1,2,3,4,5]; // 배열 중간에 원소 삭제 // array.splice(인덱스, 인덱스부터 삭제할 원소개수) var o = array.splice(2, 1); console.log(array); // [1, 2, 4, 5] console.log(o); // [3] // 삭제된 원소 반환 // 배열 중간에 원소 추가 // array.splice(인덱스, 인덱스부터 삭제할 원소개수(추가시 0), 추가할 원소 ...) o = array.splice(3, 0, 99, 99, 99); console.log(array); // [1, 2, 4, 99, 99, 99, 5] console.log(o); // [] /* array.unshift(); // 첫번째 원소 추가 array.shift(); // 첫번째 원소 삭제 array.push(); // 마지막 원소 추가 array.pop(); // 마지막 원소 삭제 array.join(); // 배열의 모든 원소를 문자열로 변환하고 연결(+)한 결과 반환 */  arr.concat(arr)\nimmutable\n 더하기\n 1. let letters = ['a', 'b', 'c']; let numbers = [1, 2, 3]; letters.concat(numbers); // result in ['a', 'b', 'c', 1, 2, 3] 2. var arr = [1,2,3,4,5]; arr.concat(6); console.log(arr) \u0026gt;\u0026gt; [1,2,3,4,5,] 기존에 있는 것은 변하지 않는다. 변하게 하기위해서는 변수를 새로 만들기 ! 3. arr.concat([6,7,8,9,10]); \u0026gt;\u0026gt;arr [1,2,3,4,5,6,7,8,9,10] 여러게를 더할수 있다.  arr.forEach(callbackFunction(element, index, array)\n immutable\n배열에 길이 만큼 반복 실행하는 용도!\nforEach()는 주어진 callback을 배열에 있는 각 요소에 대해 오름차순으로 한 번씩 실행합니다\n var array1 = ['a', 'b', 'c']; array1.forEach(function(element) { console.log(element); }); // expected output: \u0026quot;a\u0026quot; // expected output: \u0026quot;b\u0026quot; // expected output: \u0026quot;c\u0026quot;   3가지 인자값을 싱행 할수 있다.\n  요소 값 요소 인덱스 순회 중인 배열\nfunction logArrayElements(element, index, array) { console.log('a[' + index + '] = ' + element); } // Notice that index 2 is skipped since there is no item at // that position in the array. [2, 5, , 9].forEach(logArrayElements); // logs: // a[0] = 2 // a[1] = 5 // a[3] = 9   arr.map(callbackFunction(element, index, array)\n immutable\ncallback 내에서 리턴이 필요하다.\n기존배열과 길이가 같고 , 형태가 다른 배열을 만들때 유용\n  배열에 있는 값 각 각 100으로나누고 싶다?  let arr = [100 ,200 ,500 ]; let newArr = arr.map(function(cur,idx,arr){ return cur / 100; }) \u0026gt;\u0026gt;newArr = [1, 2, 5]   배열안에 모든 요소를 숫자로 바꾸기  // 더 간단하게 해결할 수 있는 방법 ['1', '2', '3'].map(Number); // [1, 2,3] // 아래 라인을 보시면... ['1', '2', '3'].map(parseInt); // 결과를 [1, 2, 3] 으로 기대할 수 있습니다. // 그러나 실제 결과는 [1, NaN, NaN] 입니다. // 그러나 `parseInt`와 달리 float이나 지수표현도 반환합니다. ['1.1', '2.2e2', '3e300'].map(Number); // [1.1, 220, 3e+300]   배열 안에있는 것을 다른 형태로 출력 하고 싶다.?(길이)  arr2 = [\u0026quot;code\u0026quot;,\u0026quot;states\u0026quot;]; let newArr2 = arr2.map(function(cur){ return cur.length }); \u0026gt;\u0026gt; newArr2 = [4, 6]  arr.filter(callbackFunction(element, index, array)\n 걸러주는 역활 한다.\nreturn 필요\n let arr = [1,2,3,4,5,6]; newArr = arr.filter(function(cur,index,arr2){ return cur \u0026lt; 2; }) newArr = [1];  arr.reduce(callback,[,initalValue])\n immutable\nreturn value : 최종 누적값\n모든 element 값을 누적해 하나의 결과로 리턴할 때 유용\nThe reducer function takes four arguments:\nAccumulator (acc)\nCurrent Value (cur)\nCurrent Index (idx)\nSource Array (src)\n  배열안에 있는 값을 각 각 더하고 싶을때 ?  let arr = [1, 2, 3, 4]; let count = arr.reduce(function(acc.cur){ return acc + cur; // 1 + 2 + 3 + 4 }); conunt =\u0026gt; 10   초기값 5 를 넣고 더했을때  let arr = [1, 2, 3, 4]; let count = arr.reduce(function(acc.cur) { return acc + cur; //5 + 1 + 2 + 3 + 4 },5); count = \u0026gt;\u0026gt; 15  arr.join(separator)\n immutable\n배열의 원소를 결합해서 하나의 문자열로 만든다. 공백이 있는 곳에 요소를 더할수 있다.\n let arr = [\u0026quot;welcome\u0026quot;,\u0026quot;coding\u0026quot;,\u0026quot;everybody\u0026quot;]; arr.join(\u0026quot; \u0026quot;); \u0026quot;welcome coding everybody\u0026quot; arr.join(\u0026quot; hi \u0026quot;) \u0026quot;welcome hi coding hi everybody\u0026quot;  arr.every()\n every() 메서드는 배열 안의 모든 요소가 주어진 판별 함수를 통과하는지 테스트합니다.\n다음 예는 배열의 모든 요소가 10보다 더 큰지 테스트합니다.\n function isBigEnough(element, index, array) { return element \u0026gt;= 10; } [12, 5, 8, 130, 44].every(isBigEnough); // false [12, 54, 18, 130, 44].every(isBigEnough); // true   화살표 함수 사용\n [12, 5, 8, 130, 44].every(elem =\u0026gt; elem \u0026gt;= 10); // false [12, 54, 18, 130, 44].every(elem =\u0026gt; elem \u0026gt;= 10); // true  arr.some()\n 하나라도 조건이 맞으면 true 반환한다.\n var array = [1, 2, 3, 5]; var even = function(element) { // checks whether an element is even return element % 2 === 0; }; console.log(array.some(even)); // expected output: true  Object Object.keys(객체) : key 뽑기 into array\nObject.values(객체) : value 뽑기 into array\nObject.entries(객체) : 전체뽑기 into array\nlet user = { name: \u0026quot;John\u0026quot;, age: 30 }; Object.keys(person) = [\u0026quot;name\u0026quot;, \u0026quot;age\u0026quot;] Object.values(person) = [\u0026quot;John\u0026quot;, 30] Object.entries(person) = [ [\u0026quot;name\u0026quot;,\u0026quot;John\u0026quot;], [\u0026quot;age\u0026quot;,30] ]   뽑은것들 변수에 담아서 배열 에 넣기\n let arrKey = Object.keys(person); \u0026gt;\u0026gt;[\u0026quot;name\u0026quot;, \u0026quot;age\u0026quot;] let arrValues = Object.values(person); \u0026gt;\u0026gt; [\u0026quot;John\u0026quot;, 30] let arrEntries = Object.entries(person); \u0026gt;\u0026gt;[ [\u0026quot;name\u0026quot;,\u0026quot;John\u0026quot;], [\u0026quot;age\u0026quot;,30] ]  obj.key or `obj[key]\n for 문을 이용해 객체안에 있는 key value 뽑기\nex 키값 뽑기\n let person = { name : \u0026quot;john\u0026quot; , age : 33 } ; for (let key in person) { console.log(key); } \u0026gt;\u0026gt;name \u0026gt;\u0026gt;age   ex value 뽑기\n  let person = { name : \u0026quot;john\u0026quot; , age : 33 } ; for (let key in person) { console.log(person[key]); } \u0026gt;\u0026gt;john \u0026gt;\u0026gt;33  ","date":1573689600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1573689600,"objectID":"4320f77cf520469fb4595080aa085879","permalink":"/tutorial/javascript-my-mdn/","publishdate":"2019-11-14T00:00:00Z","relpermalink":"/tutorial/javascript-my-mdn/","section":"tutorial","summary":"write here:rocket:","tags":["Javascript"],"title":"My_MDN","type":"docs"},{"authors":null,"categories":[],"content":" Python: Operators  Arithmetic operators Assignment operators Comparison operators Logical operators  Arithmetic Operator           + Addition x + y   - Subtraction x - y   * Multiplication x * y   / Division x / y   % Modulus x % y   ** Exponentiation x ** y   // Floor division x // y    Assignment Operators           = x = 5 x = 5   += x += 3 x = x + 3   -= x -= 3 x = x - 3   *= x *= 3 x = x * 3   /= x /= 3 x = x / 3   %= x %= 3 x = x % 3   //= x //= 3 x = x // 3   **= x **= 3 x = x ** 3   \u0026amp;= x \u0026amp;= 3 x = x \u0026amp; 3    = x   ^= x ^= 3 x = x ^ 3   \u0026gt;\u0026gt;= x \u0026gt;\u0026gt;= 3 x = x \u0026gt;\u0026gt; 3   \u0026lt;\u0026lt;= x \u0026lt;\u0026lt;= 3 x = x \u0026lt;\u0026lt; 3    Comparison Operators           == Equal x == y   != Not equal x != y   \u0026gt; Greater than x \u0026gt; y   \u0026lt; Less than x \u0026lt; y   \u0026gt;= Greater than or equal to x \u0026gt;= y   \u0026lt;= Less than or equal to x \u0026lt;= y    Python Logical Operators           and Returns True if both statements are true x \u0026lt; 5 and x \u0026lt; 10   or Returns True if one of the statements is true x \u0026lt; 5 or x \u0026lt; 4   not Reverse the result, returns False if the result is true not(x \u0026lt; 5 and x \u0026lt; 10)     exmple\nPrint(1+1) 더하기 2 Print(1-1) 빼기 0 Print(1*1) 곱하기 1 Print(3**3) 제곱 18 Print(8/2) 나누기 4 Print(3/2*4) 순서대로 곱하기 나누기 우선 그다음에 빼기 더하기 6.0 Print(7//3) 몫구하기 (3이 몇번들어갈수 있는지) 2 Print(3%2) 나머지값구하기(나머지가 1 남는다) 1 # 연산자 우선 순위 # ** # *,/,//,% # +, - # 문자열 연산 # + : 문자열 끼리 붙여주는 역할 \u0026quot;Hi\u0026quot; + \u0026quot;Hello\u0026quot; =\u0026gt; \u0026quot;HiHello\u0026quot; # * : \u0026quot;Hi\u0026quot;*3 =\u0026gt; “HiHiHi\u0026quot; # 문자열을 표현하는 방법, 만드는 방법 \u0026quot;She said \\\u0026quot;Hi\\\u0026quot;\u0026quot; # 'She said \u0026quot;Hi\u0026quot;' 'I\\'m Jake' # 특수문자나 특별한 알파벳 앞에 \\(슬래시)를 붙여서 특수 기능을 # 수행하는 것을 이스케이핑 문자 혹은 이스케이핑 처리   Python: Variables  Description   ariables are containers for storing data values. Unlike other programming languages, Python has no command for declaring a variable. A variable is created the moment you first assign a value to it.\n  Example 1\n x = 5 y = \u0026quot;John\u0026quot; print(x) print(y) \u0026gt;\u0026gt;5 \u0026gt;\u0026gt;John  Example 2\n x = 4 # x is of type int x = \u0026quot;Sally\u0026quot; # x is now of type str print(x) \u0026gt;\u0026gt;Sally  Example\nx = \u0026quot;awesome\u0026quot; print(\u0026quot;Python is \u0026quot; + x) \u0026gt;\u0026gt;Python is awesome  Note\n Variable Names\n   A variable can have a short name (like x and y) or a more descriptive name (age, carname, total_volume). Rules for Python variables: A variable name must start with a letter or the underscore character A variable name cannot start with a number A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ ) Variable names are case-sensitive (age, Age and AGE are three different variables)\n # 변수 이름? # 대소문자 구분 # 알파벳, 숫자, 한글 : 숫자는 맨앞에는 사용 금지 # 특수문자 : _ # 명사나 동사형 # 표기법 # sayHi : 두번째 단어부터 단어의 첫글자는 대문자 # SayHi : 모든 단어의 첫글자는 대문자 # say_hi : 모두 소문자, 단어사이에 _ # strSayHi : 변수명 앞에 변수의 타입을 기록  Python: int float str 1.int: 정수 x = input(\u0026quot;숫자를 입력해주세요.:\u0026quot;) Y = input(\u0026quot;숫자를 입력해주세요.:”) x = 20 y = 30 Print(x+y) \u0026gt;\u0026gt;\u0026gt;2030 x = `int`(input(\u0026quot;숫자를 입력해주세요.:\u0026quot;)) Y = `int`(input(\u0026quot;숫자를 입력해주세요.:\u0026quot;)) x = 20 y = 30 Print(x+y) \u0026gt;\u0026gt;\u0026gt;50  2. float :실수 () 소수점 나타내주는것 x = `float`(input(“숫자를 입력해주세요.:”)) \u0026gt;\u0026gt;20 Y = `float`(input(“숫자를 입력해주세요.:”)) \u0026gt;\u0026gt;30 Print(x+y) 50.0  3. Str :문자 이것을 사용하면 숫자를 문자로 변환시킬수 있다. x = int(input(\u0026quot;숫자를 입력하세요.:\u0026quot;) Y = int(input(\u0026quot;숫자를 입력하세요.:\u0026quot;) sum = x + y print(\u0026quot;두 수의 합은, sum, \u0026quot;입니다.\u0026quot;) \u0026gt;\u0026gt;\u0026gt;두 수의 합은 50 입니다. 50 과 입니다 \u0026lt;\u0026lt;\u0026lt;를 붙이고싶다 또는 문자를 숫자로 바꾸기 위해서 str 필요하다. print(\u0026quot;두 수의 합은\u0026quot;\u0026quot;,`str`(sum),\u0026quot;입니다.\u0026quot;) \u0026gt;\u0026gt;\u0026gt;\u0026gt;두 수의 합은 50입니다. Print(1,2,3,4,end=\u0026quot;,\u0026quot;). \u0026lt;\u0026lt;\u0026lt; 콤마로 띄어쓴다. print(1,2,3,4,sep=\u0026quot;,\u0026quot;) \u0026lt;\u0026lt;\u0026lt;\u0026lt; 중간에 문자 집어넣기  Python:Format_string format 명령 [데이터타입] : s(문자열), c(한글자), d(정수), f(실수)  example exercise 1-1\nforamt_string = \u0026quot;섭씨 35도는 화씨 99도 입니다.\u0026quot; foramt_string = \u0026quot;섭씨 %f도는 화씨 %f도 입니다.\u0026quot; msg = foramt_string % (35.7, 99.23) print(msg) f 는 소수점 처리를 할수 있다. foramt_string = \u0026quot;섭씨 '%0.2f'도는 화씨 '%-.4f'도 입니다.\u0026quot; msg = foramt_string % (35.7, 99.23) print(msg)   Python: Variables  ariables are containers for storing data values.\n  Example\nx = 5 y = \u0026quot;John\u0026quot; print(x) print(y)   Python: conditional  if (a \u0026gt; b): [처리문 실행문] elif [조건문 조건식]: [실행문 처리문] else: [실행문] \u0026quot;\u0026quot;\u0026quot; # 조건식 : 명제 -\u0026gt; 참과 거짓으로 판별할 수 있는 구문 # 참과 거짓 : True False # a \u0026gt; b, a \u0026lt; b, a \u0026gt;= b, a \u0026lt;= b, a == b, a != b # and, or # not # 0, \u0026quot;\u0026quot;, False, [] # 상태 : empty if not empty: 청소를 한다. a = 7 b = 8 c = 9 a \u0026gt; b and a \u0026gt; c a \u0026gt; b or a \u0026gt; c not (a \u0026gt; c) a \u0026lt; b a \u0026gt;= b a \u0026lt;= b a == b a != b   Example\na = int(input(\u0026quot;당신의 출생연도를 입력해주세요.:\u0026quot;)) age = 2019 - a + 1 if age \u0026gt;= 20: print(\u0026quot;당신은 성인입니다.”)  Example\na = int(input(\u0026quot;당신의 출생연도를 입력해주세요.:\u0026quot;)) age = 2019 - a + 1 if age \u0026gt;= 20: print(\u0026quot;당신은 성인입니다.\u0026quot;) else: print(\u0026quot;당신은 성인이 아닙니다.\u0026quot;)  Example exercise 1-1\n# 사용자의 키와 체중을 입력받아서 # bmi 계산하여 출력하세요 # bmi = 체중(kg) / (키(m)의 제곱) height = input(\u0026quot;키를 입력하세요 : \u0026quot;) height = float(height) weight = input(\u0026quot;체중을 입력하세요 : \u0026quot;) weight = float(weight) bmi = weight / ((height/100)**2) # 키와 체중을 입력받고 # bmi 계산하고 # 18.5 미만 = 저체중 # 18.5 이상 23 미만 = 정상체중 # 23 이상 = 과체중 bmi_level = \u0026quot;\u0026quot; if bmi \u0026lt; 18.5: bmi_level = \u0026quot;저체중\u0026quot; elif 18.5 \u0026lt;= bmi \u0026lt; 23: bmi_level = \u0026quot;정상체중\u0026quot; else: bmi_level = \u0026quot;과체중\u0026quot; print(bmi,bmi_level)  Example exercise 1-2\n # 섭씨 -\u0026gt; 화씨로 바꾸는 프로그램 # 화시 -\u0026gt; 섭씨로 바꾸는 기능 # 메뉴 입력 시작 print(\u0026quot;-----MENU-----\u0026quot;) print(\u0026quot;1. 섭씨 -\u0026gt; 화씨 변환\u0026quot;) print(\u0026quot;2. 화씨 -\u0026gt; 섭씨 변환\u0026quot;) print(\u0026quot;3. 프로그램 종료\u0026quot;) menu = input(\u0026quot;메뉴를 선택하세요 : \u0026quot;) # 메뉴 입력 끝 # 온도 계산 시작 if menu == \u0026quot;1\u0026quot;: C = input(\u0026quot;섭씨 온도를 입력하세요 : \u0026quot;) C = float(C) F = C * 1.8 + 32 msg = \u0026quot;섭씨 \u0026quot;+str(C)+\u0026quot;도는 화씨 \u0026quot;+str(F)+\u0026quot;도 입니다.\u0026quot; print(msg) elif menu == \u0026quot;2\u0026quot;: F = input(\u0026quot;화씨 온도를 입력하세요 : \u0026quot;) F = float(F) C = (F - 32) / 1.8 msg = \u0026quot;화씨 \u0026quot;+str(F)+\u0026quot;도는 섭씨 \u0026quot;+str(C)+\u0026quot;도 입니다.\u0026quot; print(msg) elif menu == \u0026quot;3\u0026quot;: print(\u0026quot;프로그램을 종료합니다.\u0026quot;) else: print(\u0026quot;잘못 선택하셨습니다.\u0026quot;)   Python: try, except  try: #[오류가 날지도 모르는 코드] a = int(\u0026quot;a\u0026quot;) print(\u0026quot;in\u0026quot;) except ValueError: #[발생한 오류에 대응할 코드] print(\u0026quot;fired exception\u0026quot;) except ZeroDivisionError: #[발생한 오류에 대응할 코드] print(\u0026quot;fired exception\u0026quot;) except: #[발생한 오류에 대응할 코드] print(\u0026quot;fired exception\u0026quot;) else: #[오류가 없이 지나왔을 경우 코드] print(\u0026quot;no error\u0026quot;) finally: #[어쨋든 실행될 코드] print(\u0026quot;anyway\u0026quot;)   exercise 1-1\n number = input(\u0026quot;정수를 입력하세요 : \u0026quot;) try: number = int(number) except ValueError: print(\u0026quot;정수가 아닙니다. 다시 입력하세요.\u0026quot;) number = input(\u0026quot;정수를 입력하세요 : \u0026quot;) number = int(number) result = number*number print(result) # 입력받은 정수의 제곱 값을 출력하는 프로그램 # 만약 숫자가 아니라면 다시 입력하라는 메시지를 출력한다. # 다시 입력 하라는 메시지는 1회만   Python: While  while [조건식]: [실행문] [실행문] [실행문] [실행문] \u0026quot;\u0026quot;\u0026quot; 1 예) 이런식으로 많이 쓰인다. While True: Try: Break except 2 예) while True: # 정수를 입력받는다. 정수가 입력될 때까지 number = input(\u0026quot;정수를 입력하세요 : \u0026quot;) try: number = int(number) break except: print(\u0026quot;정수가 아닙니다. 다시 입력하세요.\u0026quot;) print(number)   exercise\n # 섭씨 -\u0026gt; 화씨로 바꾸는 프로그램 # 화시 -\u0026gt; 섭씨로 바꾸는 기능 # 메뉴 입력 시작 print(\u0026quot;-----MENU-----\u0026quot;) print(\u0026quot;1. 섭씨 -\u0026gt; 화씨 변환\u0026quot;) print(\u0026quot;2. 화씨 -\u0026gt; 섭씨 변환\u0026quot;) print(\u0026quot;3. 프로그램 종료\u0026quot;) menu = input(\u0026quot;메뉴를 선택하세요 : \u0026quot;) # 메뉴 입력 끝 # 온도 계산 시작 if menu == \u0026quot;1\u0026quot;: while True: try: C = input(\u0026quot;섭씨 온도를 입력하세요 : \u0026quot;) C = float(C) break except: print(\u0026quot;다시 입력하세요.\u0026quot;) F = C * 1.8 + 32 msg = \u0026quot;섭씨 \u0026quot;+str(C)+\u0026quot;도는 화씨 \u0026quot;+str(F)+\u0026quot;도 입니다.\u0026quot; print(msg) elif menu == \u0026quot;2\u0026quot;: while True: try: F = input(\u0026quot;화씨 온도를 입력하세요 : \u0026quot;) F = float(F) break except: print(\u0026quot;다시 입력하세요.\u0026quot;) C = (F - 32) / 1.8 msg = \u0026quot;화씨 \u0026quot;+str(F)+\u0026quot;도는 섭씨 \u0026quot;+str(C)+\u0026quot;도 입니다.\u0026quot; print(msg) elif menu == \u0026quot;3\u0026quot;: print(\u0026quot;프로그램을 종료합니다.\u0026quot;) else: print(\u0026quot;잘못 선택하셨습니다.\u0026quot;)   Python: for  Description\n# for [name] in [bucket]: # [실행문]   for n in range(10): print(n) print(n*n)   for, range 활용해서 1~100까지의 홀수의 합을 구하는 프로그램 total = 0 for x in range(1,101,2): total += x total = total + x print(total)  # \u0026quot;Range는 횟수 용으로 많이 쓰인다.\u0026quot; # range(Y) : 0 ~ Y-1까지 # range(X,Y) : X ~ Y-1까지 # range(X,Y,Z) : X ~ Y-1까지인데, Z씩 증감  for n in range(0,12.2): print(n) 2 4 6 8 10  Python: Module  import datetime 변수 = datetime.datetime.now() Print(변수) Print(변수.strftime(“%y-%m-%d\u0026quot;)) Print(변수.year) Print(변수.hour) Print(변수.corosecond)  윤년 프로그램 # 윤년 프로그램을 짜본다. # 윤년 2월 29일까지 있는 해 # 연도가 400으로 나누어 떨어지면 윤년 # 연도가 100으로 나누어 떨어지면 윤년 x # 연도가 4로 나누어 떨어지면 윤년 # 1. 올해의 윤년여부 출력 # 2. 사용자의 입력을 받아서 윤년 여부 출력 # 3. 프로그램 종료   import datetime while True: print(\u0026quot;----Menu----\u0026quot;) print(\u0026quot;1. 올해 윤년 여부\u0026quot;) print(\u0026quot;2. 입력 받은 연도 윤년 여부\u0026quot;) print(\u0026quot;3. 프로그램 종료\u0026quot;) menu = input(\u0026quot;메뉴를 선택하세요 : \u0026quot;) if menu == \u0026quot;1\u0026quot;: current_time = datetime.datetime.now() year = current_time.year if (year % 4 == 0 and year % 100 !=0) or year % 400 == 0: print(\u0026quot;윤년입니다.\u0026quot;) else: print(\u0026quot;윤년이 아닙니다.\u0026quot;) elif menu == \u0026quot;2\u0026quot;: while True: try: year = input(\u0026quot;판별하고자 하는 연도를 입력하세요 : \u0026quot;) year = int(year) break except: print(\u0026quot;다시 입력하세요.\u0026quot;) if (year % 4 == 0 and year % 100 !=0) or year % 400 == 0: print(\u0026quot;윤년입니다.\u0026quot;) else: print(\u0026quot;윤년이 아닙니다.\u0026quot;) elif menu == \u0026quot;3\u0026quot;: break # exit() else: print(\u0026quot;없는 메뉴 입니다.\u0026quot;)  Python: function # def [함수이름]([매개변수,입력값]): # [실행구문] # [return (반환값, 출력값)]   example 1-1\nA = 1 B = 2 x = 1+2 Print(x) \u0026gt;\u0026gt;\u0026gt;3 함수 이용하기 def x (A,B) : return A+B print (x(1,2)) \u0026gt;\u0026gt;\u0026gt;3  example 1-2\ndef sayHi(): print(\u0026quot;Hello Python\u0026quot;) sayHi()  exercise 1-2\n # 1~9까지의 각각의 제곱을 출력하는 함수를 만드세요. def PrintSquare(): for x in range(1,10): print(x*x) PrintSquare() PrintSquare() PrintSquare() PrintSquare() PrintSquare() def PrintSquare2(endNumber): for x in range(1,endNumber+1): print(x*x) PrintSquare2(10)  exercise 1-3\n# 두개의 숫자를 전달 받아서 # 그 두 숫자의 합을 출력하는 함수 def printSum(number1, number2): print(number1+number2) printSum(10, 22)  exercise 1-4\n# 별줄수 만들기 \u0026quot;\u0026quot;\u0026quot; 사용자에게 줄 수를 입력받아서 해당 줄 수만큼 별을 출력하시오. * *** ***** \u0026quot;\u0026quot;\u0026quot; line_count = input(\u0026quot;출력할 줄 수를 입력하세요 : \u0026quot;) line_count = int(line_count) max_width = line_count*2 - 1 format_string = \u0026quot;{:^\u0026quot;+str(max_width)+\u0026quot;s}\u0026quot; for count in range(line_count): #blank_count = line_count-(count+1) #print(\u0026quot; \u0026quot; * blank_count, end=\u0026quot;\u0026quot;) start_count = 2 * count + 1 msg = format_string.format(\u0026quot;*\u0026quot;*start_count) print(msg) * *** *****   Python: Crawler 1. 변수만들어서 저장하기 data.text 모든 리소스 불러오기  url = \u0026quot;https://www.naver.com/\u0026quot; requests.get(url) data = requests.get(url) print(data.text)  2. 제대로 돌아가고 있는지 확인 print (data.status_code) “”” 200 “”” 200번대 - 정상 300번대 - redirect 400번대 - 리소스 오류 500번대 - 소스코드 오류  3. Test 해보기 만약 이게 맞다면 응답해라  if data.status_code == requests.codes.ok: print(\u0026quot;work out”)  4. From bs4 import BeautifulSoup HTML를 해석해주는 역활 ```\nParsing(파싱) text 파일을 우리가 원하는 것을 불러오기 위해서는 parsing 필요하다.이럴때 BeautifulSoup 이라는 order 필요.\nhtml = BeautifulSoup(data.text,\u0026quot;html.parser\u0026quot;) links = html.select(\u0026quot;.PM_CL_realtimeKeyword_list_base .ah_a”)  나열방식이 틀림\n(1) for index,keyword in enumerate ( links,start=1 ) : print(index,keyword)  1  2  3 \n(2). For keyword in links[:3]: For keyword in links[::3]: Print(keyword) (3) for link in links: rank = link.select_one(\u0026quot;.ah_r\u0026quot;).text keyword = link.select_one(\u0026quot;.ah_k\u0026quot;).text print(rank,keyword,link.attrs[\u0026quot;href\u0026quot;])  1 왕종명 http://search.naver.com/search.naver?where=nexearch\u0026amp;query=%EC%99%95%EC%A2%85%EB%AA%85\u0026amp;sm=top_lve\u0026amp;ie=utf8 2 grn http://search.naver.com/search.naver?where=nexearch\u0026amp;query=grn\u0026amp;sm=top_lve\u0026amp;ie=utf8 3 백예린 http://search.naver.com/search.naver?where=nexearch\u0026amp;query=%EB%B0%B1%EC%98%88%EB%A6%B0\u0026amp;sm=top_lve\u0026amp;ie=utf8 4 붐붐파워 http://search.naver.com/search.naver?where=nexearch\u0026amp;query=%EB%B6%90%EB%B6%90%ED%8C%8C%EC%9B%8C\u0026amp;sm=top_lve\u0026amp;ie=utf8 5 2019 스타벅스 벚꽃 md http://search.naver.com/search.naver?where=nexearch\u0026amp;query=2019+%EC%8A%A4%ED%83%80%EB%B2%85%EC%8A%A4+%EB%B2%9A%EA%BD%83+md\u0026amp;sm=top_lve\u0026amp;ie=utf8 6 나르샤 http://search.naver.com/search.naver?where=nexearch\u0026amp;query=%EB%82%98%EB%A5%B4%EC%83%A4\u0026amp;sm=top_lve\u0026amp;ie=utf8 7 아소방 매트 http://search.naver.com/search.naver?where=nexearch\u0026amp;query=%EC%95%84%EC%86%8C%EB%B0%A9+%EB%A7%A4%ED%8A%B8\u0026amp;sm=top_lve\u0026amp;ie=utf8\n\u0026rdquo;\u0026ldquo;\u0026rdquo;\n","date":1573689600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1573689600,"objectID":"069d4590547a03575515d8bc29311a7f","permalink":"/tutorial/python/","publishdate":"2019-11-14T00:00:00Z","relpermalink":"/tutorial/python/","section":"tutorial","summary":"write here:rocket:","tags":["Python"],"title":"Python","type":"docs"},{"authors":null,"categories":[],"content":" ASCII(아키스) 아키스 코드란 무엇인가?  ASCII (American Standard Code for Information Interchange, 미국 정보 교환 표준 부호)\n 영문 알파벳을 사용하는 대표적인 문자 코딩\n 컴퓨터는 0과 1 숫자 밖에 모르기 때문에 문자도 숫자로 기억합니다. 이때, 어떤 숫자와 어떤 문자를 대응시키는가에 따라 여러 가지 인코딩 방식이 있는데 통상 아스키 코드 방식을 많이 사용합니다.\n 아스키 코드(ASCII Table)는 0번부터 127번까지만 사용합니다. 127번 이후 코드를 사용했던 적도 있었는데 이는 표준이 아니며 운영체제마다 다른 코드(문자)를 배치했기 때문에 호환이 되지 않습니다. 윈도우즈 운영체제는 현재 128번부터 255번 사이에 포함된 문자를 출력하려는 시도에 대해 물음표(?)를 출력해서 사용하면 안된다는 것을 알려줍니다. 128번과 255번 문자는 물음표는 아니지만 사용할 수 없는 문자입니다.\n  ASCII Table (아스키 코드표 ) ex)  alphabetPosition 함수 만들기   In this exercise, you are required to, given a string, replace every letter with its position in the alphabet. (문자열이 주어졌을때, 각각의 문자를 알파벳의 몇번째 인지 숫자로 바꾸는 함수를 작성하세요.) If anything in the text isn\u0026rsquo;t a letter, ignore it and don\u0026rsquo;t return it. a being 1, b being 2, etc. (만약 문자가 알파벳이 아니라면, 무시하고 결과값에 포함하지 마세요. a 는 1, b 는 2, 등등 으로 변환됩니다.)\n  output  alphabetPosition(\u0026quot;The sunset sets at twelve o' clock.\u0026quot;); // \u0026quot;20 8 5 19 21 14 19 5 20 19 5 20 19 1 20 20 23 5 12 22 5 15 3 12 15 3 11\u0026quot;  var alphabetPosition = function (str) { // Your code here let output = []; // 1. 배열로 바꾼다 let temp = str.toUpperCase(); // 2. THE SUNSET SETS AT.... for(let i=0;i\u0026lt;temp.length;i++){ if(typeof(temp[i]) ==='string'){ if(temp[i].charCodeAt(0) - 64 \u0026gt; 0) output.push(temp[i].charCodeAt(0) - 64); } } return output.join(' '); }  ","date":1573689600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1573689600,"objectID":"dec2e3f4a8da3f1d0e8783a961642ff9","permalink":"/tutorial/it-terminology/","publishdate":"2019-11-14T00:00:00Z","relpermalink":"/tutorial/it-terminology/","section":"tutorial","summary":"write here:rocket:","tags":["Technical terms"],"title":"Technical terms","type":"docs"},{"authors":["John Jung"],"categories":null,"content":" Supplementary notes can be added here, including code and math.   ","date":1554562800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1554562800,"objectID":"557dc08fd4b672a0c08e0a8cf0c9ff7d","permalink":"/publication/preprint/","publishdate":"2019-04-07T00:00:00+09:00","relpermalink":"/publication/preprint/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":null,"title":"An example preprint / working paper","type":"publication"},{"authors":null,"categories":null,"content":"Previous work:\nThis project follows and builds upon the project where keyboard layouts for Meꞌphaa and Sochiapam Chinantec were produced. This project uses data from Meꞌphaa and Sochiapam Chinantec but purposely extends the scope of the analysis to include Latin and Cyrillic script languages, particularly focusing on those with diacritics which express tone.\nGoals:\nThe goal of this project is to bring \u0026lsquo;natural\u0026rsquo;, intuitive, and easy to use typing experiences in the form of keyboard layout designs to minority language users. These language users often do not type in their own languages, but rather experience technology through languages other than their first language. This is in part because of the perception that their language is complex or not easy to type, which is often not an invalid observation. However, with these languages which have different and sometimes more characters than English, what does a good layout look like? The objectives of this project are threefold:\n To establish a consistent method to evaluate the appropriateness of a keyboard layout for a specific language situation given a specific text sample. This needs to include deadkeys and alt states.  This needs to account for monolingual situations This needs to account for multi-lingual situations where each language has its own keyboard This needs to account for multi-lingual situations where only a single keyboard is used  Provide a best fit solution recommendation when provided the following:  A corpus of text encoded in UTF-16 or UTF-8 in any language A user selected choice between a physical keyboard layout of ANSI, ISO, or JIS The application providing the best fit solution needs to be able to suggest a better layout, inclusive of alt states and deadkey options.  Assess and analyze real user feedback. That is, measure the impacts of keyboards on users. Speed of typing, speed of keyboard acquisition, error rate, and results such as language choice when typing.   Project resources are split into three repos: MLKA, MLKA-Bash-data, and MLKA-Test-Data.\n","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"100cb607675d8de4e5785a43ea8c36be","permalink":"/project/pos/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/pos/","section":"project","summary":"How much work is it to type languages with tonal markers in their orthographies?","tags":["maps","pos"],"title":"The minority language typing experience","type":"project"},{"authors":null,"categories":null,"content":"","date":1461682800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461682800,"objectID":"d1311ddf745551c9e117aa4bb7e28516","permalink":"/project/external-project/","publishdate":"2016-04-27T00:00:00+09:00","relpermalink":"/project/external-project/","section":"project","summary":"An example of linking directly to an external project website using `external_link`.","tags":null,"title":"External Project","type":"project"},{"authors":null,"categories":null,"content":"Founded by myself and Dr. on Geography Miguel Sevilla in 2016, Collaborative Mapping is an action-research group of enthusiasts aimed to foster citizen innovation and collective intelligence through Voluntary Geographic Informationand that result in collaborative maps at the service of citizens. We do so through participatory projects and periodical meetings and talks about tools, methodologies or related topics such as Free Culture and Informationalism paradigm. Some of our main achievements so far have been the organization of Medecins Sans Frontieres’s Humanitarian Hackaton in Spain (2017, 2018 and 2019), leading Mapping parties for Accessible Zaragoza project, or giving a number of talks and workshops on VGI and tools such as Leaflet, Carto, Mapbox, OpenStreetMap, Overpass API, Mapillary, uMap\u0026hellip;\nSince then, I have been coordinating the group\u0026rsquo;s activities as well with Dr. Miguel Sevilla-Callejo and Alejandro Suárez, Héctor Hochoa and Joan Cano, who joined the staff soon afterwards.\n","date":1459954800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1459954800,"objectID":"bc7ec31361801a36785e03f1a3a5e981","permalink":"/project/ex1/","publishdate":"2016-04-07T00:00:00+09:00","relpermalink":"/project/ex1/","section":"project","summary":"Action-research group of enthusiasts aimed to foster citizen innovation and collective intelligence through Voluntary Geographic Informationand that result in collaborative maps at the service of citizens.","tags":["maps","pos"],"title":"Collaborative Mapping","type":"project"},{"authors":["John Jung"],"categories":null,"content":" Supplementary notes can be added here, including code and math.   ","date":1441033200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1441033200,"objectID":"966884cc0d8ac9e31fab966c4534e973","permalink":"/publication/journal-article/","publishdate":"2015-09-01T00:00:00+09:00","relpermalink":"/publication/journal-article/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":null,"title":"An example journal article","type":"publication"},{"authors":["John Jung","Robert Ford"],"categories":null,"content":" Supplementary notes can be added here, including code and math.   ","date":1372604400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1372604400,"objectID":"69425fb10d4db090cfbd46854715582c","permalink":"/publication/conference-paper/","publishdate":"2013-07-01T00:00:00+09:00","relpermalink":"/publication/conference-paper/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":null,"title":"An example conference paper","type":"publication"}]